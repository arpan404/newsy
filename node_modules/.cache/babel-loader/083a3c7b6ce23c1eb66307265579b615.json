{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nconst CachedConstDependency = require(\"./dependencies/CachedConstDependency\");\n\nconst ConstDependency = require(\"./dependencies/ConstDependency\");\n\nconst {\n  evaluateToString\n} = require(\"./javascript/JavascriptParserHelpers\");\n\nconst {\n  parseResource\n} = require(\"./util/identifier\");\n/** @typedef {import(\"estree\").Expression} ExpressionNode */\n\n/** @typedef {import(\"estree\").Super} SuperNode */\n\n/** @typedef {import(\"./Compiler\")} Compiler */\n\n\nconst collectDeclaration = (declarations, pattern) => {\n  const stack = [pattern];\n\n  while (stack.length > 0) {\n    const node = stack.pop();\n\n    switch (node.type) {\n      case \"Identifier\":\n        declarations.add(node.name);\n        break;\n\n      case \"ArrayPattern\":\n        for (const element of node.elements) {\n          if (element) {\n            stack.push(element);\n          }\n        }\n\n        break;\n\n      case \"AssignmentPattern\":\n        stack.push(node.left);\n        break;\n\n      case \"ObjectPattern\":\n        for (const property of node.properties) {\n          stack.push(property.value);\n        }\n\n        break;\n\n      case \"RestElement\":\n        stack.push(node.argument);\n        break;\n    }\n  }\n};\n\nconst getHoistedDeclarations = (branch, includeFunctionDeclarations) => {\n  const declarations = new Set();\n  const stack = [branch];\n\n  while (stack.length > 0) {\n    const node = stack.pop(); // Some node could be `null` or `undefined`.\n\n    if (!node) continue;\n\n    switch (node.type) {\n      // Walk through control statements to look for hoisted declarations.\n      // Some branches are skipped since they do not allow declarations.\n      case \"BlockStatement\":\n        for (const stmt of node.body) {\n          stack.push(stmt);\n        }\n\n        break;\n\n      case \"IfStatement\":\n        stack.push(node.consequent);\n        stack.push(node.alternate);\n        break;\n\n      case \"ForStatement\":\n        stack.push(node.init);\n        stack.push(node.body);\n        break;\n\n      case \"ForInStatement\":\n      case \"ForOfStatement\":\n        stack.push(node.left);\n        stack.push(node.body);\n        break;\n\n      case \"DoWhileStatement\":\n      case \"WhileStatement\":\n      case \"LabeledStatement\":\n        stack.push(node.body);\n        break;\n\n      case \"SwitchStatement\":\n        for (const cs of node.cases) {\n          for (const consequent of cs.consequent) {\n            stack.push(consequent);\n          }\n        }\n\n        break;\n\n      case \"TryStatement\":\n        stack.push(node.block);\n\n        if (node.handler) {\n          stack.push(node.handler.body);\n        }\n\n        stack.push(node.finalizer);\n        break;\n\n      case \"FunctionDeclaration\":\n        if (includeFunctionDeclarations) {\n          collectDeclaration(declarations, node.id);\n        }\n\n        break;\n\n      case \"VariableDeclaration\":\n        if (node.kind === \"var\") {\n          for (const decl of node.declarations) {\n            collectDeclaration(declarations, decl.id);\n          }\n        }\n\n        break;\n    }\n  }\n\n  return Array.from(declarations);\n};\n\nclass ConstPlugin {\n  /**\n   * Apply the plugin\n   * @param {Compiler} compiler the compiler instance\n   * @returns {void}\n   */\n  apply(compiler) {\n    const cachedParseResource = parseResource.bindCache(compiler.root);\n    compiler.hooks.compilation.tap(\"ConstPlugin\", (compilation, _ref) => {\n      let {\n        normalModuleFactory\n      } = _ref;\n      compilation.dependencyTemplates.set(ConstDependency, new ConstDependency.Template());\n      compilation.dependencyTemplates.set(CachedConstDependency, new CachedConstDependency.Template());\n\n      const handler = parser => {\n        parser.hooks.statementIf.tap(\"ConstPlugin\", statement => {\n          if (parser.scope.isAsmJs) return;\n          const param = parser.evaluateExpression(statement.test);\n          const bool = param.asBool();\n\n          if (typeof bool === \"boolean\") {\n            if (!param.couldHaveSideEffects()) {\n              const dep = new ConstDependency(`${bool}`, param.range);\n              dep.loc = statement.loc;\n              parser.state.module.addPresentationalDependency(dep);\n            } else {\n              parser.walkExpression(statement.test);\n            }\n\n            const branchToRemove = bool ? statement.alternate : statement.consequent;\n\n            if (branchToRemove) {\n              // Before removing the dead branch, the hoisted declarations\n              // must be collected.\n              //\n              // Given the following code:\n              //\n              //     if (true) f() else g()\n              //     if (false) {\n              //       function f() {}\n              //       const g = function g() {}\n              //       if (someTest) {\n              //         let a = 1\n              //         var x, {y, z} = obj\n              //       }\n              //     } else {\n              //       …\n              //     }\n              //\n              // the generated code is:\n              //\n              //     if (true) f() else {}\n              //     if (false) {\n              //       var f, x, y, z;   (in loose mode)\n              //       var x, y, z;      (in strict mode)\n              //     } else {\n              //       …\n              //     }\n              //\n              // NOTE: When code runs in strict mode, `var` declarations\n              // are hoisted but `function` declarations don't.\n              //\n              let declarations;\n\n              if (parser.scope.isStrict) {\n                // If the code runs in strict mode, variable declarations\n                // using `var` must be hoisted.\n                declarations = getHoistedDeclarations(branchToRemove, false);\n              } else {\n                // Otherwise, collect all hoisted declaration.\n                declarations = getHoistedDeclarations(branchToRemove, true);\n              }\n\n              let replacement;\n\n              if (declarations.length > 0) {\n                replacement = `{ var ${declarations.join(\", \")}; }`;\n              } else {\n                replacement = \"{}\";\n              }\n\n              const dep = new ConstDependency(replacement, branchToRemove.range);\n              dep.loc = branchToRemove.loc;\n              parser.state.module.addPresentationalDependency(dep);\n            }\n\n            return bool;\n          }\n        });\n        parser.hooks.expressionConditionalOperator.tap(\"ConstPlugin\", expression => {\n          if (parser.scope.isAsmJs) return;\n          const param = parser.evaluateExpression(expression.test);\n          const bool = param.asBool();\n\n          if (typeof bool === \"boolean\") {\n            if (!param.couldHaveSideEffects()) {\n              const dep = new ConstDependency(` ${bool}`, param.range);\n              dep.loc = expression.loc;\n              parser.state.module.addPresentationalDependency(dep);\n            } else {\n              parser.walkExpression(expression.test);\n            } // Expressions do not hoist.\n            // It is safe to remove the dead branch.\n            //\n            // Given the following code:\n            //\n            //   false ? someExpression() : otherExpression();\n            //\n            // the generated code is:\n            //\n            //   false ? 0 : otherExpression();\n            //\n\n\n            const branchToRemove = bool ? expression.alternate : expression.consequent;\n            const dep = new ConstDependency(\"0\", branchToRemove.range);\n            dep.loc = branchToRemove.loc;\n            parser.state.module.addPresentationalDependency(dep);\n            return bool;\n          }\n        });\n        parser.hooks.expressionLogicalOperator.tap(\"ConstPlugin\", expression => {\n          if (parser.scope.isAsmJs) return;\n\n          if (expression.operator === \"&&\" || expression.operator === \"||\") {\n            const param = parser.evaluateExpression(expression.left);\n            const bool = param.asBool();\n\n            if (typeof bool === \"boolean\") {\n              // Expressions do not hoist.\n              // It is safe to remove the dead branch.\n              //\n              // ------------------------------------------\n              //\n              // Given the following code:\n              //\n              //   falsyExpression() && someExpression();\n              //\n              // the generated code is:\n              //\n              //   falsyExpression() && false;\n              //\n              // ------------------------------------------\n              //\n              // Given the following code:\n              //\n              //   truthyExpression() && someExpression();\n              //\n              // the generated code is:\n              //\n              //   true && someExpression();\n              //\n              // ------------------------------------------\n              //\n              // Given the following code:\n              //\n              //   truthyExpression() || someExpression();\n              //\n              // the generated code is:\n              //\n              //   truthyExpression() || false;\n              //\n              // ------------------------------------------\n              //\n              // Given the following code:\n              //\n              //   falsyExpression() || someExpression();\n              //\n              // the generated code is:\n              //\n              //   false && someExpression();\n              //\n              const keepRight = expression.operator === \"&&\" && bool || expression.operator === \"||\" && !bool;\n\n              if (!param.couldHaveSideEffects() && (param.isBoolean() || keepRight)) {\n                // for case like\n                //\n                //   return'development'===process.env.NODE_ENV&&'foo'\n                //\n                // we need a space before the bool to prevent result like\n                //\n                //   returnfalse&&'foo'\n                //\n                const dep = new ConstDependency(` ${bool}`, param.range);\n                dep.loc = expression.loc;\n                parser.state.module.addPresentationalDependency(dep);\n              } else {\n                parser.walkExpression(expression.left);\n              }\n\n              if (!keepRight) {\n                const dep = new ConstDependency(\"0\", expression.right.range);\n                dep.loc = expression.loc;\n                parser.state.module.addPresentationalDependency(dep);\n              }\n\n              return keepRight;\n            }\n          } else if (expression.operator === \"??\") {\n            const param = parser.evaluateExpression(expression.left);\n            const keepRight = param.asNullish();\n\n            if (typeof keepRight === \"boolean\") {\n              // ------------------------------------------\n              //\n              // Given the following code:\n              //\n              //   nonNullish ?? someExpression();\n              //\n              // the generated code is:\n              //\n              //   nonNullish ?? 0;\n              //\n              // ------------------------------------------\n              //\n              // Given the following code:\n              //\n              //   nullish ?? someExpression();\n              //\n              // the generated code is:\n              //\n              //   null ?? someExpression();\n              //\n              if (!param.couldHaveSideEffects() && keepRight) {\n                // cspell:word returnnull\n                // for case like\n                //\n                //   return('development'===process.env.NODE_ENV&&null)??'foo'\n                //\n                // we need a space before the bool to prevent result like\n                //\n                //   returnnull??'foo'\n                //\n                const dep = new ConstDependency(\" null\", param.range);\n                dep.loc = expression.loc;\n                parser.state.module.addPresentationalDependency(dep);\n              } else {\n                const dep = new ConstDependency(\"0\", expression.right.range);\n                dep.loc = expression.loc;\n                parser.state.module.addPresentationalDependency(dep);\n                parser.walkExpression(expression.left);\n              }\n\n              return keepRight;\n            }\n          }\n        });\n        parser.hooks.optionalChaining.tap(\"ConstPlugin\", expr => {\n          /** @type {ExpressionNode[]} */\n          const optionalExpressionsStack = [];\n          /** @type {ExpressionNode|SuperNode} */\n\n          let next = expr.expression;\n\n          while (next.type === \"MemberExpression\" || next.type === \"CallExpression\") {\n            if (next.type === \"MemberExpression\") {\n              if (next.optional) {\n                // SuperNode can not be optional\n                optionalExpressionsStack.push(\n                /** @type {ExpressionNode} */\n                next.object);\n              }\n\n              next = next.object;\n            } else {\n              if (next.optional) {\n                // SuperNode can not be optional\n                optionalExpressionsStack.push(\n                /** @type {ExpressionNode} */\n                next.callee);\n              }\n\n              next = next.callee;\n            }\n          }\n\n          while (optionalExpressionsStack.length) {\n            const expression = optionalExpressionsStack.pop();\n            const evaluated = parser.evaluateExpression(expression);\n\n            if (evaluated.asNullish()) {\n              // ------------------------------------------\n              //\n              // Given the following code:\n              //\n              //   nullishMemberChain?.a.b();\n              //\n              // the generated code is:\n              //\n              //   undefined;\n              //\n              // ------------------------------------------\n              //\n              const dep = new ConstDependency(\" undefined\", expr.range);\n              dep.loc = expr.loc;\n              parser.state.module.addPresentationalDependency(dep);\n              return true;\n            }\n          }\n        });\n        parser.hooks.evaluateIdentifier.for(\"__resourceQuery\").tap(\"ConstPlugin\", expr => {\n          if (parser.scope.isAsmJs) return;\n          if (!parser.state.module) return;\n          return evaluateToString(cachedParseResource(parser.state.module.resource).query)(expr);\n        });\n        parser.hooks.expression.for(\"__resourceQuery\").tap(\"ConstPlugin\", expr => {\n          if (parser.scope.isAsmJs) return;\n          if (!parser.state.module) return;\n          const dep = new CachedConstDependency(JSON.stringify(cachedParseResource(parser.state.module.resource).query), expr.range, \"__resourceQuery\");\n          dep.loc = expr.loc;\n          parser.state.module.addPresentationalDependency(dep);\n          return true;\n        });\n        parser.hooks.evaluateIdentifier.for(\"__resourceFragment\").tap(\"ConstPlugin\", expr => {\n          if (parser.scope.isAsmJs) return;\n          if (!parser.state.module) return;\n          return evaluateToString(cachedParseResource(parser.state.module.resource).fragment)(expr);\n        });\n        parser.hooks.expression.for(\"__resourceFragment\").tap(\"ConstPlugin\", expr => {\n          if (parser.scope.isAsmJs) return;\n          if (!parser.state.module) return;\n          const dep = new CachedConstDependency(JSON.stringify(cachedParseResource(parser.state.module.resource).fragment), expr.range, \"__resourceFragment\");\n          dep.loc = expr.loc;\n          parser.state.module.addPresentationalDependency(dep);\n          return true;\n        });\n      };\n\n      normalModuleFactory.hooks.parser.for(\"javascript/auto\").tap(\"ConstPlugin\", handler);\n      normalModuleFactory.hooks.parser.for(\"javascript/dynamic\").tap(\"ConstPlugin\", handler);\n      normalModuleFactory.hooks.parser.for(\"javascript/esm\").tap(\"ConstPlugin\", handler);\n    });\n  }\n\n}\n\nmodule.exports = ConstPlugin;","map":{"version":3,"names":["CachedConstDependency","require","ConstDependency","evaluateToString","parseResource","collectDeclaration","declarations","pattern","stack","length","node","pop","type","add","name","element","elements","push","left","property","properties","value","argument","getHoistedDeclarations","branch","includeFunctionDeclarations","Set","stmt","body","consequent","alternate","init","cs","cases","block","handler","finalizer","id","kind","decl","Array","from","ConstPlugin","apply","compiler","cachedParseResource","bindCache","root","hooks","compilation","tap","normalModuleFactory","dependencyTemplates","set","Template","parser","statementIf","statement","scope","isAsmJs","param","evaluateExpression","test","bool","asBool","couldHaveSideEffects","dep","range","loc","state","module","addPresentationalDependency","walkExpression","branchToRemove","isStrict","replacement","join","expressionConditionalOperator","expression","expressionLogicalOperator","operator","keepRight","isBoolean","right","asNullish","optionalChaining","expr","optionalExpressionsStack","next","optional","object","callee","evaluated","evaluateIdentifier","for","resource","query","JSON","stringify","fragment","exports"],"sources":["/Users/arpanbhandari/Documents/cod-ing/React/newsapp/node_modules/webpack/lib/ConstPlugin.js"],"sourcesContent":["/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\n\"use strict\";\n\nconst CachedConstDependency = require(\"./dependencies/CachedConstDependency\");\nconst ConstDependency = require(\"./dependencies/ConstDependency\");\nconst { evaluateToString } = require(\"./javascript/JavascriptParserHelpers\");\nconst { parseResource } = require(\"./util/identifier\");\n\n/** @typedef {import(\"estree\").Expression} ExpressionNode */\n/** @typedef {import(\"estree\").Super} SuperNode */\n/** @typedef {import(\"./Compiler\")} Compiler */\n\nconst collectDeclaration = (declarations, pattern) => {\n\tconst stack = [pattern];\n\twhile (stack.length > 0) {\n\t\tconst node = stack.pop();\n\t\tswitch (node.type) {\n\t\t\tcase \"Identifier\":\n\t\t\t\tdeclarations.add(node.name);\n\t\t\t\tbreak;\n\t\t\tcase \"ArrayPattern\":\n\t\t\t\tfor (const element of node.elements) {\n\t\t\t\t\tif (element) {\n\t\t\t\t\t\tstack.push(element);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase \"AssignmentPattern\":\n\t\t\t\tstack.push(node.left);\n\t\t\t\tbreak;\n\t\t\tcase \"ObjectPattern\":\n\t\t\t\tfor (const property of node.properties) {\n\t\t\t\t\tstack.push(property.value);\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase \"RestElement\":\n\t\t\t\tstack.push(node.argument);\n\t\t\t\tbreak;\n\t\t}\n\t}\n};\n\nconst getHoistedDeclarations = (branch, includeFunctionDeclarations) => {\n\tconst declarations = new Set();\n\tconst stack = [branch];\n\twhile (stack.length > 0) {\n\t\tconst node = stack.pop();\n\t\t// Some node could be `null` or `undefined`.\n\t\tif (!node) continue;\n\t\tswitch (node.type) {\n\t\t\t// Walk through control statements to look for hoisted declarations.\n\t\t\t// Some branches are skipped since they do not allow declarations.\n\t\t\tcase \"BlockStatement\":\n\t\t\t\tfor (const stmt of node.body) {\n\t\t\t\t\tstack.push(stmt);\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase \"IfStatement\":\n\t\t\t\tstack.push(node.consequent);\n\t\t\t\tstack.push(node.alternate);\n\t\t\t\tbreak;\n\t\t\tcase \"ForStatement\":\n\t\t\t\tstack.push(node.init);\n\t\t\t\tstack.push(node.body);\n\t\t\t\tbreak;\n\t\t\tcase \"ForInStatement\":\n\t\t\tcase \"ForOfStatement\":\n\t\t\t\tstack.push(node.left);\n\t\t\t\tstack.push(node.body);\n\t\t\t\tbreak;\n\t\t\tcase \"DoWhileStatement\":\n\t\t\tcase \"WhileStatement\":\n\t\t\tcase \"LabeledStatement\":\n\t\t\t\tstack.push(node.body);\n\t\t\t\tbreak;\n\t\t\tcase \"SwitchStatement\":\n\t\t\t\tfor (const cs of node.cases) {\n\t\t\t\t\tfor (const consequent of cs.consequent) {\n\t\t\t\t\t\tstack.push(consequent);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase \"TryStatement\":\n\t\t\t\tstack.push(node.block);\n\t\t\t\tif (node.handler) {\n\t\t\t\t\tstack.push(node.handler.body);\n\t\t\t\t}\n\t\t\t\tstack.push(node.finalizer);\n\t\t\t\tbreak;\n\t\t\tcase \"FunctionDeclaration\":\n\t\t\t\tif (includeFunctionDeclarations) {\n\t\t\t\t\tcollectDeclaration(declarations, node.id);\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase \"VariableDeclaration\":\n\t\t\t\tif (node.kind === \"var\") {\n\t\t\t\t\tfor (const decl of node.declarations) {\n\t\t\t\t\t\tcollectDeclaration(declarations, decl.id);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t}\n\t}\n\treturn Array.from(declarations);\n};\n\nclass ConstPlugin {\n\t/**\n\t * Apply the plugin\n\t * @param {Compiler} compiler the compiler instance\n\t * @returns {void}\n\t */\n\tapply(compiler) {\n\t\tconst cachedParseResource = parseResource.bindCache(compiler.root);\n\t\tcompiler.hooks.compilation.tap(\n\t\t\t\"ConstPlugin\",\n\t\t\t(compilation, { normalModuleFactory }) => {\n\t\t\t\tcompilation.dependencyTemplates.set(\n\t\t\t\t\tConstDependency,\n\t\t\t\t\tnew ConstDependency.Template()\n\t\t\t\t);\n\n\t\t\t\tcompilation.dependencyTemplates.set(\n\t\t\t\t\tCachedConstDependency,\n\t\t\t\t\tnew CachedConstDependency.Template()\n\t\t\t\t);\n\n\t\t\t\tconst handler = parser => {\n\t\t\t\t\tparser.hooks.statementIf.tap(\"ConstPlugin\", statement => {\n\t\t\t\t\t\tif (parser.scope.isAsmJs) return;\n\t\t\t\t\t\tconst param = parser.evaluateExpression(statement.test);\n\t\t\t\t\t\tconst bool = param.asBool();\n\t\t\t\t\t\tif (typeof bool === \"boolean\") {\n\t\t\t\t\t\t\tif (!param.couldHaveSideEffects()) {\n\t\t\t\t\t\t\t\tconst dep = new ConstDependency(`${bool}`, param.range);\n\t\t\t\t\t\t\t\tdep.loc = statement.loc;\n\t\t\t\t\t\t\t\tparser.state.module.addPresentationalDependency(dep);\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tparser.walkExpression(statement.test);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tconst branchToRemove = bool\n\t\t\t\t\t\t\t\t? statement.alternate\n\t\t\t\t\t\t\t\t: statement.consequent;\n\t\t\t\t\t\t\tif (branchToRemove) {\n\t\t\t\t\t\t\t\t// Before removing the dead branch, the hoisted declarations\n\t\t\t\t\t\t\t\t// must be collected.\n\t\t\t\t\t\t\t\t//\n\t\t\t\t\t\t\t\t// Given the following code:\n\t\t\t\t\t\t\t\t//\n\t\t\t\t\t\t\t\t//     if (true) f() else g()\n\t\t\t\t\t\t\t\t//     if (false) {\n\t\t\t\t\t\t\t\t//       function f() {}\n\t\t\t\t\t\t\t\t//       const g = function g() {}\n\t\t\t\t\t\t\t\t//       if (someTest) {\n\t\t\t\t\t\t\t\t//         let a = 1\n\t\t\t\t\t\t\t\t//         var x, {y, z} = obj\n\t\t\t\t\t\t\t\t//       }\n\t\t\t\t\t\t\t\t//     } else {\n\t\t\t\t\t\t\t\t//       …\n\t\t\t\t\t\t\t\t//     }\n\t\t\t\t\t\t\t\t//\n\t\t\t\t\t\t\t\t// the generated code is:\n\t\t\t\t\t\t\t\t//\n\t\t\t\t\t\t\t\t//     if (true) f() else {}\n\t\t\t\t\t\t\t\t//     if (false) {\n\t\t\t\t\t\t\t\t//       var f, x, y, z;   (in loose mode)\n\t\t\t\t\t\t\t\t//       var x, y, z;      (in strict mode)\n\t\t\t\t\t\t\t\t//     } else {\n\t\t\t\t\t\t\t\t//       …\n\t\t\t\t\t\t\t\t//     }\n\t\t\t\t\t\t\t\t//\n\t\t\t\t\t\t\t\t// NOTE: When code runs in strict mode, `var` declarations\n\t\t\t\t\t\t\t\t// are hoisted but `function` declarations don't.\n\t\t\t\t\t\t\t\t//\n\t\t\t\t\t\t\t\tlet declarations;\n\t\t\t\t\t\t\t\tif (parser.scope.isStrict) {\n\t\t\t\t\t\t\t\t\t// If the code runs in strict mode, variable declarations\n\t\t\t\t\t\t\t\t\t// using `var` must be hoisted.\n\t\t\t\t\t\t\t\t\tdeclarations = getHoistedDeclarations(branchToRemove, false);\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t// Otherwise, collect all hoisted declaration.\n\t\t\t\t\t\t\t\t\tdeclarations = getHoistedDeclarations(branchToRemove, true);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tlet replacement;\n\t\t\t\t\t\t\t\tif (declarations.length > 0) {\n\t\t\t\t\t\t\t\t\treplacement = `{ var ${declarations.join(\", \")}; }`;\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\treplacement = \"{}\";\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tconst dep = new ConstDependency(\n\t\t\t\t\t\t\t\t\treplacement,\n\t\t\t\t\t\t\t\t\tbranchToRemove.range\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\tdep.loc = branchToRemove.loc;\n\t\t\t\t\t\t\t\tparser.state.module.addPresentationalDependency(dep);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\treturn bool;\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t\tparser.hooks.expressionConditionalOperator.tap(\n\t\t\t\t\t\t\"ConstPlugin\",\n\t\t\t\t\t\texpression => {\n\t\t\t\t\t\t\tif (parser.scope.isAsmJs) return;\n\t\t\t\t\t\t\tconst param = parser.evaluateExpression(expression.test);\n\t\t\t\t\t\t\tconst bool = param.asBool();\n\t\t\t\t\t\t\tif (typeof bool === \"boolean\") {\n\t\t\t\t\t\t\t\tif (!param.couldHaveSideEffects()) {\n\t\t\t\t\t\t\t\t\tconst dep = new ConstDependency(` ${bool}`, param.range);\n\t\t\t\t\t\t\t\t\tdep.loc = expression.loc;\n\t\t\t\t\t\t\t\t\tparser.state.module.addPresentationalDependency(dep);\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\tparser.walkExpression(expression.test);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t// Expressions do not hoist.\n\t\t\t\t\t\t\t\t// It is safe to remove the dead branch.\n\t\t\t\t\t\t\t\t//\n\t\t\t\t\t\t\t\t// Given the following code:\n\t\t\t\t\t\t\t\t//\n\t\t\t\t\t\t\t\t//   false ? someExpression() : otherExpression();\n\t\t\t\t\t\t\t\t//\n\t\t\t\t\t\t\t\t// the generated code is:\n\t\t\t\t\t\t\t\t//\n\t\t\t\t\t\t\t\t//   false ? 0 : otherExpression();\n\t\t\t\t\t\t\t\t//\n\t\t\t\t\t\t\t\tconst branchToRemove = bool\n\t\t\t\t\t\t\t\t\t? expression.alternate\n\t\t\t\t\t\t\t\t\t: expression.consequent;\n\t\t\t\t\t\t\t\tconst dep = new ConstDependency(\"0\", branchToRemove.range);\n\t\t\t\t\t\t\t\tdep.loc = branchToRemove.loc;\n\t\t\t\t\t\t\t\tparser.state.module.addPresentationalDependency(dep);\n\t\t\t\t\t\t\t\treturn bool;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t);\n\t\t\t\t\tparser.hooks.expressionLogicalOperator.tap(\n\t\t\t\t\t\t\"ConstPlugin\",\n\t\t\t\t\t\texpression => {\n\t\t\t\t\t\t\tif (parser.scope.isAsmJs) return;\n\t\t\t\t\t\t\tif (\n\t\t\t\t\t\t\t\texpression.operator === \"&&\" ||\n\t\t\t\t\t\t\t\texpression.operator === \"||\"\n\t\t\t\t\t\t\t) {\n\t\t\t\t\t\t\t\tconst param = parser.evaluateExpression(expression.left);\n\t\t\t\t\t\t\t\tconst bool = param.asBool();\n\t\t\t\t\t\t\t\tif (typeof bool === \"boolean\") {\n\t\t\t\t\t\t\t\t\t// Expressions do not hoist.\n\t\t\t\t\t\t\t\t\t// It is safe to remove the dead branch.\n\t\t\t\t\t\t\t\t\t//\n\t\t\t\t\t\t\t\t\t// ------------------------------------------\n\t\t\t\t\t\t\t\t\t//\n\t\t\t\t\t\t\t\t\t// Given the following code:\n\t\t\t\t\t\t\t\t\t//\n\t\t\t\t\t\t\t\t\t//   falsyExpression() && someExpression();\n\t\t\t\t\t\t\t\t\t//\n\t\t\t\t\t\t\t\t\t// the generated code is:\n\t\t\t\t\t\t\t\t\t//\n\t\t\t\t\t\t\t\t\t//   falsyExpression() && false;\n\t\t\t\t\t\t\t\t\t//\n\t\t\t\t\t\t\t\t\t// ------------------------------------------\n\t\t\t\t\t\t\t\t\t//\n\t\t\t\t\t\t\t\t\t// Given the following code:\n\t\t\t\t\t\t\t\t\t//\n\t\t\t\t\t\t\t\t\t//   truthyExpression() && someExpression();\n\t\t\t\t\t\t\t\t\t//\n\t\t\t\t\t\t\t\t\t// the generated code is:\n\t\t\t\t\t\t\t\t\t//\n\t\t\t\t\t\t\t\t\t//   true && someExpression();\n\t\t\t\t\t\t\t\t\t//\n\t\t\t\t\t\t\t\t\t// ------------------------------------------\n\t\t\t\t\t\t\t\t\t//\n\t\t\t\t\t\t\t\t\t// Given the following code:\n\t\t\t\t\t\t\t\t\t//\n\t\t\t\t\t\t\t\t\t//   truthyExpression() || someExpression();\n\t\t\t\t\t\t\t\t\t//\n\t\t\t\t\t\t\t\t\t// the generated code is:\n\t\t\t\t\t\t\t\t\t//\n\t\t\t\t\t\t\t\t\t//   truthyExpression() || false;\n\t\t\t\t\t\t\t\t\t//\n\t\t\t\t\t\t\t\t\t// ------------------------------------------\n\t\t\t\t\t\t\t\t\t//\n\t\t\t\t\t\t\t\t\t// Given the following code:\n\t\t\t\t\t\t\t\t\t//\n\t\t\t\t\t\t\t\t\t//   falsyExpression() || someExpression();\n\t\t\t\t\t\t\t\t\t//\n\t\t\t\t\t\t\t\t\t// the generated code is:\n\t\t\t\t\t\t\t\t\t//\n\t\t\t\t\t\t\t\t\t//   false && someExpression();\n\t\t\t\t\t\t\t\t\t//\n\t\t\t\t\t\t\t\t\tconst keepRight =\n\t\t\t\t\t\t\t\t\t\t(expression.operator === \"&&\" && bool) ||\n\t\t\t\t\t\t\t\t\t\t(expression.operator === \"||\" && !bool);\n\n\t\t\t\t\t\t\t\t\tif (\n\t\t\t\t\t\t\t\t\t\t!param.couldHaveSideEffects() &&\n\t\t\t\t\t\t\t\t\t\t(param.isBoolean() || keepRight)\n\t\t\t\t\t\t\t\t\t) {\n\t\t\t\t\t\t\t\t\t\t// for case like\n\t\t\t\t\t\t\t\t\t\t//\n\t\t\t\t\t\t\t\t\t\t//   return'development'===process.env.NODE_ENV&&'foo'\n\t\t\t\t\t\t\t\t\t\t//\n\t\t\t\t\t\t\t\t\t\t// we need a space before the bool to prevent result like\n\t\t\t\t\t\t\t\t\t\t//\n\t\t\t\t\t\t\t\t\t\t//   returnfalse&&'foo'\n\t\t\t\t\t\t\t\t\t\t//\n\t\t\t\t\t\t\t\t\t\tconst dep = new ConstDependency(` ${bool}`, param.range);\n\t\t\t\t\t\t\t\t\t\tdep.loc = expression.loc;\n\t\t\t\t\t\t\t\t\t\tparser.state.module.addPresentationalDependency(dep);\n\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\tparser.walkExpression(expression.left);\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tif (!keepRight) {\n\t\t\t\t\t\t\t\t\t\tconst dep = new ConstDependency(\n\t\t\t\t\t\t\t\t\t\t\t\"0\",\n\t\t\t\t\t\t\t\t\t\t\texpression.right.range\n\t\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t\t\tdep.loc = expression.loc;\n\t\t\t\t\t\t\t\t\t\tparser.state.module.addPresentationalDependency(dep);\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\treturn keepRight;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t} else if (expression.operator === \"??\") {\n\t\t\t\t\t\t\t\tconst param = parser.evaluateExpression(expression.left);\n\t\t\t\t\t\t\t\tconst keepRight = param.asNullish();\n\t\t\t\t\t\t\t\tif (typeof keepRight === \"boolean\") {\n\t\t\t\t\t\t\t\t\t// ------------------------------------------\n\t\t\t\t\t\t\t\t\t//\n\t\t\t\t\t\t\t\t\t// Given the following code:\n\t\t\t\t\t\t\t\t\t//\n\t\t\t\t\t\t\t\t\t//   nonNullish ?? someExpression();\n\t\t\t\t\t\t\t\t\t//\n\t\t\t\t\t\t\t\t\t// the generated code is:\n\t\t\t\t\t\t\t\t\t//\n\t\t\t\t\t\t\t\t\t//   nonNullish ?? 0;\n\t\t\t\t\t\t\t\t\t//\n\t\t\t\t\t\t\t\t\t// ------------------------------------------\n\t\t\t\t\t\t\t\t\t//\n\t\t\t\t\t\t\t\t\t// Given the following code:\n\t\t\t\t\t\t\t\t\t//\n\t\t\t\t\t\t\t\t\t//   nullish ?? someExpression();\n\t\t\t\t\t\t\t\t\t//\n\t\t\t\t\t\t\t\t\t// the generated code is:\n\t\t\t\t\t\t\t\t\t//\n\t\t\t\t\t\t\t\t\t//   null ?? someExpression();\n\t\t\t\t\t\t\t\t\t//\n\t\t\t\t\t\t\t\t\tif (!param.couldHaveSideEffects() && keepRight) {\n\t\t\t\t\t\t\t\t\t\t// cspell:word returnnull\n\t\t\t\t\t\t\t\t\t\t// for case like\n\t\t\t\t\t\t\t\t\t\t//\n\t\t\t\t\t\t\t\t\t\t//   return('development'===process.env.NODE_ENV&&null)??'foo'\n\t\t\t\t\t\t\t\t\t\t//\n\t\t\t\t\t\t\t\t\t\t// we need a space before the bool to prevent result like\n\t\t\t\t\t\t\t\t\t\t//\n\t\t\t\t\t\t\t\t\t\t//   returnnull??'foo'\n\t\t\t\t\t\t\t\t\t\t//\n\t\t\t\t\t\t\t\t\t\tconst dep = new ConstDependency(\" null\", param.range);\n\t\t\t\t\t\t\t\t\t\tdep.loc = expression.loc;\n\t\t\t\t\t\t\t\t\t\tparser.state.module.addPresentationalDependency(dep);\n\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\tconst dep = new ConstDependency(\n\t\t\t\t\t\t\t\t\t\t\t\"0\",\n\t\t\t\t\t\t\t\t\t\t\texpression.right.range\n\t\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t\t\tdep.loc = expression.loc;\n\t\t\t\t\t\t\t\t\t\tparser.state.module.addPresentationalDependency(dep);\n\t\t\t\t\t\t\t\t\t\tparser.walkExpression(expression.left);\n\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\treturn keepRight;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t);\n\t\t\t\t\tparser.hooks.optionalChaining.tap(\"ConstPlugin\", expr => {\n\t\t\t\t\t\t/** @type {ExpressionNode[]} */\n\t\t\t\t\t\tconst optionalExpressionsStack = [];\n\t\t\t\t\t\t/** @type {ExpressionNode|SuperNode} */\n\t\t\t\t\t\tlet next = expr.expression;\n\n\t\t\t\t\t\twhile (\n\t\t\t\t\t\t\tnext.type === \"MemberExpression\" ||\n\t\t\t\t\t\t\tnext.type === \"CallExpression\"\n\t\t\t\t\t\t) {\n\t\t\t\t\t\t\tif (next.type === \"MemberExpression\") {\n\t\t\t\t\t\t\t\tif (next.optional) {\n\t\t\t\t\t\t\t\t\t// SuperNode can not be optional\n\t\t\t\t\t\t\t\t\toptionalExpressionsStack.push(\n\t\t\t\t\t\t\t\t\t\t/** @type {ExpressionNode} */ (next.object)\n\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tnext = next.object;\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tif (next.optional) {\n\t\t\t\t\t\t\t\t\t// SuperNode can not be optional\n\t\t\t\t\t\t\t\t\toptionalExpressionsStack.push(\n\t\t\t\t\t\t\t\t\t\t/** @type {ExpressionNode} */ (next.callee)\n\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tnext = next.callee;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\twhile (optionalExpressionsStack.length) {\n\t\t\t\t\t\t\tconst expression = optionalExpressionsStack.pop();\n\t\t\t\t\t\t\tconst evaluated = parser.evaluateExpression(expression);\n\n\t\t\t\t\t\t\tif (evaluated.asNullish()) {\n\t\t\t\t\t\t\t\t// ------------------------------------------\n\t\t\t\t\t\t\t\t//\n\t\t\t\t\t\t\t\t// Given the following code:\n\t\t\t\t\t\t\t\t//\n\t\t\t\t\t\t\t\t//   nullishMemberChain?.a.b();\n\t\t\t\t\t\t\t\t//\n\t\t\t\t\t\t\t\t// the generated code is:\n\t\t\t\t\t\t\t\t//\n\t\t\t\t\t\t\t\t//   undefined;\n\t\t\t\t\t\t\t\t//\n\t\t\t\t\t\t\t\t// ------------------------------------------\n\t\t\t\t\t\t\t\t//\n\t\t\t\t\t\t\t\tconst dep = new ConstDependency(\" undefined\", expr.range);\n\t\t\t\t\t\t\t\tdep.loc = expr.loc;\n\t\t\t\t\t\t\t\tparser.state.module.addPresentationalDependency(dep);\n\t\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t\tparser.hooks.evaluateIdentifier\n\t\t\t\t\t\t.for(\"__resourceQuery\")\n\t\t\t\t\t\t.tap(\"ConstPlugin\", expr => {\n\t\t\t\t\t\t\tif (parser.scope.isAsmJs) return;\n\t\t\t\t\t\t\tif (!parser.state.module) return;\n\t\t\t\t\t\t\treturn evaluateToString(\n\t\t\t\t\t\t\t\tcachedParseResource(parser.state.module.resource).query\n\t\t\t\t\t\t\t)(expr);\n\t\t\t\t\t\t});\n\t\t\t\t\tparser.hooks.expression\n\t\t\t\t\t\t.for(\"__resourceQuery\")\n\t\t\t\t\t\t.tap(\"ConstPlugin\", expr => {\n\t\t\t\t\t\t\tif (parser.scope.isAsmJs) return;\n\t\t\t\t\t\t\tif (!parser.state.module) return;\n\t\t\t\t\t\t\tconst dep = new CachedConstDependency(\n\t\t\t\t\t\t\t\tJSON.stringify(\n\t\t\t\t\t\t\t\t\tcachedParseResource(parser.state.module.resource).query\n\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t\texpr.range,\n\t\t\t\t\t\t\t\t\"__resourceQuery\"\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\tdep.loc = expr.loc;\n\t\t\t\t\t\t\tparser.state.module.addPresentationalDependency(dep);\n\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t});\n\n\t\t\t\t\tparser.hooks.evaluateIdentifier\n\t\t\t\t\t\t.for(\"__resourceFragment\")\n\t\t\t\t\t\t.tap(\"ConstPlugin\", expr => {\n\t\t\t\t\t\t\tif (parser.scope.isAsmJs) return;\n\t\t\t\t\t\t\tif (!parser.state.module) return;\n\t\t\t\t\t\t\treturn evaluateToString(\n\t\t\t\t\t\t\t\tcachedParseResource(parser.state.module.resource).fragment\n\t\t\t\t\t\t\t)(expr);\n\t\t\t\t\t\t});\n\t\t\t\t\tparser.hooks.expression\n\t\t\t\t\t\t.for(\"__resourceFragment\")\n\t\t\t\t\t\t.tap(\"ConstPlugin\", expr => {\n\t\t\t\t\t\t\tif (parser.scope.isAsmJs) return;\n\t\t\t\t\t\t\tif (!parser.state.module) return;\n\t\t\t\t\t\t\tconst dep = new CachedConstDependency(\n\t\t\t\t\t\t\t\tJSON.stringify(\n\t\t\t\t\t\t\t\t\tcachedParseResource(parser.state.module.resource).fragment\n\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t\texpr.range,\n\t\t\t\t\t\t\t\t\"__resourceFragment\"\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\tdep.loc = expr.loc;\n\t\t\t\t\t\t\tparser.state.module.addPresentationalDependency(dep);\n\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t});\n\t\t\t\t};\n\n\t\t\t\tnormalModuleFactory.hooks.parser\n\t\t\t\t\t.for(\"javascript/auto\")\n\t\t\t\t\t.tap(\"ConstPlugin\", handler);\n\t\t\t\tnormalModuleFactory.hooks.parser\n\t\t\t\t\t.for(\"javascript/dynamic\")\n\t\t\t\t\t.tap(\"ConstPlugin\", handler);\n\t\t\t\tnormalModuleFactory.hooks.parser\n\t\t\t\t\t.for(\"javascript/esm\")\n\t\t\t\t\t.tap(\"ConstPlugin\", handler);\n\t\t\t}\n\t\t);\n\t}\n}\n\nmodule.exports = ConstPlugin;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}