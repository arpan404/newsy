{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nconst createHash = require(\"../util/createHash\");\n\nconst {\n  makePathsRelative\n} = require(\"../util/identifier\");\n\nconst numberHash = require(\"../util/numberHash\");\n/** @typedef {import(\"../Chunk\")} Chunk */\n\n/** @typedef {import(\"../ChunkGraph\")} ChunkGraph */\n\n/** @typedef {import(\"../Compilation\")} Compilation */\n\n/** @typedef {import(\"../Module\")} Module */\n\n/** @typedef {typeof import(\"../util/Hash\")} Hash */\n\n/**\n * @param {string} str string to hash\n * @param {number} len max length of the hash\n * @param {string | Hash} hashFunction hash function to use\n * @returns {string} hash\n */\n\n\nconst getHash = (str, len, hashFunction) => {\n  const hash = createHash(hashFunction);\n  hash.update(str);\n  const digest =\n  /** @type {string} */\n  hash.digest(\"hex\");\n  return digest.slice(0, len);\n};\n/**\n * @param {string} str the string\n * @returns {string} string prefixed by an underscore if it is a number\n */\n\n\nconst avoidNumber = str => {\n  // max length of a number is 21 chars, bigger numbers a written as \"...e+xx\"\n  if (str.length > 21) return str;\n  const firstChar = str.charCodeAt(0); // skip everything that doesn't look like a number\n  // charCodes: \"-\": 45, \"1\": 49, \"9\": 57\n\n  if (firstChar < 49) {\n    if (firstChar !== 45) return str;\n  } else if (firstChar > 57) {\n    return str;\n  }\n\n  if (str === +str + \"\") {\n    return `_${str}`;\n  }\n\n  return str;\n};\n/**\n * @param {string} request the request\n * @returns {string} id representation\n */\n\n\nconst requestToId = request => {\n  return request.replace(/^(\\.\\.?\\/)+/, \"\").replace(/(^[.-]|[^a-zA-Z0-9_-])+/g, \"_\");\n};\n\nexports.requestToId = requestToId;\n/**\n * @param {string} string the string\n * @param {string} delimiter separator for string and hash\n * @param {string | Hash} hashFunction hash function to use\n * @returns {string} string with limited max length to 100 chars\n */\n\nconst shortenLongString = (string, delimiter, hashFunction) => {\n  if (string.length < 100) return string;\n  return string.slice(0, 100 - 6 - delimiter.length) + delimiter + getHash(string, 6, hashFunction);\n};\n/**\n * @param {Module} module the module\n * @param {string} context context directory\n * @param {Object=} associatedObjectForCache an object to which the cache will be attached\n * @returns {string} short module name\n */\n\n\nconst getShortModuleName = (module, context, associatedObjectForCache) => {\n  const libIdent = module.libIdent({\n    context,\n    associatedObjectForCache\n  });\n  if (libIdent) return avoidNumber(libIdent);\n  const nameForCondition = module.nameForCondition();\n  if (nameForCondition) return avoidNumber(makePathsRelative(context, nameForCondition, associatedObjectForCache));\n  return \"\";\n};\n\nexports.getShortModuleName = getShortModuleName;\n/**\n * @param {string} shortName the short name\n * @param {Module} module the module\n * @param {string} context context directory\n * @param {string | Hash} hashFunction hash function to use\n * @param {Object=} associatedObjectForCache an object to which the cache will be attached\n * @returns {string} long module name\n */\n\nconst getLongModuleName = (shortName, module, context, hashFunction, associatedObjectForCache) => {\n  const fullName = getFullModuleName(module, context, associatedObjectForCache);\n  return `${shortName}?${getHash(fullName, 4, hashFunction)}`;\n};\n\nexports.getLongModuleName = getLongModuleName;\n/**\n * @param {Module} module the module\n * @param {string} context context directory\n * @param {Object=} associatedObjectForCache an object to which the cache will be attached\n * @returns {string} full module name\n */\n\nconst getFullModuleName = (module, context, associatedObjectForCache) => {\n  return makePathsRelative(context, module.identifier(), associatedObjectForCache);\n};\n\nexports.getFullModuleName = getFullModuleName;\n/**\n * @param {Chunk} chunk the chunk\n * @param {ChunkGraph} chunkGraph the chunk graph\n * @param {string} context context directory\n * @param {string} delimiter delimiter for names\n * @param {string | Hash} hashFunction hash function to use\n * @param {Object=} associatedObjectForCache an object to which the cache will be attached\n * @returns {string} short chunk name\n */\n\nconst getShortChunkName = (chunk, chunkGraph, context, delimiter, hashFunction, associatedObjectForCache) => {\n  const modules = chunkGraph.getChunkRootModules(chunk);\n  const shortModuleNames = modules.map(m => requestToId(getShortModuleName(m, context, associatedObjectForCache)));\n  chunk.idNameHints.sort();\n  const chunkName = Array.from(chunk.idNameHints).concat(shortModuleNames).filter(Boolean).join(delimiter);\n  return shortenLongString(chunkName, delimiter, hashFunction);\n};\n\nexports.getShortChunkName = getShortChunkName;\n/**\n * @param {Chunk} chunk the chunk\n * @param {ChunkGraph} chunkGraph the chunk graph\n * @param {string} context context directory\n * @param {string} delimiter delimiter for names\n * @param {string | Hash} hashFunction hash function to use\n * @param {Object=} associatedObjectForCache an object to which the cache will be attached\n * @returns {string} short chunk name\n */\n\nconst getLongChunkName = (chunk, chunkGraph, context, delimiter, hashFunction, associatedObjectForCache) => {\n  const modules = chunkGraph.getChunkRootModules(chunk);\n  const shortModuleNames = modules.map(m => requestToId(getShortModuleName(m, context, associatedObjectForCache)));\n  const longModuleNames = modules.map(m => requestToId(getLongModuleName(\"\", m, context, hashFunction, associatedObjectForCache)));\n  chunk.idNameHints.sort();\n  const chunkName = Array.from(chunk.idNameHints).concat(shortModuleNames, longModuleNames).filter(Boolean).join(delimiter);\n  return shortenLongString(chunkName, delimiter, hashFunction);\n};\n\nexports.getLongChunkName = getLongChunkName;\n/**\n * @param {Chunk} chunk the chunk\n * @param {ChunkGraph} chunkGraph the chunk graph\n * @param {string} context context directory\n * @param {Object=} associatedObjectForCache an object to which the cache will be attached\n * @returns {string} full chunk name\n */\n\nconst getFullChunkName = (chunk, chunkGraph, context, associatedObjectForCache) => {\n  if (chunk.name) return chunk.name;\n  const modules = chunkGraph.getChunkRootModules(chunk);\n  const fullModuleNames = modules.map(m => makePathsRelative(context, m.identifier(), associatedObjectForCache));\n  return fullModuleNames.join();\n};\n\nexports.getFullChunkName = getFullChunkName;\n/**\n * @template K\n * @template V\n * @param {Map<K, V[]>} map a map from key to values\n * @param {K} key key\n * @param {V} value value\n * @returns {void}\n */\n\nconst addToMapOfItems = (map, key, value) => {\n  let array = map.get(key);\n\n  if (array === undefined) {\n    array = [];\n    map.set(key, array);\n  }\n\n  array.push(value);\n};\n/**\n * @param {Compilation} compilation the compilation\n * @param {function(Module): boolean=} filter filter modules\n * @returns {[Set<string>, Module[]]} used module ids as strings and modules without id matching the filter\n */\n\n\nconst getUsedModuleIdsAndModules = (compilation, filter) => {\n  const chunkGraph = compilation.chunkGraph;\n  const modules = [];\n  /** @type {Set<string>} */\n\n  const usedIds = new Set();\n\n  if (compilation.usedModuleIds) {\n    for (const id of compilation.usedModuleIds) {\n      usedIds.add(id + \"\");\n    }\n  }\n\n  for (const module of compilation.modules) {\n    if (!module.needId) continue;\n    const moduleId = chunkGraph.getModuleId(module);\n\n    if (moduleId !== null) {\n      usedIds.add(moduleId + \"\");\n    } else {\n      if ((!filter || filter(module)) && chunkGraph.getNumberOfModuleChunks(module) !== 0) {\n        modules.push(module);\n      }\n    }\n  }\n\n  return [usedIds, modules];\n};\n\nexports.getUsedModuleIdsAndModules = getUsedModuleIdsAndModules;\n/**\n * @param {Compilation} compilation the compilation\n * @returns {Set<string>} used chunk ids as strings\n */\n\nconst getUsedChunkIds = compilation => {\n  /** @type {Set<string>} */\n  const usedIds = new Set();\n\n  if (compilation.usedChunkIds) {\n    for (const id of compilation.usedChunkIds) {\n      usedIds.add(id + \"\");\n    }\n  }\n\n  for (const chunk of compilation.chunks) {\n    const chunkId = chunk.id;\n\n    if (chunkId !== null) {\n      usedIds.add(chunkId + \"\");\n    }\n  }\n\n  return usedIds;\n};\n\nexports.getUsedChunkIds = getUsedChunkIds;\n/**\n * @template T\n * @param {Iterable<T>} items list of items to be named\n * @param {function(T): string} getShortName get a short name for an item\n * @param {function(T, string): string} getLongName get a long name for an item\n * @param {function(T, T): -1|0|1} comparator order of items\n * @param {Set<string>} usedIds already used ids, will not be assigned\n * @param {function(T, string): void} assignName assign a name to an item\n * @returns {T[]} list of items without a name\n */\n\nconst assignNames = (items, getShortName, getLongName, comparator, usedIds, assignName) => {\n  /** @type {Map<string, T[]>} */\n  const nameToItems = new Map();\n\n  for (const item of items) {\n    const name = getShortName(item);\n    addToMapOfItems(nameToItems, name, item);\n  }\n  /** @type {Map<string, T[]>} */\n\n\n  const nameToItems2 = new Map();\n\n  for (const [name, items] of nameToItems) {\n    if (items.length > 1 || !name) {\n      for (const item of items) {\n        const longName = getLongName(item, name);\n        addToMapOfItems(nameToItems2, longName, item);\n      }\n    } else {\n      addToMapOfItems(nameToItems2, name, items[0]);\n    }\n  }\n  /** @type {T[]} */\n\n\n  const unnamedItems = [];\n\n  for (const [name, items] of nameToItems2) {\n    if (!name) {\n      for (const item of items) {\n        unnamedItems.push(item);\n      }\n    } else if (items.length === 1 && !usedIds.has(name)) {\n      assignName(items[0], name);\n      usedIds.add(name);\n    } else {\n      items.sort(comparator);\n      let i = 0;\n\n      for (const item of items) {\n        while (nameToItems2.has(name + i) && usedIds.has(name + i)) i++;\n\n        assignName(item, name + i);\n        usedIds.add(name + i);\n        i++;\n      }\n    }\n  }\n\n  unnamedItems.sort(comparator);\n  return unnamedItems;\n};\n\nexports.assignNames = assignNames;\n/**\n * @template T\n * @param {T[]} items list of items to be named\n * @param {function(T): string} getName get a name for an item\n * @param {function(T, T): -1|0|1} comparator order of items\n * @param {function(T, number): boolean} assignId assign an id to an item\n * @param {number[]} ranges usable ranges for ids\n * @param {number} expandFactor factor to create more ranges\n * @param {number} extraSpace extra space to allocate, i. e. when some ids are already used\n * @param {number} salt salting number to initialize hashing\n * @returns {void}\n */\n\nconst assignDeterministicIds = function (items, getName, comparator, assignId) {\n  let ranges = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : [10];\n  let expandFactor = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : 10;\n  let extraSpace = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : 0;\n  let salt = arguments.length > 7 && arguments[7] !== undefined ? arguments[7] : 0;\n  items.sort(comparator); // max 5% fill rate\n\n  const optimalRange = Math.min(Math.ceil(items.length * 20) + extraSpace, Number.MAX_SAFE_INTEGER);\n  let i = 0;\n  let range = ranges[i];\n\n  while (range < optimalRange) {\n    i++;\n\n    if (i < ranges.length) {\n      range = Math.min(ranges[i], Number.MAX_SAFE_INTEGER);\n    } else if (expandFactor) {\n      range = Math.min(range * expandFactor, Number.MAX_SAFE_INTEGER);\n    } else {\n      break;\n    }\n  }\n\n  for (const item of items) {\n    const ident = getName(item);\n    let id;\n    let i = salt;\n\n    do {\n      id = numberHash(ident + i++, range);\n    } while (!assignId(item, id));\n  }\n};\n\nexports.assignDeterministicIds = assignDeterministicIds;\n/**\n * @param {Set<string>} usedIds used ids\n * @param {Iterable<Module>} modules the modules\n * @param {Compilation} compilation the compilation\n * @returns {void}\n */\n\nconst assignAscendingModuleIds = (usedIds, modules, compilation) => {\n  const chunkGraph = compilation.chunkGraph;\n  let nextId = 0;\n  let assignId;\n\n  if (usedIds.size > 0) {\n    assignId = module => {\n      if (chunkGraph.getModuleId(module) === null) {\n        while (usedIds.has(nextId + \"\")) nextId++;\n\n        chunkGraph.setModuleId(module, nextId++);\n      }\n    };\n  } else {\n    assignId = module => {\n      if (chunkGraph.getModuleId(module) === null) {\n        chunkGraph.setModuleId(module, nextId++);\n      }\n    };\n  }\n\n  for (const module of modules) {\n    assignId(module);\n  }\n};\n\nexports.assignAscendingModuleIds = assignAscendingModuleIds;\n/**\n * @param {Iterable<Chunk>} chunks the chunks\n * @param {Compilation} compilation the compilation\n * @returns {void}\n */\n\nconst assignAscendingChunkIds = (chunks, compilation) => {\n  const usedIds = getUsedChunkIds(compilation);\n  let nextId = 0;\n\n  if (usedIds.size > 0) {\n    for (const chunk of chunks) {\n      if (chunk.id === null) {\n        while (usedIds.has(nextId + \"\")) nextId++;\n\n        chunk.id = nextId;\n        chunk.ids = [nextId];\n        nextId++;\n      }\n    }\n  } else {\n    for (const chunk of chunks) {\n      if (chunk.id === null) {\n        chunk.id = nextId;\n        chunk.ids = [nextId];\n        nextId++;\n      }\n    }\n  }\n};\n\nexports.assignAscendingChunkIds = assignAscendingChunkIds;","map":{"version":3,"names":["createHash","require","makePathsRelative","numberHash","getHash","str","len","hashFunction","hash","update","digest","slice","avoidNumber","length","firstChar","charCodeAt","requestToId","request","replace","exports","shortenLongString","string","delimiter","getShortModuleName","module","context","associatedObjectForCache","libIdent","nameForCondition","getLongModuleName","shortName","fullName","getFullModuleName","identifier","getShortChunkName","chunk","chunkGraph","modules","getChunkRootModules","shortModuleNames","map","m","idNameHints","sort","chunkName","Array","from","concat","filter","Boolean","join","getLongChunkName","longModuleNames","getFullChunkName","name","fullModuleNames","addToMapOfItems","key","value","array","get","undefined","set","push","getUsedModuleIdsAndModules","compilation","usedIds","Set","usedModuleIds","id","add","needId","moduleId","getModuleId","getNumberOfModuleChunks","getUsedChunkIds","usedChunkIds","chunks","chunkId","assignNames","items","getShortName","getLongName","comparator","assignName","nameToItems","Map","item","nameToItems2","longName","unnamedItems","has","i","assignDeterministicIds","getName","assignId","ranges","expandFactor","extraSpace","salt","optimalRange","Math","min","ceil","Number","MAX_SAFE_INTEGER","range","ident","assignAscendingModuleIds","nextId","size","setModuleId","assignAscendingChunkIds","ids"],"sources":["/Users/arpanbhandari/Documents/cod-ing/React/newsapp/node_modules/webpack/lib/ids/IdHelpers.js"],"sourcesContent":["/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\n\"use strict\";\n\nconst createHash = require(\"../util/createHash\");\nconst { makePathsRelative } = require(\"../util/identifier\");\nconst numberHash = require(\"../util/numberHash\");\n\n/** @typedef {import(\"../Chunk\")} Chunk */\n/** @typedef {import(\"../ChunkGraph\")} ChunkGraph */\n/** @typedef {import(\"../Compilation\")} Compilation */\n/** @typedef {import(\"../Module\")} Module */\n/** @typedef {typeof import(\"../util/Hash\")} Hash */\n\n/**\n * @param {string} str string to hash\n * @param {number} len max length of the hash\n * @param {string | Hash} hashFunction hash function to use\n * @returns {string} hash\n */\nconst getHash = (str, len, hashFunction) => {\n\tconst hash = createHash(hashFunction);\n\thash.update(str);\n\tconst digest = /** @type {string} */ (hash.digest(\"hex\"));\n\treturn digest.slice(0, len);\n};\n\n/**\n * @param {string} str the string\n * @returns {string} string prefixed by an underscore if it is a number\n */\nconst avoidNumber = str => {\n\t// max length of a number is 21 chars, bigger numbers a written as \"...e+xx\"\n\tif (str.length > 21) return str;\n\tconst firstChar = str.charCodeAt(0);\n\t// skip everything that doesn't look like a number\n\t// charCodes: \"-\": 45, \"1\": 49, \"9\": 57\n\tif (firstChar < 49) {\n\t\tif (firstChar !== 45) return str;\n\t} else if (firstChar > 57) {\n\t\treturn str;\n\t}\n\tif (str === +str + \"\") {\n\t\treturn `_${str}`;\n\t}\n\treturn str;\n};\n\n/**\n * @param {string} request the request\n * @returns {string} id representation\n */\nconst requestToId = request => {\n\treturn request\n\t\t.replace(/^(\\.\\.?\\/)+/, \"\")\n\t\t.replace(/(^[.-]|[^a-zA-Z0-9_-])+/g, \"_\");\n};\nexports.requestToId = requestToId;\n\n/**\n * @param {string} string the string\n * @param {string} delimiter separator for string and hash\n * @param {string | Hash} hashFunction hash function to use\n * @returns {string} string with limited max length to 100 chars\n */\nconst shortenLongString = (string, delimiter, hashFunction) => {\n\tif (string.length < 100) return string;\n\treturn (\n\t\tstring.slice(0, 100 - 6 - delimiter.length) +\n\t\tdelimiter +\n\t\tgetHash(string, 6, hashFunction)\n\t);\n};\n\n/**\n * @param {Module} module the module\n * @param {string} context context directory\n * @param {Object=} associatedObjectForCache an object to which the cache will be attached\n * @returns {string} short module name\n */\nconst getShortModuleName = (module, context, associatedObjectForCache) => {\n\tconst libIdent = module.libIdent({ context, associatedObjectForCache });\n\tif (libIdent) return avoidNumber(libIdent);\n\tconst nameForCondition = module.nameForCondition();\n\tif (nameForCondition)\n\t\treturn avoidNumber(\n\t\t\tmakePathsRelative(context, nameForCondition, associatedObjectForCache)\n\t\t);\n\treturn \"\";\n};\nexports.getShortModuleName = getShortModuleName;\n\n/**\n * @param {string} shortName the short name\n * @param {Module} module the module\n * @param {string} context context directory\n * @param {string | Hash} hashFunction hash function to use\n * @param {Object=} associatedObjectForCache an object to which the cache will be attached\n * @returns {string} long module name\n */\nconst getLongModuleName = (\n\tshortName,\n\tmodule,\n\tcontext,\n\thashFunction,\n\tassociatedObjectForCache\n) => {\n\tconst fullName = getFullModuleName(module, context, associatedObjectForCache);\n\treturn `${shortName}?${getHash(fullName, 4, hashFunction)}`;\n};\nexports.getLongModuleName = getLongModuleName;\n\n/**\n * @param {Module} module the module\n * @param {string} context context directory\n * @param {Object=} associatedObjectForCache an object to which the cache will be attached\n * @returns {string} full module name\n */\nconst getFullModuleName = (module, context, associatedObjectForCache) => {\n\treturn makePathsRelative(\n\t\tcontext,\n\t\tmodule.identifier(),\n\t\tassociatedObjectForCache\n\t);\n};\nexports.getFullModuleName = getFullModuleName;\n\n/**\n * @param {Chunk} chunk the chunk\n * @param {ChunkGraph} chunkGraph the chunk graph\n * @param {string} context context directory\n * @param {string} delimiter delimiter for names\n * @param {string | Hash} hashFunction hash function to use\n * @param {Object=} associatedObjectForCache an object to which the cache will be attached\n * @returns {string} short chunk name\n */\nconst getShortChunkName = (\n\tchunk,\n\tchunkGraph,\n\tcontext,\n\tdelimiter,\n\thashFunction,\n\tassociatedObjectForCache\n) => {\n\tconst modules = chunkGraph.getChunkRootModules(chunk);\n\tconst shortModuleNames = modules.map(m =>\n\t\trequestToId(getShortModuleName(m, context, associatedObjectForCache))\n\t);\n\tchunk.idNameHints.sort();\n\tconst chunkName = Array.from(chunk.idNameHints)\n\t\t.concat(shortModuleNames)\n\t\t.filter(Boolean)\n\t\t.join(delimiter);\n\treturn shortenLongString(chunkName, delimiter, hashFunction);\n};\nexports.getShortChunkName = getShortChunkName;\n\n/**\n * @param {Chunk} chunk the chunk\n * @param {ChunkGraph} chunkGraph the chunk graph\n * @param {string} context context directory\n * @param {string} delimiter delimiter for names\n * @param {string | Hash} hashFunction hash function to use\n * @param {Object=} associatedObjectForCache an object to which the cache will be attached\n * @returns {string} short chunk name\n */\nconst getLongChunkName = (\n\tchunk,\n\tchunkGraph,\n\tcontext,\n\tdelimiter,\n\thashFunction,\n\tassociatedObjectForCache\n) => {\n\tconst modules = chunkGraph.getChunkRootModules(chunk);\n\tconst shortModuleNames = modules.map(m =>\n\t\trequestToId(getShortModuleName(m, context, associatedObjectForCache))\n\t);\n\tconst longModuleNames = modules.map(m =>\n\t\trequestToId(\n\t\t\tgetLongModuleName(\"\", m, context, hashFunction, associatedObjectForCache)\n\t\t)\n\t);\n\tchunk.idNameHints.sort();\n\tconst chunkName = Array.from(chunk.idNameHints)\n\t\t.concat(shortModuleNames, longModuleNames)\n\t\t.filter(Boolean)\n\t\t.join(delimiter);\n\treturn shortenLongString(chunkName, delimiter, hashFunction);\n};\nexports.getLongChunkName = getLongChunkName;\n\n/**\n * @param {Chunk} chunk the chunk\n * @param {ChunkGraph} chunkGraph the chunk graph\n * @param {string} context context directory\n * @param {Object=} associatedObjectForCache an object to which the cache will be attached\n * @returns {string} full chunk name\n */\nconst getFullChunkName = (\n\tchunk,\n\tchunkGraph,\n\tcontext,\n\tassociatedObjectForCache\n) => {\n\tif (chunk.name) return chunk.name;\n\tconst modules = chunkGraph.getChunkRootModules(chunk);\n\tconst fullModuleNames = modules.map(m =>\n\t\tmakePathsRelative(context, m.identifier(), associatedObjectForCache)\n\t);\n\treturn fullModuleNames.join();\n};\nexports.getFullChunkName = getFullChunkName;\n\n/**\n * @template K\n * @template V\n * @param {Map<K, V[]>} map a map from key to values\n * @param {K} key key\n * @param {V} value value\n * @returns {void}\n */\nconst addToMapOfItems = (map, key, value) => {\n\tlet array = map.get(key);\n\tif (array === undefined) {\n\t\tarray = [];\n\t\tmap.set(key, array);\n\t}\n\tarray.push(value);\n};\n\n/**\n * @param {Compilation} compilation the compilation\n * @param {function(Module): boolean=} filter filter modules\n * @returns {[Set<string>, Module[]]} used module ids as strings and modules without id matching the filter\n */\nconst getUsedModuleIdsAndModules = (compilation, filter) => {\n\tconst chunkGraph = compilation.chunkGraph;\n\n\tconst modules = [];\n\n\t/** @type {Set<string>} */\n\tconst usedIds = new Set();\n\tif (compilation.usedModuleIds) {\n\t\tfor (const id of compilation.usedModuleIds) {\n\t\t\tusedIds.add(id + \"\");\n\t\t}\n\t}\n\n\tfor (const module of compilation.modules) {\n\t\tif (!module.needId) continue;\n\t\tconst moduleId = chunkGraph.getModuleId(module);\n\t\tif (moduleId !== null) {\n\t\t\tusedIds.add(moduleId + \"\");\n\t\t} else {\n\t\t\tif (\n\t\t\t\t(!filter || filter(module)) &&\n\t\t\t\tchunkGraph.getNumberOfModuleChunks(module) !== 0\n\t\t\t) {\n\t\t\t\tmodules.push(module);\n\t\t\t}\n\t\t}\n\t}\n\n\treturn [usedIds, modules];\n};\nexports.getUsedModuleIdsAndModules = getUsedModuleIdsAndModules;\n\n/**\n * @param {Compilation} compilation the compilation\n * @returns {Set<string>} used chunk ids as strings\n */\nconst getUsedChunkIds = compilation => {\n\t/** @type {Set<string>} */\n\tconst usedIds = new Set();\n\tif (compilation.usedChunkIds) {\n\t\tfor (const id of compilation.usedChunkIds) {\n\t\t\tusedIds.add(id + \"\");\n\t\t}\n\t}\n\n\tfor (const chunk of compilation.chunks) {\n\t\tconst chunkId = chunk.id;\n\t\tif (chunkId !== null) {\n\t\t\tusedIds.add(chunkId + \"\");\n\t\t}\n\t}\n\n\treturn usedIds;\n};\nexports.getUsedChunkIds = getUsedChunkIds;\n\n/**\n * @template T\n * @param {Iterable<T>} items list of items to be named\n * @param {function(T): string} getShortName get a short name for an item\n * @param {function(T, string): string} getLongName get a long name for an item\n * @param {function(T, T): -1|0|1} comparator order of items\n * @param {Set<string>} usedIds already used ids, will not be assigned\n * @param {function(T, string): void} assignName assign a name to an item\n * @returns {T[]} list of items without a name\n */\nconst assignNames = (\n\titems,\n\tgetShortName,\n\tgetLongName,\n\tcomparator,\n\tusedIds,\n\tassignName\n) => {\n\t/** @type {Map<string, T[]>} */\n\tconst nameToItems = new Map();\n\n\tfor (const item of items) {\n\t\tconst name = getShortName(item);\n\t\taddToMapOfItems(nameToItems, name, item);\n\t}\n\n\t/** @type {Map<string, T[]>} */\n\tconst nameToItems2 = new Map();\n\n\tfor (const [name, items] of nameToItems) {\n\t\tif (items.length > 1 || !name) {\n\t\t\tfor (const item of items) {\n\t\t\t\tconst longName = getLongName(item, name);\n\t\t\t\taddToMapOfItems(nameToItems2, longName, item);\n\t\t\t}\n\t\t} else {\n\t\t\taddToMapOfItems(nameToItems2, name, items[0]);\n\t\t}\n\t}\n\n\t/** @type {T[]} */\n\tconst unnamedItems = [];\n\n\tfor (const [name, items] of nameToItems2) {\n\t\tif (!name) {\n\t\t\tfor (const item of items) {\n\t\t\t\tunnamedItems.push(item);\n\t\t\t}\n\t\t} else if (items.length === 1 && !usedIds.has(name)) {\n\t\t\tassignName(items[0], name);\n\t\t\tusedIds.add(name);\n\t\t} else {\n\t\t\titems.sort(comparator);\n\t\t\tlet i = 0;\n\t\t\tfor (const item of items) {\n\t\t\t\twhile (nameToItems2.has(name + i) && usedIds.has(name + i)) i++;\n\t\t\t\tassignName(item, name + i);\n\t\t\t\tusedIds.add(name + i);\n\t\t\t\ti++;\n\t\t\t}\n\t\t}\n\t}\n\n\tunnamedItems.sort(comparator);\n\treturn unnamedItems;\n};\nexports.assignNames = assignNames;\n\n/**\n * @template T\n * @param {T[]} items list of items to be named\n * @param {function(T): string} getName get a name for an item\n * @param {function(T, T): -1|0|1} comparator order of items\n * @param {function(T, number): boolean} assignId assign an id to an item\n * @param {number[]} ranges usable ranges for ids\n * @param {number} expandFactor factor to create more ranges\n * @param {number} extraSpace extra space to allocate, i. e. when some ids are already used\n * @param {number} salt salting number to initialize hashing\n * @returns {void}\n */\nconst assignDeterministicIds = (\n\titems,\n\tgetName,\n\tcomparator,\n\tassignId,\n\tranges = [10],\n\texpandFactor = 10,\n\textraSpace = 0,\n\tsalt = 0\n) => {\n\titems.sort(comparator);\n\n\t// max 5% fill rate\n\tconst optimalRange = Math.min(\n\t\tMath.ceil(items.length * 20) + extraSpace,\n\t\tNumber.MAX_SAFE_INTEGER\n\t);\n\n\tlet i = 0;\n\tlet range = ranges[i];\n\twhile (range < optimalRange) {\n\t\ti++;\n\t\tif (i < ranges.length) {\n\t\t\trange = Math.min(ranges[i], Number.MAX_SAFE_INTEGER);\n\t\t} else if (expandFactor) {\n\t\t\trange = Math.min(range * expandFactor, Number.MAX_SAFE_INTEGER);\n\t\t} else {\n\t\t\tbreak;\n\t\t}\n\t}\n\n\tfor (const item of items) {\n\t\tconst ident = getName(item);\n\t\tlet id;\n\t\tlet i = salt;\n\t\tdo {\n\t\t\tid = numberHash(ident + i++, range);\n\t\t} while (!assignId(item, id));\n\t}\n};\nexports.assignDeterministicIds = assignDeterministicIds;\n\n/**\n * @param {Set<string>} usedIds used ids\n * @param {Iterable<Module>} modules the modules\n * @param {Compilation} compilation the compilation\n * @returns {void}\n */\nconst assignAscendingModuleIds = (usedIds, modules, compilation) => {\n\tconst chunkGraph = compilation.chunkGraph;\n\n\tlet nextId = 0;\n\tlet assignId;\n\tif (usedIds.size > 0) {\n\t\tassignId = module => {\n\t\t\tif (chunkGraph.getModuleId(module) === null) {\n\t\t\t\twhile (usedIds.has(nextId + \"\")) nextId++;\n\t\t\t\tchunkGraph.setModuleId(module, nextId++);\n\t\t\t}\n\t\t};\n\t} else {\n\t\tassignId = module => {\n\t\t\tif (chunkGraph.getModuleId(module) === null) {\n\t\t\t\tchunkGraph.setModuleId(module, nextId++);\n\t\t\t}\n\t\t};\n\t}\n\tfor (const module of modules) {\n\t\tassignId(module);\n\t}\n};\nexports.assignAscendingModuleIds = assignAscendingModuleIds;\n\n/**\n * @param {Iterable<Chunk>} chunks the chunks\n * @param {Compilation} compilation the compilation\n * @returns {void}\n */\nconst assignAscendingChunkIds = (chunks, compilation) => {\n\tconst usedIds = getUsedChunkIds(compilation);\n\n\tlet nextId = 0;\n\tif (usedIds.size > 0) {\n\t\tfor (const chunk of chunks) {\n\t\t\tif (chunk.id === null) {\n\t\t\t\twhile (usedIds.has(nextId + \"\")) nextId++;\n\t\t\t\tchunk.id = nextId;\n\t\t\t\tchunk.ids = [nextId];\n\t\t\t\tnextId++;\n\t\t\t}\n\t\t}\n\t} else {\n\t\tfor (const chunk of chunks) {\n\t\t\tif (chunk.id === null) {\n\t\t\t\tchunk.id = nextId;\n\t\t\t\tchunk.ids = [nextId];\n\t\t\t\tnextId++;\n\t\t\t}\n\t\t}\n\t}\n};\nexports.assignAscendingChunkIds = assignAscendingChunkIds;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}