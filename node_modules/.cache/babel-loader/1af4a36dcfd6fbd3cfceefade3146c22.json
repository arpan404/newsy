{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nconst {\n  parseResource\n} = require(\"../util/identifier\");\n/** @typedef {import(\"estree\").Node} EsTreeNode */\n\n/** @typedef {import(\"../../declarations/WebpackOptions\").JavascriptParserOptions} JavascriptParserOptions */\n\n/** @typedef {import(\"../../declarations/WebpackOptions\").ModuleOptionsNormalized} ModuleOptions */\n\n/** @typedef {import(\"../javascript/BasicEvaluatedExpression\")} BasicEvaluatedExpression */\n\n/** @typedef {import(\"../javascript/JavascriptParser\")} JavascriptParser */\n\n/** @typedef {import(\"./ContextDependency\")} ContextDependency */\n\n/** @typedef {import(\"./ContextDependency\").ContextDependencyOptions} ContextDependencyOptions */\n\n/**\n * Escapes regular expression metacharacters\n * @param {string} str String to quote\n * @returns {string} Escaped string\n */\n\n\nconst quoteMeta = str => {\n  return str.replace(/[-[\\]\\\\/{}()*+?.^$|]/g, \"\\\\$&\");\n};\n\nconst splitContextFromPrefix = prefix => {\n  const idx = prefix.lastIndexOf(\"/\");\n  let context = \".\";\n\n  if (idx >= 0) {\n    context = prefix.slice(0, idx);\n    prefix = `.${prefix.slice(idx)}`;\n  }\n\n  return {\n    context,\n    prefix\n  };\n};\n/** @typedef {Partial<Omit<ContextDependencyOptions, \"resource\">>} PartialContextDependencyOptions */\n\n/** @typedef {{ new(options: ContextDependencyOptions, range: [number, number], valueRange: [number, number], ...args: any[]): ContextDependency }} ContextDependencyConstructor */\n\n/**\n * @param {ContextDependencyConstructor} Dep the Dependency class\n * @param {[number, number]} range source range\n * @param {BasicEvaluatedExpression} param context param\n * @param {EsTreeNode} expr expr\n * @param {Pick<JavascriptParserOptions, `${\"expr\"|\"wrapped\"}Context${\"Critical\"|\"Recursive\"|\"RegExp\"}` | \"exprContextRequest\">} options options for context creation\n * @param {PartialContextDependencyOptions} contextOptions options for the ContextModule\n * @param {JavascriptParser} parser the parser\n * @param {...any} depArgs depArgs\n * @returns {ContextDependency} the created Dependency\n */\n\n\nexports.create = function (Dep, range, param, expr, options, contextOptions, parser) {\n  for (var _len = arguments.length, depArgs = new Array(_len > 7 ? _len - 7 : 0), _key = 7; _key < _len; _key++) {\n    depArgs[_key - 7] = arguments[_key];\n  }\n\n  if (param.isTemplateString()) {\n    let prefixRaw = param.quasis[0].string;\n    let postfixRaw = param.quasis.length > 1 ? param.quasis[param.quasis.length - 1].string : \"\";\n    const valueRange = param.range;\n    const {\n      context,\n      prefix\n    } = splitContextFromPrefix(prefixRaw);\n    const {\n      path: postfix,\n      query,\n      fragment\n    } = parseResource(postfixRaw, parser); // When there are more than two quasis, the generated RegExp can be more precise\n    // We join the quasis with the expression regexp\n\n    const innerQuasis = param.quasis.slice(1, param.quasis.length - 1);\n    const innerRegExp = options.wrappedContextRegExp.source + innerQuasis.map(q => quoteMeta(q.string) + options.wrappedContextRegExp.source).join(\"\"); // Example: `./context/pre${e}inner${e}inner2${e}post?query#frag`\n    // context: \"./context\"\n    // prefix: \"./pre\"\n    // innerQuasis: [BEE(\"inner\"), BEE(\"inner2\")]\n    // (BEE = BasicEvaluatedExpression)\n    // postfix: \"post\"\n    // query: \"?query\"\n    // fragment: \"#frag\"\n    // regExp: /^\\.\\/pre.*inner.*inner2.*post$/\n\n    const regExp = new RegExp(`^${quoteMeta(prefix)}${innerRegExp}${quoteMeta(postfix)}$`);\n    const dep = new Dep({\n      request: context + query + fragment,\n      recursive: options.wrappedContextRecursive,\n      regExp,\n      mode: \"sync\",\n      ...contextOptions\n    }, range, valueRange, ...depArgs);\n    dep.loc = expr.loc;\n    const replaces = [];\n    param.parts.forEach((part, i) => {\n      if (i % 2 === 0) {\n        // Quasis or merged quasi\n        let range = part.range;\n        let value = part.string;\n\n        if (param.templateStringKind === \"cooked\") {\n          value = JSON.stringify(value);\n          value = value.slice(1, value.length - 1);\n        }\n\n        if (i === 0) {\n          // prefix\n          value = prefix;\n          range = [param.range[0], part.range[1]];\n          value = (param.templateStringKind === \"cooked\" ? \"`\" : \"String.raw`\") + value;\n        } else if (i === param.parts.length - 1) {\n          // postfix\n          value = postfix;\n          range = [part.range[0], param.range[1]];\n          value = value + \"`\";\n        } else if (part.expression && part.expression.type === \"TemplateElement\" && part.expression.value.raw === value) {\n          // Shortcut when it's a single quasi and doesn't need to be replaced\n          return;\n        }\n\n        replaces.push({\n          range,\n          value\n        });\n      } else {\n        // Expression\n        parser.walkExpression(part.expression);\n      }\n    });\n    dep.replaces = replaces;\n    dep.critical = options.wrappedContextCritical && \"a part of the request of a dependency is an expression\";\n    return dep;\n  } else if (param.isWrapped() && (param.prefix && param.prefix.isString() || param.postfix && param.postfix.isString())) {\n    let prefixRaw = param.prefix && param.prefix.isString() ? param.prefix.string : \"\";\n    let postfixRaw = param.postfix && param.postfix.isString() ? param.postfix.string : \"\";\n    const prefixRange = param.prefix && param.prefix.isString() ? param.prefix.range : null;\n    const postfixRange = param.postfix && param.postfix.isString() ? param.postfix.range : null;\n    const valueRange = param.range;\n    const {\n      context,\n      prefix\n    } = splitContextFromPrefix(prefixRaw);\n    const {\n      path: postfix,\n      query,\n      fragment\n    } = parseResource(postfixRaw, parser);\n    const regExp = new RegExp(`^${quoteMeta(prefix)}${options.wrappedContextRegExp.source}${quoteMeta(postfix)}$`);\n    const dep = new Dep({\n      request: context + query + fragment,\n      recursive: options.wrappedContextRecursive,\n      regExp,\n      mode: \"sync\",\n      ...contextOptions\n    }, range, valueRange, ...depArgs);\n    dep.loc = expr.loc;\n    const replaces = [];\n\n    if (prefixRange) {\n      replaces.push({\n        range: prefixRange,\n        value: JSON.stringify(prefix)\n      });\n    }\n\n    if (postfixRange) {\n      replaces.push({\n        range: postfixRange,\n        value: JSON.stringify(postfix)\n      });\n    }\n\n    dep.replaces = replaces;\n    dep.critical = options.wrappedContextCritical && \"a part of the request of a dependency is an expression\";\n\n    if (parser && param.wrappedInnerExpressions) {\n      for (const part of param.wrappedInnerExpressions) {\n        if (part.expression) parser.walkExpression(part.expression);\n      }\n    }\n\n    return dep;\n  } else {\n    const dep = new Dep({\n      request: options.exprContextRequest,\n      recursive: options.exprContextRecursive,\n      regExp:\n      /** @type {RegExp} */\n      options.exprContextRegExp,\n      mode: \"sync\",\n      ...contextOptions\n    }, range, param.range, ...depArgs);\n    dep.loc = expr.loc;\n    dep.critical = options.exprContextCritical && \"the request of a dependency is an expression\";\n    parser.walkExpression(param.expression);\n    return dep;\n  }\n};","map":{"version":3,"names":["parseResource","require","quoteMeta","str","replace","splitContextFromPrefix","prefix","idx","lastIndexOf","context","slice","exports","create","Dep","range","param","expr","options","contextOptions","parser","depArgs","isTemplateString","prefixRaw","quasis","string","postfixRaw","length","valueRange","path","postfix","query","fragment","innerQuasis","innerRegExp","wrappedContextRegExp","source","map","q","join","regExp","RegExp","dep","request","recursive","wrappedContextRecursive","mode","loc","replaces","parts","forEach","part","i","value","templateStringKind","JSON","stringify","expression","type","raw","push","walkExpression","critical","wrappedContextCritical","isWrapped","isString","prefixRange","postfixRange","wrappedInnerExpressions","exprContextRequest","exprContextRecursive","exprContextRegExp","exprContextCritical"],"sources":["/Users/arpanbhandari/Documents/cod-ing/React/newsapp/node_modules/webpack/lib/dependencies/ContextDependencyHelpers.js"],"sourcesContent":["/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\n\"use strict\";\n\nconst { parseResource } = require(\"../util/identifier\");\n\n/** @typedef {import(\"estree\").Node} EsTreeNode */\n/** @typedef {import(\"../../declarations/WebpackOptions\").JavascriptParserOptions} JavascriptParserOptions */\n/** @typedef {import(\"../../declarations/WebpackOptions\").ModuleOptionsNormalized} ModuleOptions */\n/** @typedef {import(\"../javascript/BasicEvaluatedExpression\")} BasicEvaluatedExpression */\n/** @typedef {import(\"../javascript/JavascriptParser\")} JavascriptParser */\n/** @typedef {import(\"./ContextDependency\")} ContextDependency */\n/** @typedef {import(\"./ContextDependency\").ContextDependencyOptions} ContextDependencyOptions */\n\n/**\n * Escapes regular expression metacharacters\n * @param {string} str String to quote\n * @returns {string} Escaped string\n */\nconst quoteMeta = str => {\n\treturn str.replace(/[-[\\]\\\\/{}()*+?.^$|]/g, \"\\\\$&\");\n};\n\nconst splitContextFromPrefix = prefix => {\n\tconst idx = prefix.lastIndexOf(\"/\");\n\tlet context = \".\";\n\tif (idx >= 0) {\n\t\tcontext = prefix.slice(0, idx);\n\t\tprefix = `.${prefix.slice(idx)}`;\n\t}\n\treturn {\n\t\tcontext,\n\t\tprefix\n\t};\n};\n\n/** @typedef {Partial<Omit<ContextDependencyOptions, \"resource\">>} PartialContextDependencyOptions */\n\n/** @typedef {{ new(options: ContextDependencyOptions, range: [number, number], valueRange: [number, number], ...args: any[]): ContextDependency }} ContextDependencyConstructor */\n\n/**\n * @param {ContextDependencyConstructor} Dep the Dependency class\n * @param {[number, number]} range source range\n * @param {BasicEvaluatedExpression} param context param\n * @param {EsTreeNode} expr expr\n * @param {Pick<JavascriptParserOptions, `${\"expr\"|\"wrapped\"}Context${\"Critical\"|\"Recursive\"|\"RegExp\"}` | \"exprContextRequest\">} options options for context creation\n * @param {PartialContextDependencyOptions} contextOptions options for the ContextModule\n * @param {JavascriptParser} parser the parser\n * @param {...any} depArgs depArgs\n * @returns {ContextDependency} the created Dependency\n */\nexports.create = (\n\tDep,\n\trange,\n\tparam,\n\texpr,\n\toptions,\n\tcontextOptions,\n\tparser,\n\t...depArgs\n) => {\n\tif (param.isTemplateString()) {\n\t\tlet prefixRaw = param.quasis[0].string;\n\t\tlet postfixRaw =\n\t\t\tparam.quasis.length > 1\n\t\t\t\t? param.quasis[param.quasis.length - 1].string\n\t\t\t\t: \"\";\n\n\t\tconst valueRange = param.range;\n\t\tconst { context, prefix } = splitContextFromPrefix(prefixRaw);\n\t\tconst {\n\t\t\tpath: postfix,\n\t\t\tquery,\n\t\t\tfragment\n\t\t} = parseResource(postfixRaw, parser);\n\n\t\t// When there are more than two quasis, the generated RegExp can be more precise\n\t\t// We join the quasis with the expression regexp\n\t\tconst innerQuasis = param.quasis.slice(1, param.quasis.length - 1);\n\t\tconst innerRegExp =\n\t\t\toptions.wrappedContextRegExp.source +\n\t\t\tinnerQuasis\n\t\t\t\t.map(q => quoteMeta(q.string) + options.wrappedContextRegExp.source)\n\t\t\t\t.join(\"\");\n\n\t\t// Example: `./context/pre${e}inner${e}inner2${e}post?query#frag`\n\t\t// context: \"./context\"\n\t\t// prefix: \"./pre\"\n\t\t// innerQuasis: [BEE(\"inner\"), BEE(\"inner2\")]\n\t\t// (BEE = BasicEvaluatedExpression)\n\t\t// postfix: \"post\"\n\t\t// query: \"?query\"\n\t\t// fragment: \"#frag\"\n\t\t// regExp: /^\\.\\/pre.*inner.*inner2.*post$/\n\t\tconst regExp = new RegExp(\n\t\t\t`^${quoteMeta(prefix)}${innerRegExp}${quoteMeta(postfix)}$`\n\t\t);\n\t\tconst dep = new Dep(\n\t\t\t{\n\t\t\t\trequest: context + query + fragment,\n\t\t\t\trecursive: options.wrappedContextRecursive,\n\t\t\t\tregExp,\n\t\t\t\tmode: \"sync\",\n\t\t\t\t...contextOptions\n\t\t\t},\n\t\t\trange,\n\t\t\tvalueRange,\n\t\t\t...depArgs\n\t\t);\n\t\tdep.loc = expr.loc;\n\t\tconst replaces = [];\n\n\t\tparam.parts.forEach((part, i) => {\n\t\t\tif (i % 2 === 0) {\n\t\t\t\t// Quasis or merged quasi\n\t\t\t\tlet range = part.range;\n\t\t\t\tlet value = part.string;\n\t\t\t\tif (param.templateStringKind === \"cooked\") {\n\t\t\t\t\tvalue = JSON.stringify(value);\n\t\t\t\t\tvalue = value.slice(1, value.length - 1);\n\t\t\t\t}\n\t\t\t\tif (i === 0) {\n\t\t\t\t\t// prefix\n\t\t\t\t\tvalue = prefix;\n\t\t\t\t\trange = [param.range[0], part.range[1]];\n\t\t\t\t\tvalue =\n\t\t\t\t\t\t(param.templateStringKind === \"cooked\" ? \"`\" : \"String.raw`\") +\n\t\t\t\t\t\tvalue;\n\t\t\t\t} else if (i === param.parts.length - 1) {\n\t\t\t\t\t// postfix\n\t\t\t\t\tvalue = postfix;\n\t\t\t\t\trange = [part.range[0], param.range[1]];\n\t\t\t\t\tvalue = value + \"`\";\n\t\t\t\t} else if (\n\t\t\t\t\tpart.expression &&\n\t\t\t\t\tpart.expression.type === \"TemplateElement\" &&\n\t\t\t\t\tpart.expression.value.raw === value\n\t\t\t\t) {\n\t\t\t\t\t// Shortcut when it's a single quasi and doesn't need to be replaced\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\treplaces.push({\n\t\t\t\t\trange,\n\t\t\t\t\tvalue\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\t// Expression\n\t\t\t\tparser.walkExpression(part.expression);\n\t\t\t}\n\t\t});\n\n\t\tdep.replaces = replaces;\n\t\tdep.critical =\n\t\t\toptions.wrappedContextCritical &&\n\t\t\t\"a part of the request of a dependency is an expression\";\n\t\treturn dep;\n\t} else if (\n\t\tparam.isWrapped() &&\n\t\t((param.prefix && param.prefix.isString()) ||\n\t\t\t(param.postfix && param.postfix.isString()))\n\t) {\n\t\tlet prefixRaw =\n\t\t\tparam.prefix && param.prefix.isString() ? param.prefix.string : \"\";\n\t\tlet postfixRaw =\n\t\t\tparam.postfix && param.postfix.isString() ? param.postfix.string : \"\";\n\t\tconst prefixRange =\n\t\t\tparam.prefix && param.prefix.isString() ? param.prefix.range : null;\n\t\tconst postfixRange =\n\t\t\tparam.postfix && param.postfix.isString() ? param.postfix.range : null;\n\t\tconst valueRange = param.range;\n\t\tconst { context, prefix } = splitContextFromPrefix(prefixRaw);\n\t\tconst {\n\t\t\tpath: postfix,\n\t\t\tquery,\n\t\t\tfragment\n\t\t} = parseResource(postfixRaw, parser);\n\t\tconst regExp = new RegExp(\n\t\t\t`^${quoteMeta(prefix)}${options.wrappedContextRegExp.source}${quoteMeta(\n\t\t\t\tpostfix\n\t\t\t)}$`\n\t\t);\n\t\tconst dep = new Dep(\n\t\t\t{\n\t\t\t\trequest: context + query + fragment,\n\t\t\t\trecursive: options.wrappedContextRecursive,\n\t\t\t\tregExp,\n\t\t\t\tmode: \"sync\",\n\t\t\t\t...contextOptions\n\t\t\t},\n\t\t\trange,\n\t\t\tvalueRange,\n\t\t\t...depArgs\n\t\t);\n\t\tdep.loc = expr.loc;\n\t\tconst replaces = [];\n\t\tif (prefixRange) {\n\t\t\treplaces.push({\n\t\t\t\trange: prefixRange,\n\t\t\t\tvalue: JSON.stringify(prefix)\n\t\t\t});\n\t\t}\n\t\tif (postfixRange) {\n\t\t\treplaces.push({\n\t\t\t\trange: postfixRange,\n\t\t\t\tvalue: JSON.stringify(postfix)\n\t\t\t});\n\t\t}\n\t\tdep.replaces = replaces;\n\t\tdep.critical =\n\t\t\toptions.wrappedContextCritical &&\n\t\t\t\"a part of the request of a dependency is an expression\";\n\n\t\tif (parser && param.wrappedInnerExpressions) {\n\t\t\tfor (const part of param.wrappedInnerExpressions) {\n\t\t\t\tif (part.expression) parser.walkExpression(part.expression);\n\t\t\t}\n\t\t}\n\n\t\treturn dep;\n\t} else {\n\t\tconst dep = new Dep(\n\t\t\t{\n\t\t\t\trequest: options.exprContextRequest,\n\t\t\t\trecursive: options.exprContextRecursive,\n\t\t\t\tregExp: /** @type {RegExp} */ (options.exprContextRegExp),\n\t\t\t\tmode: \"sync\",\n\t\t\t\t...contextOptions\n\t\t\t},\n\t\t\trange,\n\t\t\tparam.range,\n\t\t\t...depArgs\n\t\t);\n\t\tdep.loc = expr.loc;\n\t\tdep.critical =\n\t\t\toptions.exprContextCritical &&\n\t\t\t\"the request of a dependency is an expression\";\n\n\t\tparser.walkExpression(param.expression);\n\n\t\treturn dep;\n\t}\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}