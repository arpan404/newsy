{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n/** @typedef {import(\"estree\").Node} EsTreeNode */\n\n/** @typedef {import(\"./JavascriptParser\").VariableInfoInterface} VariableInfoInterface */\n\nconst TypeUnknown = 0;\nconst TypeUndefined = 1;\nconst TypeNull = 2;\nconst TypeString = 3;\nconst TypeNumber = 4;\nconst TypeBoolean = 5;\nconst TypeRegExp = 6;\nconst TypeConditional = 7;\nconst TypeArray = 8;\nconst TypeConstArray = 9;\nconst TypeIdentifier = 10;\nconst TypeWrapped = 11;\nconst TypeTemplateString = 12;\nconst TypeBigInt = 13;\n\nclass BasicEvaluatedExpression {\n  constructor() {\n    this.type = TypeUnknown;\n    /** @type {[number, number]} */\n\n    this.range = undefined;\n    /** @type {boolean} */\n\n    this.falsy = false;\n    /** @type {boolean} */\n\n    this.truthy = false;\n    /** @type {boolean | undefined} */\n\n    this.nullish = undefined;\n    /** @type {boolean} */\n\n    this.sideEffects = true;\n    /** @type {boolean | undefined} */\n\n    this.bool = undefined;\n    /** @type {number | undefined} */\n\n    this.number = undefined;\n    /** @type {bigint | undefined} */\n\n    this.bigint = undefined;\n    /** @type {RegExp | undefined} */\n\n    this.regExp = undefined;\n    /** @type {string | undefined} */\n\n    this.string = undefined;\n    /** @type {BasicEvaluatedExpression[] | undefined} */\n\n    this.quasis = undefined;\n    /** @type {BasicEvaluatedExpression[] | undefined} */\n\n    this.parts = undefined;\n    /** @type {any[] | undefined} */\n\n    this.array = undefined;\n    /** @type {BasicEvaluatedExpression[] | undefined} */\n\n    this.items = undefined;\n    /** @type {BasicEvaluatedExpression[] | undefined} */\n\n    this.options = undefined;\n    /** @type {BasicEvaluatedExpression | undefined} */\n\n    this.prefix = undefined;\n    /** @type {BasicEvaluatedExpression | undefined} */\n\n    this.postfix = undefined;\n    this.wrappedInnerExpressions = undefined;\n    /** @type {string | VariableInfoInterface | undefined} */\n\n    this.identifier = undefined;\n    /** @type {VariableInfoInterface} */\n\n    this.rootInfo = undefined;\n    /** @type {() => string[]} */\n\n    this.getMembers = undefined;\n    /** @type {() => boolean[]} */\n\n    this.getMembersOptionals = undefined;\n    /** @type {EsTreeNode} */\n\n    this.expression = undefined;\n  }\n\n  isUnknown() {\n    return this.type === TypeUnknown;\n  }\n\n  isNull() {\n    return this.type === TypeNull;\n  }\n\n  isUndefined() {\n    return this.type === TypeUndefined;\n  }\n\n  isString() {\n    return this.type === TypeString;\n  }\n\n  isNumber() {\n    return this.type === TypeNumber;\n  }\n\n  isBigInt() {\n    return this.type === TypeBigInt;\n  }\n\n  isBoolean() {\n    return this.type === TypeBoolean;\n  }\n\n  isRegExp() {\n    return this.type === TypeRegExp;\n  }\n\n  isConditional() {\n    return this.type === TypeConditional;\n  }\n\n  isArray() {\n    return this.type === TypeArray;\n  }\n\n  isConstArray() {\n    return this.type === TypeConstArray;\n  }\n\n  isIdentifier() {\n    return this.type === TypeIdentifier;\n  }\n\n  isWrapped() {\n    return this.type === TypeWrapped;\n  }\n\n  isTemplateString() {\n    return this.type === TypeTemplateString;\n  }\n  /**\n   * Is expression a primitive or an object type value?\n   * @returns {boolean | undefined} true: primitive type, false: object type, undefined: unknown/runtime-defined\n   */\n\n\n  isPrimitiveType() {\n    switch (this.type) {\n      case TypeUndefined:\n      case TypeNull:\n      case TypeString:\n      case TypeNumber:\n      case TypeBoolean:\n      case TypeBigInt:\n      case TypeWrapped:\n      case TypeTemplateString:\n        return true;\n\n      case TypeRegExp:\n      case TypeArray:\n      case TypeConstArray:\n        return false;\n\n      default:\n        return undefined;\n    }\n  }\n  /**\n   * Is expression a runtime or compile-time value?\n   * @returns {boolean} true: compile time value, false: runtime value\n   */\n\n\n  isCompileTimeValue() {\n    switch (this.type) {\n      case TypeUndefined:\n      case TypeNull:\n      case TypeString:\n      case TypeNumber:\n      case TypeBoolean:\n      case TypeRegExp:\n      case TypeConstArray:\n      case TypeBigInt:\n        return true;\n\n      default:\n        return false;\n    }\n  }\n  /**\n   * Gets the compile-time value of the expression\n   * @returns {any} the javascript value\n   */\n\n\n  asCompileTimeValue() {\n    switch (this.type) {\n      case TypeUndefined:\n        return undefined;\n\n      case TypeNull:\n        return null;\n\n      case TypeString:\n        return this.string;\n\n      case TypeNumber:\n        return this.number;\n\n      case TypeBoolean:\n        return this.bool;\n\n      case TypeRegExp:\n        return this.regExp;\n\n      case TypeConstArray:\n        return this.array;\n\n      case TypeBigInt:\n        return this.bigint;\n\n      default:\n        throw new Error(\"asCompileTimeValue must only be called for compile-time values\");\n    }\n  }\n\n  isTruthy() {\n    return this.truthy;\n  }\n\n  isFalsy() {\n    return this.falsy;\n  }\n\n  isNullish() {\n    return this.nullish;\n  }\n  /**\n   * Can this expression have side effects?\n   * @returns {boolean} false: never has side effects\n   */\n\n\n  couldHaveSideEffects() {\n    return this.sideEffects;\n  }\n\n  asBool() {\n    if (this.truthy) return true;\n    if (this.falsy || this.nullish) return false;\n    if (this.isBoolean()) return this.bool;\n    if (this.isNull()) return false;\n    if (this.isUndefined()) return false;\n    if (this.isString()) return this.string !== \"\";\n    if (this.isNumber()) return this.number !== 0;\n    if (this.isBigInt()) return this.bigint !== BigInt(0);\n    if (this.isRegExp()) return true;\n    if (this.isArray()) return true;\n    if (this.isConstArray()) return true;\n\n    if (this.isWrapped()) {\n      return this.prefix && this.prefix.asBool() || this.postfix && this.postfix.asBool() ? true : undefined;\n    }\n\n    if (this.isTemplateString()) {\n      const str = this.asString();\n      if (typeof str === \"string\") return str !== \"\";\n    }\n\n    return undefined;\n  }\n\n  asNullish() {\n    const nullish = this.isNullish();\n    if (nullish === true || this.isNull() || this.isUndefined()) return true;\n    if (nullish === false) return false;\n    if (this.isTruthy()) return false;\n    if (this.isBoolean()) return false;\n    if (this.isString()) return false;\n    if (this.isNumber()) return false;\n    if (this.isBigInt()) return false;\n    if (this.isRegExp()) return false;\n    if (this.isArray()) return false;\n    if (this.isConstArray()) return false;\n    if (this.isTemplateString()) return false;\n    if (this.isRegExp()) return false;\n    return undefined;\n  }\n\n  asString() {\n    if (this.isBoolean()) return `${this.bool}`;\n    if (this.isNull()) return \"null\";\n    if (this.isUndefined()) return \"undefined\";\n    if (this.isString()) return this.string;\n    if (this.isNumber()) return `${this.number}`;\n    if (this.isBigInt()) return `${this.bigint}`;\n    if (this.isRegExp()) return `${this.regExp}`;\n\n    if (this.isArray()) {\n      let array = [];\n\n      for (const item of this.items) {\n        const itemStr = item.asString();\n        if (itemStr === undefined) return undefined;\n        array.push(itemStr);\n      }\n\n      return `${array}`;\n    }\n\n    if (this.isConstArray()) return `${this.array}`;\n\n    if (this.isTemplateString()) {\n      let str = \"\";\n\n      for (const part of this.parts) {\n        const partStr = part.asString();\n        if (partStr === undefined) return undefined;\n        str += partStr;\n      }\n\n      return str;\n    }\n\n    return undefined;\n  }\n\n  setString(string) {\n    this.type = TypeString;\n    this.string = string;\n    this.sideEffects = false;\n    return this;\n  }\n\n  setUndefined() {\n    this.type = TypeUndefined;\n    this.sideEffects = false;\n    return this;\n  }\n\n  setNull() {\n    this.type = TypeNull;\n    this.sideEffects = false;\n    return this;\n  }\n\n  setNumber(number) {\n    this.type = TypeNumber;\n    this.number = number;\n    this.sideEffects = false;\n    return this;\n  }\n\n  setBigInt(bigint) {\n    this.type = TypeBigInt;\n    this.bigint = bigint;\n    this.sideEffects = false;\n    return this;\n  }\n\n  setBoolean(bool) {\n    this.type = TypeBoolean;\n    this.bool = bool;\n    this.sideEffects = false;\n    return this;\n  }\n\n  setRegExp(regExp) {\n    this.type = TypeRegExp;\n    this.regExp = regExp;\n    this.sideEffects = false;\n    return this;\n  }\n\n  setIdentifier(identifier, rootInfo, getMembers, getMembersOptionals) {\n    this.type = TypeIdentifier;\n    this.identifier = identifier;\n    this.rootInfo = rootInfo;\n    this.getMembers = getMembers;\n    this.getMembersOptionals = getMembersOptionals;\n    this.sideEffects = true;\n    return this;\n  }\n\n  setWrapped(prefix, postfix, innerExpressions) {\n    this.type = TypeWrapped;\n    this.prefix = prefix;\n    this.postfix = postfix;\n    this.wrappedInnerExpressions = innerExpressions;\n    this.sideEffects = true;\n    return this;\n  }\n\n  setOptions(options) {\n    this.type = TypeConditional;\n    this.options = options;\n    this.sideEffects = true;\n    return this;\n  }\n\n  addOptions(options) {\n    if (!this.options) {\n      this.type = TypeConditional;\n      this.options = [];\n      this.sideEffects = true;\n    }\n\n    for (const item of options) {\n      this.options.push(item);\n    }\n\n    return this;\n  }\n\n  setItems(items) {\n    this.type = TypeArray;\n    this.items = items;\n    this.sideEffects = items.some(i => i.couldHaveSideEffects());\n    return this;\n  }\n\n  setArray(array) {\n    this.type = TypeConstArray;\n    this.array = array;\n    this.sideEffects = false;\n    return this;\n  }\n\n  setTemplateString(quasis, parts, kind) {\n    this.type = TypeTemplateString;\n    this.quasis = quasis;\n    this.parts = parts;\n    this.templateStringKind = kind;\n    this.sideEffects = parts.some(p => p.sideEffects);\n    return this;\n  }\n\n  setTruthy() {\n    this.falsy = false;\n    this.truthy = true;\n    this.nullish = false;\n    return this;\n  }\n\n  setFalsy() {\n    this.falsy = true;\n    this.truthy = false;\n    return this;\n  }\n\n  setNullish(value) {\n    this.nullish = value;\n    if (value) return this.setFalsy();\n    return this;\n  }\n\n  setRange(range) {\n    this.range = range;\n    return this;\n  }\n\n  setSideEffects() {\n    let sideEffects = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n    this.sideEffects = sideEffects;\n    return this;\n  }\n\n  setExpression(expression) {\n    this.expression = expression;\n    return this;\n  }\n\n}\n/**\n * @param {string} flags regexp flags\n * @returns {boolean} is valid flags\n */\n\n\nBasicEvaluatedExpression.isValidRegExpFlags = flags => {\n  const len = flags.length;\n  if (len === 0) return true;\n  if (len > 4) return false; // cspell:word gimy\n\n  let remaining = 0b0000; // bit per RegExp flag: gimy\n\n  for (let i = 0; i < len; i++) switch (flags.charCodeAt(i)) {\n    case 103\n    /* g */\n    :\n      if (remaining & 0b1000) return false;\n      remaining |= 0b1000;\n      break;\n\n    case 105\n    /* i */\n    :\n      if (remaining & 0b0100) return false;\n      remaining |= 0b0100;\n      break;\n\n    case 109\n    /* m */\n    :\n      if (remaining & 0b0010) return false;\n      remaining |= 0b0010;\n      break;\n\n    case 121\n    /* y */\n    :\n      if (remaining & 0b0001) return false;\n      remaining |= 0b0001;\n      break;\n\n    default:\n      return false;\n  }\n\n  return true;\n};\n\nmodule.exports = BasicEvaluatedExpression;","map":{"version":3,"names":["TypeUnknown","TypeUndefined","TypeNull","TypeString","TypeNumber","TypeBoolean","TypeRegExp","TypeConditional","TypeArray","TypeConstArray","TypeIdentifier","TypeWrapped","TypeTemplateString","TypeBigInt","BasicEvaluatedExpression","constructor","type","range","undefined","falsy","truthy","nullish","sideEffects","bool","number","bigint","regExp","string","quasis","parts","array","items","options","prefix","postfix","wrappedInnerExpressions","identifier","rootInfo","getMembers","getMembersOptionals","expression","isUnknown","isNull","isUndefined","isString","isNumber","isBigInt","isBoolean","isRegExp","isConditional","isArray","isConstArray","isIdentifier","isWrapped","isTemplateString","isPrimitiveType","isCompileTimeValue","asCompileTimeValue","Error","isTruthy","isFalsy","isNullish","couldHaveSideEffects","asBool","BigInt","str","asString","asNullish","item","itemStr","push","part","partStr","setString","setUndefined","setNull","setNumber","setBigInt","setBoolean","setRegExp","setIdentifier","setWrapped","innerExpressions","setOptions","addOptions","setItems","some","i","setArray","setTemplateString","kind","templateStringKind","p","setTruthy","setFalsy","setNullish","value","setRange","setSideEffects","setExpression","isValidRegExpFlags","flags","len","length","remaining","charCodeAt","module","exports"],"sources":["/Users/arpanbhandari/Documents/cod-ing/React/newsapp/node_modules/webpack/lib/javascript/BasicEvaluatedExpression.js"],"sourcesContent":["/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\n\"use strict\";\n\n/** @typedef {import(\"estree\").Node} EsTreeNode */\n/** @typedef {import(\"./JavascriptParser\").VariableInfoInterface} VariableInfoInterface */\n\nconst TypeUnknown = 0;\nconst TypeUndefined = 1;\nconst TypeNull = 2;\nconst TypeString = 3;\nconst TypeNumber = 4;\nconst TypeBoolean = 5;\nconst TypeRegExp = 6;\nconst TypeConditional = 7;\nconst TypeArray = 8;\nconst TypeConstArray = 9;\nconst TypeIdentifier = 10;\nconst TypeWrapped = 11;\nconst TypeTemplateString = 12;\nconst TypeBigInt = 13;\n\nclass BasicEvaluatedExpression {\n\tconstructor() {\n\t\tthis.type = TypeUnknown;\n\t\t/** @type {[number, number]} */\n\t\tthis.range = undefined;\n\t\t/** @type {boolean} */\n\t\tthis.falsy = false;\n\t\t/** @type {boolean} */\n\t\tthis.truthy = false;\n\t\t/** @type {boolean | undefined} */\n\t\tthis.nullish = undefined;\n\t\t/** @type {boolean} */\n\t\tthis.sideEffects = true;\n\t\t/** @type {boolean | undefined} */\n\t\tthis.bool = undefined;\n\t\t/** @type {number | undefined} */\n\t\tthis.number = undefined;\n\t\t/** @type {bigint | undefined} */\n\t\tthis.bigint = undefined;\n\t\t/** @type {RegExp | undefined} */\n\t\tthis.regExp = undefined;\n\t\t/** @type {string | undefined} */\n\t\tthis.string = undefined;\n\t\t/** @type {BasicEvaluatedExpression[] | undefined} */\n\t\tthis.quasis = undefined;\n\t\t/** @type {BasicEvaluatedExpression[] | undefined} */\n\t\tthis.parts = undefined;\n\t\t/** @type {any[] | undefined} */\n\t\tthis.array = undefined;\n\t\t/** @type {BasicEvaluatedExpression[] | undefined} */\n\t\tthis.items = undefined;\n\t\t/** @type {BasicEvaluatedExpression[] | undefined} */\n\t\tthis.options = undefined;\n\t\t/** @type {BasicEvaluatedExpression | undefined} */\n\t\tthis.prefix = undefined;\n\t\t/** @type {BasicEvaluatedExpression | undefined} */\n\t\tthis.postfix = undefined;\n\t\tthis.wrappedInnerExpressions = undefined;\n\t\t/** @type {string | VariableInfoInterface | undefined} */\n\t\tthis.identifier = undefined;\n\t\t/** @type {VariableInfoInterface} */\n\t\tthis.rootInfo = undefined;\n\t\t/** @type {() => string[]} */\n\t\tthis.getMembers = undefined;\n\t\t/** @type {() => boolean[]} */\n\t\tthis.getMembersOptionals = undefined;\n\t\t/** @type {EsTreeNode} */\n\t\tthis.expression = undefined;\n\t}\n\n\tisUnknown() {\n\t\treturn this.type === TypeUnknown;\n\t}\n\n\tisNull() {\n\t\treturn this.type === TypeNull;\n\t}\n\n\tisUndefined() {\n\t\treturn this.type === TypeUndefined;\n\t}\n\n\tisString() {\n\t\treturn this.type === TypeString;\n\t}\n\n\tisNumber() {\n\t\treturn this.type === TypeNumber;\n\t}\n\n\tisBigInt() {\n\t\treturn this.type === TypeBigInt;\n\t}\n\n\tisBoolean() {\n\t\treturn this.type === TypeBoolean;\n\t}\n\n\tisRegExp() {\n\t\treturn this.type === TypeRegExp;\n\t}\n\n\tisConditional() {\n\t\treturn this.type === TypeConditional;\n\t}\n\n\tisArray() {\n\t\treturn this.type === TypeArray;\n\t}\n\n\tisConstArray() {\n\t\treturn this.type === TypeConstArray;\n\t}\n\n\tisIdentifier() {\n\t\treturn this.type === TypeIdentifier;\n\t}\n\n\tisWrapped() {\n\t\treturn this.type === TypeWrapped;\n\t}\n\n\tisTemplateString() {\n\t\treturn this.type === TypeTemplateString;\n\t}\n\n\t/**\n\t * Is expression a primitive or an object type value?\n\t * @returns {boolean | undefined} true: primitive type, false: object type, undefined: unknown/runtime-defined\n\t */\n\tisPrimitiveType() {\n\t\tswitch (this.type) {\n\t\t\tcase TypeUndefined:\n\t\t\tcase TypeNull:\n\t\t\tcase TypeString:\n\t\t\tcase TypeNumber:\n\t\t\tcase TypeBoolean:\n\t\t\tcase TypeBigInt:\n\t\t\tcase TypeWrapped:\n\t\t\tcase TypeTemplateString:\n\t\t\t\treturn true;\n\t\t\tcase TypeRegExp:\n\t\t\tcase TypeArray:\n\t\t\tcase TypeConstArray:\n\t\t\t\treturn false;\n\t\t\tdefault:\n\t\t\t\treturn undefined;\n\t\t}\n\t}\n\n\t/**\n\t * Is expression a runtime or compile-time value?\n\t * @returns {boolean} true: compile time value, false: runtime value\n\t */\n\tisCompileTimeValue() {\n\t\tswitch (this.type) {\n\t\t\tcase TypeUndefined:\n\t\t\tcase TypeNull:\n\t\t\tcase TypeString:\n\t\t\tcase TypeNumber:\n\t\t\tcase TypeBoolean:\n\t\t\tcase TypeRegExp:\n\t\t\tcase TypeConstArray:\n\t\t\tcase TypeBigInt:\n\t\t\t\treturn true;\n\t\t\tdefault:\n\t\t\t\treturn false;\n\t\t}\n\t}\n\n\t/**\n\t * Gets the compile-time value of the expression\n\t * @returns {any} the javascript value\n\t */\n\tasCompileTimeValue() {\n\t\tswitch (this.type) {\n\t\t\tcase TypeUndefined:\n\t\t\t\treturn undefined;\n\t\t\tcase TypeNull:\n\t\t\t\treturn null;\n\t\t\tcase TypeString:\n\t\t\t\treturn this.string;\n\t\t\tcase TypeNumber:\n\t\t\t\treturn this.number;\n\t\t\tcase TypeBoolean:\n\t\t\t\treturn this.bool;\n\t\t\tcase TypeRegExp:\n\t\t\t\treturn this.regExp;\n\t\t\tcase TypeConstArray:\n\t\t\t\treturn this.array;\n\t\t\tcase TypeBigInt:\n\t\t\t\treturn this.bigint;\n\t\t\tdefault:\n\t\t\t\tthrow new Error(\n\t\t\t\t\t\"asCompileTimeValue must only be called for compile-time values\"\n\t\t\t\t);\n\t\t}\n\t}\n\n\tisTruthy() {\n\t\treturn this.truthy;\n\t}\n\n\tisFalsy() {\n\t\treturn this.falsy;\n\t}\n\n\tisNullish() {\n\t\treturn this.nullish;\n\t}\n\n\t/**\n\t * Can this expression have side effects?\n\t * @returns {boolean} false: never has side effects\n\t */\n\tcouldHaveSideEffects() {\n\t\treturn this.sideEffects;\n\t}\n\n\tasBool() {\n\t\tif (this.truthy) return true;\n\t\tif (this.falsy || this.nullish) return false;\n\t\tif (this.isBoolean()) return this.bool;\n\t\tif (this.isNull()) return false;\n\t\tif (this.isUndefined()) return false;\n\t\tif (this.isString()) return this.string !== \"\";\n\t\tif (this.isNumber()) return this.number !== 0;\n\t\tif (this.isBigInt()) return this.bigint !== BigInt(0);\n\t\tif (this.isRegExp()) return true;\n\t\tif (this.isArray()) return true;\n\t\tif (this.isConstArray()) return true;\n\t\tif (this.isWrapped()) {\n\t\t\treturn (this.prefix && this.prefix.asBool()) ||\n\t\t\t\t(this.postfix && this.postfix.asBool())\n\t\t\t\t? true\n\t\t\t\t: undefined;\n\t\t}\n\t\tif (this.isTemplateString()) {\n\t\t\tconst str = this.asString();\n\t\t\tif (typeof str === \"string\") return str !== \"\";\n\t\t}\n\t\treturn undefined;\n\t}\n\n\tasNullish() {\n\t\tconst nullish = this.isNullish();\n\n\t\tif (nullish === true || this.isNull() || this.isUndefined()) return true;\n\n\t\tif (nullish === false) return false;\n\t\tif (this.isTruthy()) return false;\n\t\tif (this.isBoolean()) return false;\n\t\tif (this.isString()) return false;\n\t\tif (this.isNumber()) return false;\n\t\tif (this.isBigInt()) return false;\n\t\tif (this.isRegExp()) return false;\n\t\tif (this.isArray()) return false;\n\t\tif (this.isConstArray()) return false;\n\t\tif (this.isTemplateString()) return false;\n\t\tif (this.isRegExp()) return false;\n\n\t\treturn undefined;\n\t}\n\n\tasString() {\n\t\tif (this.isBoolean()) return `${this.bool}`;\n\t\tif (this.isNull()) return \"null\";\n\t\tif (this.isUndefined()) return \"undefined\";\n\t\tif (this.isString()) return this.string;\n\t\tif (this.isNumber()) return `${this.number}`;\n\t\tif (this.isBigInt()) return `${this.bigint}`;\n\t\tif (this.isRegExp()) return `${this.regExp}`;\n\t\tif (this.isArray()) {\n\t\t\tlet array = [];\n\t\t\tfor (const item of this.items) {\n\t\t\t\tconst itemStr = item.asString();\n\t\t\t\tif (itemStr === undefined) return undefined;\n\t\t\t\tarray.push(itemStr);\n\t\t\t}\n\t\t\treturn `${array}`;\n\t\t}\n\t\tif (this.isConstArray()) return `${this.array}`;\n\t\tif (this.isTemplateString()) {\n\t\t\tlet str = \"\";\n\t\t\tfor (const part of this.parts) {\n\t\t\t\tconst partStr = part.asString();\n\t\t\t\tif (partStr === undefined) return undefined;\n\t\t\t\tstr += partStr;\n\t\t\t}\n\t\t\treturn str;\n\t\t}\n\t\treturn undefined;\n\t}\n\n\tsetString(string) {\n\t\tthis.type = TypeString;\n\t\tthis.string = string;\n\t\tthis.sideEffects = false;\n\t\treturn this;\n\t}\n\n\tsetUndefined() {\n\t\tthis.type = TypeUndefined;\n\t\tthis.sideEffects = false;\n\t\treturn this;\n\t}\n\n\tsetNull() {\n\t\tthis.type = TypeNull;\n\t\tthis.sideEffects = false;\n\t\treturn this;\n\t}\n\n\tsetNumber(number) {\n\t\tthis.type = TypeNumber;\n\t\tthis.number = number;\n\t\tthis.sideEffects = false;\n\t\treturn this;\n\t}\n\n\tsetBigInt(bigint) {\n\t\tthis.type = TypeBigInt;\n\t\tthis.bigint = bigint;\n\t\tthis.sideEffects = false;\n\t\treturn this;\n\t}\n\n\tsetBoolean(bool) {\n\t\tthis.type = TypeBoolean;\n\t\tthis.bool = bool;\n\t\tthis.sideEffects = false;\n\t\treturn this;\n\t}\n\n\tsetRegExp(regExp) {\n\t\tthis.type = TypeRegExp;\n\t\tthis.regExp = regExp;\n\t\tthis.sideEffects = false;\n\t\treturn this;\n\t}\n\n\tsetIdentifier(identifier, rootInfo, getMembers, getMembersOptionals) {\n\t\tthis.type = TypeIdentifier;\n\t\tthis.identifier = identifier;\n\t\tthis.rootInfo = rootInfo;\n\t\tthis.getMembers = getMembers;\n\t\tthis.getMembersOptionals = getMembersOptionals;\n\t\tthis.sideEffects = true;\n\t\treturn this;\n\t}\n\n\tsetWrapped(prefix, postfix, innerExpressions) {\n\t\tthis.type = TypeWrapped;\n\t\tthis.prefix = prefix;\n\t\tthis.postfix = postfix;\n\t\tthis.wrappedInnerExpressions = innerExpressions;\n\t\tthis.sideEffects = true;\n\t\treturn this;\n\t}\n\n\tsetOptions(options) {\n\t\tthis.type = TypeConditional;\n\t\tthis.options = options;\n\t\tthis.sideEffects = true;\n\t\treturn this;\n\t}\n\n\taddOptions(options) {\n\t\tif (!this.options) {\n\t\t\tthis.type = TypeConditional;\n\t\t\tthis.options = [];\n\t\t\tthis.sideEffects = true;\n\t\t}\n\t\tfor (const item of options) {\n\t\t\tthis.options.push(item);\n\t\t}\n\t\treturn this;\n\t}\n\n\tsetItems(items) {\n\t\tthis.type = TypeArray;\n\t\tthis.items = items;\n\t\tthis.sideEffects = items.some(i => i.couldHaveSideEffects());\n\t\treturn this;\n\t}\n\n\tsetArray(array) {\n\t\tthis.type = TypeConstArray;\n\t\tthis.array = array;\n\t\tthis.sideEffects = false;\n\t\treturn this;\n\t}\n\n\tsetTemplateString(quasis, parts, kind) {\n\t\tthis.type = TypeTemplateString;\n\t\tthis.quasis = quasis;\n\t\tthis.parts = parts;\n\t\tthis.templateStringKind = kind;\n\t\tthis.sideEffects = parts.some(p => p.sideEffects);\n\t\treturn this;\n\t}\n\n\tsetTruthy() {\n\t\tthis.falsy = false;\n\t\tthis.truthy = true;\n\t\tthis.nullish = false;\n\t\treturn this;\n\t}\n\n\tsetFalsy() {\n\t\tthis.falsy = true;\n\t\tthis.truthy = false;\n\t\treturn this;\n\t}\n\n\tsetNullish(value) {\n\t\tthis.nullish = value;\n\n\t\tif (value) return this.setFalsy();\n\n\t\treturn this;\n\t}\n\n\tsetRange(range) {\n\t\tthis.range = range;\n\t\treturn this;\n\t}\n\n\tsetSideEffects(sideEffects = true) {\n\t\tthis.sideEffects = sideEffects;\n\t\treturn this;\n\t}\n\n\tsetExpression(expression) {\n\t\tthis.expression = expression;\n\t\treturn this;\n\t}\n}\n\n/**\n * @param {string} flags regexp flags\n * @returns {boolean} is valid flags\n */\nBasicEvaluatedExpression.isValidRegExpFlags = flags => {\n\tconst len = flags.length;\n\n\tif (len === 0) return true;\n\tif (len > 4) return false;\n\n\t// cspell:word gimy\n\tlet remaining = 0b0000; // bit per RegExp flag: gimy\n\n\tfor (let i = 0; i < len; i++)\n\t\tswitch (flags.charCodeAt(i)) {\n\t\t\tcase 103 /* g */:\n\t\t\t\tif (remaining & 0b1000) return false;\n\t\t\t\tremaining |= 0b1000;\n\t\t\t\tbreak;\n\t\t\tcase 105 /* i */:\n\t\t\t\tif (remaining & 0b0100) return false;\n\t\t\t\tremaining |= 0b0100;\n\t\t\t\tbreak;\n\t\t\tcase 109 /* m */:\n\t\t\t\tif (remaining & 0b0010) return false;\n\t\t\t\tremaining |= 0b0010;\n\t\t\t\tbreak;\n\t\t\tcase 121 /* y */:\n\t\t\t\tif (remaining & 0b0001) return false;\n\t\t\t\tremaining |= 0b0001;\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\treturn false;\n\t\t}\n\n\treturn true;\n};\n\nmodule.exports = BasicEvaluatedExpression;\n"],"mappings":"AAAA;AACA;AACA;AACA;AAEA;AAEA;;AACA;;AAEA,MAAMA,WAAW,GAAG,CAApB;AACA,MAAMC,aAAa,GAAG,CAAtB;AACA,MAAMC,QAAQ,GAAG,CAAjB;AACA,MAAMC,UAAU,GAAG,CAAnB;AACA,MAAMC,UAAU,GAAG,CAAnB;AACA,MAAMC,WAAW,GAAG,CAApB;AACA,MAAMC,UAAU,GAAG,CAAnB;AACA,MAAMC,eAAe,GAAG,CAAxB;AACA,MAAMC,SAAS,GAAG,CAAlB;AACA,MAAMC,cAAc,GAAG,CAAvB;AACA,MAAMC,cAAc,GAAG,EAAvB;AACA,MAAMC,WAAW,GAAG,EAApB;AACA,MAAMC,kBAAkB,GAAG,EAA3B;AACA,MAAMC,UAAU,GAAG,EAAnB;;AAEA,MAAMC,wBAAN,CAA+B;EAC9BC,WAAW,GAAG;IACb,KAAKC,IAAL,GAAYhB,WAAZ;IACA;;IACA,KAAKiB,KAAL,GAAaC,SAAb;IACA;;IACA,KAAKC,KAAL,GAAa,KAAb;IACA;;IACA,KAAKC,MAAL,GAAc,KAAd;IACA;;IACA,KAAKC,OAAL,GAAeH,SAAf;IACA;;IACA,KAAKI,WAAL,GAAmB,IAAnB;IACA;;IACA,KAAKC,IAAL,GAAYL,SAAZ;IACA;;IACA,KAAKM,MAAL,GAAcN,SAAd;IACA;;IACA,KAAKO,MAAL,GAAcP,SAAd;IACA;;IACA,KAAKQ,MAAL,GAAcR,SAAd;IACA;;IACA,KAAKS,MAAL,GAAcT,SAAd;IACA;;IACA,KAAKU,MAAL,GAAcV,SAAd;IACA;;IACA,KAAKW,KAAL,GAAaX,SAAb;IACA;;IACA,KAAKY,KAAL,GAAaZ,SAAb;IACA;;IACA,KAAKa,KAAL,GAAab,SAAb;IACA;;IACA,KAAKc,OAAL,GAAed,SAAf;IACA;;IACA,KAAKe,MAAL,GAAcf,SAAd;IACA;;IACA,KAAKgB,OAAL,GAAehB,SAAf;IACA,KAAKiB,uBAAL,GAA+BjB,SAA/B;IACA;;IACA,KAAKkB,UAAL,GAAkBlB,SAAlB;IACA;;IACA,KAAKmB,QAAL,GAAgBnB,SAAhB;IACA;;IACA,KAAKoB,UAAL,GAAkBpB,SAAlB;IACA;;IACA,KAAKqB,mBAAL,GAA2BrB,SAA3B;IACA;;IACA,KAAKsB,UAAL,GAAkBtB,SAAlB;EACA;;EAEDuB,SAAS,GAAG;IACX,OAAO,KAAKzB,IAAL,KAAchB,WAArB;EACA;;EAED0C,MAAM,GAAG;IACR,OAAO,KAAK1B,IAAL,KAAcd,QAArB;EACA;;EAEDyC,WAAW,GAAG;IACb,OAAO,KAAK3B,IAAL,KAAcf,aAArB;EACA;;EAED2C,QAAQ,GAAG;IACV,OAAO,KAAK5B,IAAL,KAAcb,UAArB;EACA;;EAED0C,QAAQ,GAAG;IACV,OAAO,KAAK7B,IAAL,KAAcZ,UAArB;EACA;;EAED0C,QAAQ,GAAG;IACV,OAAO,KAAK9B,IAAL,KAAcH,UAArB;EACA;;EAEDkC,SAAS,GAAG;IACX,OAAO,KAAK/B,IAAL,KAAcX,WAArB;EACA;;EAED2C,QAAQ,GAAG;IACV,OAAO,KAAKhC,IAAL,KAAcV,UAArB;EACA;;EAED2C,aAAa,GAAG;IACf,OAAO,KAAKjC,IAAL,KAAcT,eAArB;EACA;;EAED2C,OAAO,GAAG;IACT,OAAO,KAAKlC,IAAL,KAAcR,SAArB;EACA;;EAED2C,YAAY,GAAG;IACd,OAAO,KAAKnC,IAAL,KAAcP,cAArB;EACA;;EAED2C,YAAY,GAAG;IACd,OAAO,KAAKpC,IAAL,KAAcN,cAArB;EACA;;EAED2C,SAAS,GAAG;IACX,OAAO,KAAKrC,IAAL,KAAcL,WAArB;EACA;;EAED2C,gBAAgB,GAAG;IAClB,OAAO,KAAKtC,IAAL,KAAcJ,kBAArB;EACA;EAED;AACD;AACA;AACA;;;EACC2C,eAAe,GAAG;IACjB,QAAQ,KAAKvC,IAAb;MACC,KAAKf,aAAL;MACA,KAAKC,QAAL;MACA,KAAKC,UAAL;MACA,KAAKC,UAAL;MACA,KAAKC,WAAL;MACA,KAAKQ,UAAL;MACA,KAAKF,WAAL;MACA,KAAKC,kBAAL;QACC,OAAO,IAAP;;MACD,KAAKN,UAAL;MACA,KAAKE,SAAL;MACA,KAAKC,cAAL;QACC,OAAO,KAAP;;MACD;QACC,OAAOS,SAAP;IAfF;EAiBA;EAED;AACD;AACA;AACA;;;EACCsC,kBAAkB,GAAG;IACpB,QAAQ,KAAKxC,IAAb;MACC,KAAKf,aAAL;MACA,KAAKC,QAAL;MACA,KAAKC,UAAL;MACA,KAAKC,UAAL;MACA,KAAKC,WAAL;MACA,KAAKC,UAAL;MACA,KAAKG,cAAL;MACA,KAAKI,UAAL;QACC,OAAO,IAAP;;MACD;QACC,OAAO,KAAP;IAXF;EAaA;EAED;AACD;AACA;AACA;;;EACC4C,kBAAkB,GAAG;IACpB,QAAQ,KAAKzC,IAAb;MACC,KAAKf,aAAL;QACC,OAAOiB,SAAP;;MACD,KAAKhB,QAAL;QACC,OAAO,IAAP;;MACD,KAAKC,UAAL;QACC,OAAO,KAAKwB,MAAZ;;MACD,KAAKvB,UAAL;QACC,OAAO,KAAKoB,MAAZ;;MACD,KAAKnB,WAAL;QACC,OAAO,KAAKkB,IAAZ;;MACD,KAAKjB,UAAL;QACC,OAAO,KAAKoB,MAAZ;;MACD,KAAKjB,cAAL;QACC,OAAO,KAAKqB,KAAZ;;MACD,KAAKjB,UAAL;QACC,OAAO,KAAKY,MAAZ;;MACD;QACC,MAAM,IAAIiC,KAAJ,CACL,gEADK,CAAN;IAlBF;EAsBA;;EAEDC,QAAQ,GAAG;IACV,OAAO,KAAKvC,MAAZ;EACA;;EAEDwC,OAAO,GAAG;IACT,OAAO,KAAKzC,KAAZ;EACA;;EAED0C,SAAS,GAAG;IACX,OAAO,KAAKxC,OAAZ;EACA;EAED;AACD;AACA;AACA;;;EACCyC,oBAAoB,GAAG;IACtB,OAAO,KAAKxC,WAAZ;EACA;;EAEDyC,MAAM,GAAG;IACR,IAAI,KAAK3C,MAAT,EAAiB,OAAO,IAAP;IACjB,IAAI,KAAKD,KAAL,IAAc,KAAKE,OAAvB,EAAgC,OAAO,KAAP;IAChC,IAAI,KAAK0B,SAAL,EAAJ,EAAsB,OAAO,KAAKxB,IAAZ;IACtB,IAAI,KAAKmB,MAAL,EAAJ,EAAmB,OAAO,KAAP;IACnB,IAAI,KAAKC,WAAL,EAAJ,EAAwB,OAAO,KAAP;IACxB,IAAI,KAAKC,QAAL,EAAJ,EAAqB,OAAO,KAAKjB,MAAL,KAAgB,EAAvB;IACrB,IAAI,KAAKkB,QAAL,EAAJ,EAAqB,OAAO,KAAKrB,MAAL,KAAgB,CAAvB;IACrB,IAAI,KAAKsB,QAAL,EAAJ,EAAqB,OAAO,KAAKrB,MAAL,KAAgBuC,MAAM,CAAC,CAAD,CAA7B;IACrB,IAAI,KAAKhB,QAAL,EAAJ,EAAqB,OAAO,IAAP;IACrB,IAAI,KAAKE,OAAL,EAAJ,EAAoB,OAAO,IAAP;IACpB,IAAI,KAAKC,YAAL,EAAJ,EAAyB,OAAO,IAAP;;IACzB,IAAI,KAAKE,SAAL,EAAJ,EAAsB;MACrB,OAAQ,KAAKpB,MAAL,IAAe,KAAKA,MAAL,CAAY8B,MAAZ,EAAhB,IACL,KAAK7B,OAAL,IAAgB,KAAKA,OAAL,CAAa6B,MAAb,EADX,GAEJ,IAFI,GAGJ7C,SAHH;IAIA;;IACD,IAAI,KAAKoC,gBAAL,EAAJ,EAA6B;MAC5B,MAAMW,GAAG,GAAG,KAAKC,QAAL,EAAZ;MACA,IAAI,OAAOD,GAAP,KAAe,QAAnB,EAA6B,OAAOA,GAAG,KAAK,EAAf;IAC7B;;IACD,OAAO/C,SAAP;EACA;;EAEDiD,SAAS,GAAG;IACX,MAAM9C,OAAO,GAAG,KAAKwC,SAAL,EAAhB;IAEA,IAAIxC,OAAO,KAAK,IAAZ,IAAoB,KAAKqB,MAAL,EAApB,IAAqC,KAAKC,WAAL,EAAzC,EAA6D,OAAO,IAAP;IAE7D,IAAItB,OAAO,KAAK,KAAhB,EAAuB,OAAO,KAAP;IACvB,IAAI,KAAKsC,QAAL,EAAJ,EAAqB,OAAO,KAAP;IACrB,IAAI,KAAKZ,SAAL,EAAJ,EAAsB,OAAO,KAAP;IACtB,IAAI,KAAKH,QAAL,EAAJ,EAAqB,OAAO,KAAP;IACrB,IAAI,KAAKC,QAAL,EAAJ,EAAqB,OAAO,KAAP;IACrB,IAAI,KAAKC,QAAL,EAAJ,EAAqB,OAAO,KAAP;IACrB,IAAI,KAAKE,QAAL,EAAJ,EAAqB,OAAO,KAAP;IACrB,IAAI,KAAKE,OAAL,EAAJ,EAAoB,OAAO,KAAP;IACpB,IAAI,KAAKC,YAAL,EAAJ,EAAyB,OAAO,KAAP;IACzB,IAAI,KAAKG,gBAAL,EAAJ,EAA6B,OAAO,KAAP;IAC7B,IAAI,KAAKN,QAAL,EAAJ,EAAqB,OAAO,KAAP;IAErB,OAAO9B,SAAP;EACA;;EAEDgD,QAAQ,GAAG;IACV,IAAI,KAAKnB,SAAL,EAAJ,EAAsB,OAAQ,GAAE,KAAKxB,IAAK,EAApB;IACtB,IAAI,KAAKmB,MAAL,EAAJ,EAAmB,OAAO,MAAP;IACnB,IAAI,KAAKC,WAAL,EAAJ,EAAwB,OAAO,WAAP;IACxB,IAAI,KAAKC,QAAL,EAAJ,EAAqB,OAAO,KAAKjB,MAAZ;IACrB,IAAI,KAAKkB,QAAL,EAAJ,EAAqB,OAAQ,GAAE,KAAKrB,MAAO,EAAtB;IACrB,IAAI,KAAKsB,QAAL,EAAJ,EAAqB,OAAQ,GAAE,KAAKrB,MAAO,EAAtB;IACrB,IAAI,KAAKuB,QAAL,EAAJ,EAAqB,OAAQ,GAAE,KAAKtB,MAAO,EAAtB;;IACrB,IAAI,KAAKwB,OAAL,EAAJ,EAAoB;MACnB,IAAIpB,KAAK,GAAG,EAAZ;;MACA,KAAK,MAAMsC,IAAX,IAAmB,KAAKrC,KAAxB,EAA+B;QAC9B,MAAMsC,OAAO,GAAGD,IAAI,CAACF,QAAL,EAAhB;QACA,IAAIG,OAAO,KAAKnD,SAAhB,EAA2B,OAAOA,SAAP;QAC3BY,KAAK,CAACwC,IAAN,CAAWD,OAAX;MACA;;MACD,OAAQ,GAAEvC,KAAM,EAAhB;IACA;;IACD,IAAI,KAAKqB,YAAL,EAAJ,EAAyB,OAAQ,GAAE,KAAKrB,KAAM,EAArB;;IACzB,IAAI,KAAKwB,gBAAL,EAAJ,EAA6B;MAC5B,IAAIW,GAAG,GAAG,EAAV;;MACA,KAAK,MAAMM,IAAX,IAAmB,KAAK1C,KAAxB,EAA+B;QAC9B,MAAM2C,OAAO,GAAGD,IAAI,CAACL,QAAL,EAAhB;QACA,IAAIM,OAAO,KAAKtD,SAAhB,EAA2B,OAAOA,SAAP;QAC3B+C,GAAG,IAAIO,OAAP;MACA;;MACD,OAAOP,GAAP;IACA;;IACD,OAAO/C,SAAP;EACA;;EAEDuD,SAAS,CAAC9C,MAAD,EAAS;IACjB,KAAKX,IAAL,GAAYb,UAAZ;IACA,KAAKwB,MAAL,GAAcA,MAAd;IACA,KAAKL,WAAL,GAAmB,KAAnB;IACA,OAAO,IAAP;EACA;;EAEDoD,YAAY,GAAG;IACd,KAAK1D,IAAL,GAAYf,aAAZ;IACA,KAAKqB,WAAL,GAAmB,KAAnB;IACA,OAAO,IAAP;EACA;;EAEDqD,OAAO,GAAG;IACT,KAAK3D,IAAL,GAAYd,QAAZ;IACA,KAAKoB,WAAL,GAAmB,KAAnB;IACA,OAAO,IAAP;EACA;;EAEDsD,SAAS,CAACpD,MAAD,EAAS;IACjB,KAAKR,IAAL,GAAYZ,UAAZ;IACA,KAAKoB,MAAL,GAAcA,MAAd;IACA,KAAKF,WAAL,GAAmB,KAAnB;IACA,OAAO,IAAP;EACA;;EAEDuD,SAAS,CAACpD,MAAD,EAAS;IACjB,KAAKT,IAAL,GAAYH,UAAZ;IACA,KAAKY,MAAL,GAAcA,MAAd;IACA,KAAKH,WAAL,GAAmB,KAAnB;IACA,OAAO,IAAP;EACA;;EAEDwD,UAAU,CAACvD,IAAD,EAAO;IAChB,KAAKP,IAAL,GAAYX,WAAZ;IACA,KAAKkB,IAAL,GAAYA,IAAZ;IACA,KAAKD,WAAL,GAAmB,KAAnB;IACA,OAAO,IAAP;EACA;;EAEDyD,SAAS,CAACrD,MAAD,EAAS;IACjB,KAAKV,IAAL,GAAYV,UAAZ;IACA,KAAKoB,MAAL,GAAcA,MAAd;IACA,KAAKJ,WAAL,GAAmB,KAAnB;IACA,OAAO,IAAP;EACA;;EAED0D,aAAa,CAAC5C,UAAD,EAAaC,QAAb,EAAuBC,UAAvB,EAAmCC,mBAAnC,EAAwD;IACpE,KAAKvB,IAAL,GAAYN,cAAZ;IACA,KAAK0B,UAAL,GAAkBA,UAAlB;IACA,KAAKC,QAAL,GAAgBA,QAAhB;IACA,KAAKC,UAAL,GAAkBA,UAAlB;IACA,KAAKC,mBAAL,GAA2BA,mBAA3B;IACA,KAAKjB,WAAL,GAAmB,IAAnB;IACA,OAAO,IAAP;EACA;;EAED2D,UAAU,CAAChD,MAAD,EAASC,OAAT,EAAkBgD,gBAAlB,EAAoC;IAC7C,KAAKlE,IAAL,GAAYL,WAAZ;IACA,KAAKsB,MAAL,GAAcA,MAAd;IACA,KAAKC,OAAL,GAAeA,OAAf;IACA,KAAKC,uBAAL,GAA+B+C,gBAA/B;IACA,KAAK5D,WAAL,GAAmB,IAAnB;IACA,OAAO,IAAP;EACA;;EAED6D,UAAU,CAACnD,OAAD,EAAU;IACnB,KAAKhB,IAAL,GAAYT,eAAZ;IACA,KAAKyB,OAAL,GAAeA,OAAf;IACA,KAAKV,WAAL,GAAmB,IAAnB;IACA,OAAO,IAAP;EACA;;EAED8D,UAAU,CAACpD,OAAD,EAAU;IACnB,IAAI,CAAC,KAAKA,OAAV,EAAmB;MAClB,KAAKhB,IAAL,GAAYT,eAAZ;MACA,KAAKyB,OAAL,GAAe,EAAf;MACA,KAAKV,WAAL,GAAmB,IAAnB;IACA;;IACD,KAAK,MAAM8C,IAAX,IAAmBpC,OAAnB,EAA4B;MAC3B,KAAKA,OAAL,CAAasC,IAAb,CAAkBF,IAAlB;IACA;;IACD,OAAO,IAAP;EACA;;EAEDiB,QAAQ,CAACtD,KAAD,EAAQ;IACf,KAAKf,IAAL,GAAYR,SAAZ;IACA,KAAKuB,KAAL,GAAaA,KAAb;IACA,KAAKT,WAAL,GAAmBS,KAAK,CAACuD,IAAN,CAAWC,CAAC,IAAIA,CAAC,CAACzB,oBAAF,EAAhB,CAAnB;IACA,OAAO,IAAP;EACA;;EAED0B,QAAQ,CAAC1D,KAAD,EAAQ;IACf,KAAKd,IAAL,GAAYP,cAAZ;IACA,KAAKqB,KAAL,GAAaA,KAAb;IACA,KAAKR,WAAL,GAAmB,KAAnB;IACA,OAAO,IAAP;EACA;;EAEDmE,iBAAiB,CAAC7D,MAAD,EAASC,KAAT,EAAgB6D,IAAhB,EAAsB;IACtC,KAAK1E,IAAL,GAAYJ,kBAAZ;IACA,KAAKgB,MAAL,GAAcA,MAAd;IACA,KAAKC,KAAL,GAAaA,KAAb;IACA,KAAK8D,kBAAL,GAA0BD,IAA1B;IACA,KAAKpE,WAAL,GAAmBO,KAAK,CAACyD,IAAN,CAAWM,CAAC,IAAIA,CAAC,CAACtE,WAAlB,CAAnB;IACA,OAAO,IAAP;EACA;;EAEDuE,SAAS,GAAG;IACX,KAAK1E,KAAL,GAAa,KAAb;IACA,KAAKC,MAAL,GAAc,IAAd;IACA,KAAKC,OAAL,GAAe,KAAf;IACA,OAAO,IAAP;EACA;;EAEDyE,QAAQ,GAAG;IACV,KAAK3E,KAAL,GAAa,IAAb;IACA,KAAKC,MAAL,GAAc,KAAd;IACA,OAAO,IAAP;EACA;;EAED2E,UAAU,CAACC,KAAD,EAAQ;IACjB,KAAK3E,OAAL,GAAe2E,KAAf;IAEA,IAAIA,KAAJ,EAAW,OAAO,KAAKF,QAAL,EAAP;IAEX,OAAO,IAAP;EACA;;EAEDG,QAAQ,CAAChF,KAAD,EAAQ;IACf,KAAKA,KAAL,GAAaA,KAAb;IACA,OAAO,IAAP;EACA;;EAEDiF,cAAc,GAAqB;IAAA,IAApB5E,WAAoB,uEAAN,IAAM;IAClC,KAAKA,WAAL,GAAmBA,WAAnB;IACA,OAAO,IAAP;EACA;;EAED6E,aAAa,CAAC3D,UAAD,EAAa;IACzB,KAAKA,UAAL,GAAkBA,UAAlB;IACA,OAAO,IAAP;EACA;;AAha6B;AAma/B;AACA;AACA;AACA;;;AACA1B,wBAAwB,CAACsF,kBAAzB,GAA8CC,KAAK,IAAI;EACtD,MAAMC,GAAG,GAAGD,KAAK,CAACE,MAAlB;EAEA,IAAID,GAAG,KAAK,CAAZ,EAAe,OAAO,IAAP;EACf,IAAIA,GAAG,GAAG,CAAV,EAAa,OAAO,KAAP,CAJyC,CAMtD;;EACA,IAAIE,SAAS,GAAG,MAAhB,CAPsD,CAO9B;;EAExB,KAAK,IAAIjB,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGe,GAApB,EAAyBf,CAAC,EAA1B,EACC,QAAQc,KAAK,CAACI,UAAN,CAAiBlB,CAAjB,CAAR;IACC,KAAK;IAAI;IAAT;MACC,IAAIiB,SAAS,GAAG,MAAhB,EAAwB,OAAO,KAAP;MACxBA,SAAS,IAAI,MAAb;MACA;;IACD,KAAK;IAAI;IAAT;MACC,IAAIA,SAAS,GAAG,MAAhB,EAAwB,OAAO,KAAP;MACxBA,SAAS,IAAI,MAAb;MACA;;IACD,KAAK;IAAI;IAAT;MACC,IAAIA,SAAS,GAAG,MAAhB,EAAwB,OAAO,KAAP;MACxBA,SAAS,IAAI,MAAb;MACA;;IACD,KAAK;IAAI;IAAT;MACC,IAAIA,SAAS,GAAG,MAAhB,EAAwB,OAAO,KAAP;MACxBA,SAAS,IAAI,MAAb;MACA;;IACD;MACC,OAAO,KAAP;EAlBF;;EAqBD,OAAO,IAAP;AACA,CAhCD;;AAkCAE,MAAM,CAACC,OAAP,GAAiB7F,wBAAjB"},"metadata":{},"sourceType":"script"}