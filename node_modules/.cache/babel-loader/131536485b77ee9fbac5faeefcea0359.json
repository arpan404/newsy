{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nconst path = require(\"path\");\n\nconst CHAR_HASH = \"#\".charCodeAt(0);\nconst CHAR_SLASH = \"/\".charCodeAt(0);\nconst CHAR_BACKSLASH = \"\\\\\".charCodeAt(0);\nconst CHAR_A = \"A\".charCodeAt(0);\nconst CHAR_Z = \"Z\".charCodeAt(0);\nconst CHAR_LOWER_A = \"a\".charCodeAt(0);\nconst CHAR_LOWER_Z = \"z\".charCodeAt(0);\nconst CHAR_DOT = \".\".charCodeAt(0);\nconst CHAR_COLON = \":\".charCodeAt(0);\nconst posixNormalize = path.posix.normalize;\nconst winNormalize = path.win32.normalize;\n/**\n * @enum {number}\n */\n\nconst PathType = Object.freeze({\n  Empty: 0,\n  Normal: 1,\n  Relative: 2,\n  AbsoluteWin: 3,\n  AbsolutePosix: 4,\n  Internal: 5\n});\nexports.PathType = PathType;\n/**\n * @param {string} p a path\n * @returns {PathType} type of path\n */\n\nconst getType = p => {\n  switch (p.length) {\n    case 0:\n      return PathType.Empty;\n\n    case 1:\n      {\n        const c0 = p.charCodeAt(0);\n\n        switch (c0) {\n          case CHAR_DOT:\n            return PathType.Relative;\n\n          case CHAR_SLASH:\n            return PathType.AbsolutePosix;\n\n          case CHAR_HASH:\n            return PathType.Internal;\n        }\n\n        return PathType.Normal;\n      }\n\n    case 2:\n      {\n        const c0 = p.charCodeAt(0);\n\n        switch (c0) {\n          case CHAR_DOT:\n            {\n              const c1 = p.charCodeAt(1);\n\n              switch (c1) {\n                case CHAR_DOT:\n                case CHAR_SLASH:\n                  return PathType.Relative;\n              }\n\n              return PathType.Normal;\n            }\n\n          case CHAR_SLASH:\n            return PathType.AbsolutePosix;\n\n          case CHAR_HASH:\n            return PathType.Internal;\n        }\n\n        const c1 = p.charCodeAt(1);\n\n        if (c1 === CHAR_COLON) {\n          if (c0 >= CHAR_A && c0 <= CHAR_Z || c0 >= CHAR_LOWER_A && c0 <= CHAR_LOWER_Z) {\n            return PathType.AbsoluteWin;\n          }\n        }\n\n        return PathType.Normal;\n      }\n  }\n\n  const c0 = p.charCodeAt(0);\n\n  switch (c0) {\n    case CHAR_DOT:\n      {\n        const c1 = p.charCodeAt(1);\n\n        switch (c1) {\n          case CHAR_SLASH:\n            return PathType.Relative;\n\n          case CHAR_DOT:\n            {\n              const c2 = p.charCodeAt(2);\n              if (c2 === CHAR_SLASH) return PathType.Relative;\n              return PathType.Normal;\n            }\n        }\n\n        return PathType.Normal;\n      }\n\n    case CHAR_SLASH:\n      return PathType.AbsolutePosix;\n\n    case CHAR_HASH:\n      return PathType.Internal;\n  }\n\n  const c1 = p.charCodeAt(1);\n\n  if (c1 === CHAR_COLON) {\n    const c2 = p.charCodeAt(2);\n\n    if ((c2 === CHAR_BACKSLASH || c2 === CHAR_SLASH) && (c0 >= CHAR_A && c0 <= CHAR_Z || c0 >= CHAR_LOWER_A && c0 <= CHAR_LOWER_Z)) {\n      return PathType.AbsoluteWin;\n    }\n  }\n\n  return PathType.Normal;\n};\n\nexports.getType = getType;\n/**\n * @param {string} p a path\n * @returns {string} the normalized path\n */\n\nconst normalize = p => {\n  switch (getType(p)) {\n    case PathType.Empty:\n      return p;\n\n    case PathType.AbsoluteWin:\n      return winNormalize(p);\n\n    case PathType.Relative:\n      {\n        const r = posixNormalize(p);\n        return getType(r) === PathType.Relative ? r : `./${r}`;\n      }\n  }\n\n  return posixNormalize(p);\n};\n\nexports.normalize = normalize;\n/**\n * @param {string} rootPath the root path\n * @param {string | undefined} request the request path\n * @returns {string} the joined path\n */\n\nconst join = (rootPath, request) => {\n  if (!request) return normalize(rootPath);\n  const requestType = getType(request);\n\n  switch (requestType) {\n    case PathType.AbsolutePosix:\n      return posixNormalize(request);\n\n    case PathType.AbsoluteWin:\n      return winNormalize(request);\n  }\n\n  switch (getType(rootPath)) {\n    case PathType.Normal:\n    case PathType.Relative:\n    case PathType.AbsolutePosix:\n      return posixNormalize(`${rootPath}/${request}`);\n\n    case PathType.AbsoluteWin:\n      return winNormalize(`${rootPath}\\\\${request}`);\n  }\n\n  switch (requestType) {\n    case PathType.Empty:\n      return rootPath;\n\n    case PathType.Relative:\n      {\n        const r = posixNormalize(rootPath);\n        return getType(r) === PathType.Relative ? r : `./${r}`;\n      }\n  }\n\n  return posixNormalize(rootPath);\n};\n\nexports.join = join;\nconst joinCache = new Map();\n/**\n * @param {string} rootPath the root path\n * @param {string | undefined} request the request path\n * @returns {string} the joined path\n */\n\nconst cachedJoin = (rootPath, request) => {\n  let cacheEntry;\n  let cache = joinCache.get(rootPath);\n\n  if (cache === undefined) {\n    joinCache.set(rootPath, cache = new Map());\n  } else {\n    cacheEntry = cache.get(request);\n    if (cacheEntry !== undefined) return cacheEntry;\n  }\n\n  cacheEntry = join(rootPath, request);\n  cache.set(request, cacheEntry);\n  return cacheEntry;\n};\n\nexports.cachedJoin = cachedJoin;\n\nconst checkExportsFieldTarget = relativePath => {\n  let lastNonSlashIndex = 2;\n  let slashIndex = relativePath.indexOf(\"/\", 2);\n  let cd = 0;\n\n  while (slashIndex !== -1) {\n    const folder = relativePath.slice(lastNonSlashIndex, slashIndex);\n\n    switch (folder) {\n      case \"..\":\n        {\n          cd--;\n          if (cd < 0) return new Error(`Trying to access out of package scope. Requesting ${relativePath}`);\n          break;\n        }\n\n      default:\n        cd++;\n        break;\n    }\n\n    lastNonSlashIndex = slashIndex + 1;\n    slashIndex = relativePath.indexOf(\"/\", lastNonSlashIndex);\n  }\n};\n\nexports.checkExportsFieldTarget = checkExportsFieldTarget;","map":{"version":3,"names":["path","require","CHAR_HASH","charCodeAt","CHAR_SLASH","CHAR_BACKSLASH","CHAR_A","CHAR_Z","CHAR_LOWER_A","CHAR_LOWER_Z","CHAR_DOT","CHAR_COLON","posixNormalize","posix","normalize","winNormalize","win32","PathType","Object","freeze","Empty","Normal","Relative","AbsoluteWin","AbsolutePosix","Internal","exports","getType","p","length","c0","c1","c2","r","join","rootPath","request","requestType","joinCache","Map","cachedJoin","cacheEntry","cache","get","undefined","set","checkExportsFieldTarget","relativePath","lastNonSlashIndex","slashIndex","indexOf","cd","folder","slice","Error"],"sources":["/Users/arpanbhandari/Documents/cod-ing/React/newsapp/node_modules/enhanced-resolve/lib/util/path.js"],"sourcesContent":["/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\n\"use strict\";\n\nconst path = require(\"path\");\n\nconst CHAR_HASH = \"#\".charCodeAt(0);\nconst CHAR_SLASH = \"/\".charCodeAt(0);\nconst CHAR_BACKSLASH = \"\\\\\".charCodeAt(0);\nconst CHAR_A = \"A\".charCodeAt(0);\nconst CHAR_Z = \"Z\".charCodeAt(0);\nconst CHAR_LOWER_A = \"a\".charCodeAt(0);\nconst CHAR_LOWER_Z = \"z\".charCodeAt(0);\nconst CHAR_DOT = \".\".charCodeAt(0);\nconst CHAR_COLON = \":\".charCodeAt(0);\n\nconst posixNormalize = path.posix.normalize;\nconst winNormalize = path.win32.normalize;\n\n/**\n * @enum {number}\n */\nconst PathType = Object.freeze({\n\tEmpty: 0,\n\tNormal: 1,\n\tRelative: 2,\n\tAbsoluteWin: 3,\n\tAbsolutePosix: 4,\n\tInternal: 5\n});\nexports.PathType = PathType;\n\n/**\n * @param {string} p a path\n * @returns {PathType} type of path\n */\nconst getType = p => {\n\tswitch (p.length) {\n\t\tcase 0:\n\t\t\treturn PathType.Empty;\n\t\tcase 1: {\n\t\t\tconst c0 = p.charCodeAt(0);\n\t\t\tswitch (c0) {\n\t\t\t\tcase CHAR_DOT:\n\t\t\t\t\treturn PathType.Relative;\n\t\t\t\tcase CHAR_SLASH:\n\t\t\t\t\treturn PathType.AbsolutePosix;\n\t\t\t\tcase CHAR_HASH:\n\t\t\t\t\treturn PathType.Internal;\n\t\t\t}\n\t\t\treturn PathType.Normal;\n\t\t}\n\t\tcase 2: {\n\t\t\tconst c0 = p.charCodeAt(0);\n\t\t\tswitch (c0) {\n\t\t\t\tcase CHAR_DOT: {\n\t\t\t\t\tconst c1 = p.charCodeAt(1);\n\t\t\t\t\tswitch (c1) {\n\t\t\t\t\t\tcase CHAR_DOT:\n\t\t\t\t\t\tcase CHAR_SLASH:\n\t\t\t\t\t\t\treturn PathType.Relative;\n\t\t\t\t\t}\n\t\t\t\t\treturn PathType.Normal;\n\t\t\t\t}\n\t\t\t\tcase CHAR_SLASH:\n\t\t\t\t\treturn PathType.AbsolutePosix;\n\t\t\t\tcase CHAR_HASH:\n\t\t\t\t\treturn PathType.Internal;\n\t\t\t}\n\t\t\tconst c1 = p.charCodeAt(1);\n\t\t\tif (c1 === CHAR_COLON) {\n\t\t\t\tif (\n\t\t\t\t\t(c0 >= CHAR_A && c0 <= CHAR_Z) ||\n\t\t\t\t\t(c0 >= CHAR_LOWER_A && c0 <= CHAR_LOWER_Z)\n\t\t\t\t) {\n\t\t\t\t\treturn PathType.AbsoluteWin;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn PathType.Normal;\n\t\t}\n\t}\n\tconst c0 = p.charCodeAt(0);\n\tswitch (c0) {\n\t\tcase CHAR_DOT: {\n\t\t\tconst c1 = p.charCodeAt(1);\n\t\t\tswitch (c1) {\n\t\t\t\tcase CHAR_SLASH:\n\t\t\t\t\treturn PathType.Relative;\n\t\t\t\tcase CHAR_DOT: {\n\t\t\t\t\tconst c2 = p.charCodeAt(2);\n\t\t\t\t\tif (c2 === CHAR_SLASH) return PathType.Relative;\n\t\t\t\t\treturn PathType.Normal;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn PathType.Normal;\n\t\t}\n\t\tcase CHAR_SLASH:\n\t\t\treturn PathType.AbsolutePosix;\n\t\tcase CHAR_HASH:\n\t\t\treturn PathType.Internal;\n\t}\n\tconst c1 = p.charCodeAt(1);\n\tif (c1 === CHAR_COLON) {\n\t\tconst c2 = p.charCodeAt(2);\n\t\tif (\n\t\t\t(c2 === CHAR_BACKSLASH || c2 === CHAR_SLASH) &&\n\t\t\t((c0 >= CHAR_A && c0 <= CHAR_Z) ||\n\t\t\t\t(c0 >= CHAR_LOWER_A && c0 <= CHAR_LOWER_Z))\n\t\t) {\n\t\t\treturn PathType.AbsoluteWin;\n\t\t}\n\t}\n\treturn PathType.Normal;\n};\nexports.getType = getType;\n\n/**\n * @param {string} p a path\n * @returns {string} the normalized path\n */\nconst normalize = p => {\n\tswitch (getType(p)) {\n\t\tcase PathType.Empty:\n\t\t\treturn p;\n\t\tcase PathType.AbsoluteWin:\n\t\t\treturn winNormalize(p);\n\t\tcase PathType.Relative: {\n\t\t\tconst r = posixNormalize(p);\n\t\t\treturn getType(r) === PathType.Relative ? r : `./${r}`;\n\t\t}\n\t}\n\treturn posixNormalize(p);\n};\nexports.normalize = normalize;\n\n/**\n * @param {string} rootPath the root path\n * @param {string | undefined} request the request path\n * @returns {string} the joined path\n */\nconst join = (rootPath, request) => {\n\tif (!request) return normalize(rootPath);\n\tconst requestType = getType(request);\n\tswitch (requestType) {\n\t\tcase PathType.AbsolutePosix:\n\t\t\treturn posixNormalize(request);\n\t\tcase PathType.AbsoluteWin:\n\t\t\treturn winNormalize(request);\n\t}\n\tswitch (getType(rootPath)) {\n\t\tcase PathType.Normal:\n\t\tcase PathType.Relative:\n\t\tcase PathType.AbsolutePosix:\n\t\t\treturn posixNormalize(`${rootPath}/${request}`);\n\t\tcase PathType.AbsoluteWin:\n\t\t\treturn winNormalize(`${rootPath}\\\\${request}`);\n\t}\n\tswitch (requestType) {\n\t\tcase PathType.Empty:\n\t\t\treturn rootPath;\n\t\tcase PathType.Relative: {\n\t\t\tconst r = posixNormalize(rootPath);\n\t\t\treturn getType(r) === PathType.Relative ? r : `./${r}`;\n\t\t}\n\t}\n\treturn posixNormalize(rootPath);\n};\nexports.join = join;\n\nconst joinCache = new Map();\n\n/**\n * @param {string} rootPath the root path\n * @param {string | undefined} request the request path\n * @returns {string} the joined path\n */\nconst cachedJoin = (rootPath, request) => {\n\tlet cacheEntry;\n\tlet cache = joinCache.get(rootPath);\n\tif (cache === undefined) {\n\t\tjoinCache.set(rootPath, (cache = new Map()));\n\t} else {\n\t\tcacheEntry = cache.get(request);\n\t\tif (cacheEntry !== undefined) return cacheEntry;\n\t}\n\tcacheEntry = join(rootPath, request);\n\tcache.set(request, cacheEntry);\n\treturn cacheEntry;\n};\nexports.cachedJoin = cachedJoin;\n\nconst checkExportsFieldTarget = relativePath => {\n\tlet lastNonSlashIndex = 2;\n\tlet slashIndex = relativePath.indexOf(\"/\", 2);\n\tlet cd = 0;\n\n\twhile (slashIndex !== -1) {\n\t\tconst folder = relativePath.slice(lastNonSlashIndex, slashIndex);\n\n\t\tswitch (folder) {\n\t\t\tcase \"..\": {\n\t\t\t\tcd--;\n\t\t\t\tif (cd < 0)\n\t\t\t\t\treturn new Error(\n\t\t\t\t\t\t`Trying to access out of package scope. Requesting ${relativePath}`\n\t\t\t\t\t);\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tdefault:\n\t\t\t\tcd++;\n\t\t\t\tbreak;\n\t\t}\n\n\t\tlastNonSlashIndex = slashIndex + 1;\n\t\tslashIndex = relativePath.indexOf(\"/\", lastNonSlashIndex);\n\t}\n};\nexports.checkExportsFieldTarget = checkExportsFieldTarget;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}