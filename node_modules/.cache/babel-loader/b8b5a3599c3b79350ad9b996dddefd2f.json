{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nconst {\n  RawSource\n} = require(\"webpack-sources\");\n\nconst {\n  UsageState\n} = require(\"../ExportsInfo\");\n\nconst Generator = require(\"../Generator\");\n\nconst InitFragment = require(\"../InitFragment\");\n\nconst RuntimeGlobals = require(\"../RuntimeGlobals\");\n\nconst Template = require(\"../Template\");\n\nconst ModuleDependency = require(\"../dependencies/ModuleDependency\");\n\nconst WebAssemblyExportImportedDependency = require(\"../dependencies/WebAssemblyExportImportedDependency\");\n\nconst WebAssemblyImportDependency = require(\"../dependencies/WebAssemblyImportDependency\");\n/** @typedef {import(\"webpack-sources\").Source} Source */\n\n/** @typedef {import(\"../Dependency\")} Dependency */\n\n/** @typedef {import(\"../DependencyTemplates\")} DependencyTemplates */\n\n/** @typedef {import(\"../Generator\").GenerateContext} GenerateContext */\n\n/** @typedef {import(\"../NormalModule\")} NormalModule */\n\n/** @typedef {import(\"../RuntimeTemplate\")} RuntimeTemplate */\n\n\nconst TYPES = new Set([\"webassembly\"]);\n\nclass WebAssemblyJavascriptGenerator extends Generator {\n  /**\n   * @param {NormalModule} module fresh module\n   * @returns {Set<string>} available types (do not mutate)\n   */\n  getTypes(module) {\n    return TYPES;\n  }\n  /**\n   * @param {NormalModule} module the module\n   * @param {string=} type source type\n   * @returns {number} estimate size of the module\n   */\n\n\n  getSize(module, type) {\n    return 95 + module.dependencies.length * 5;\n  }\n  /**\n   * @param {NormalModule} module module for which the code should be generated\n   * @param {GenerateContext} generateContext context for generate\n   * @returns {Source} generated code\n   */\n\n\n  generate(module, generateContext) {\n    const {\n      runtimeTemplate,\n      moduleGraph,\n      chunkGraph,\n      runtimeRequirements,\n      runtime\n    } = generateContext;\n    /** @type {InitFragment[]} */\n\n    const initFragments = [];\n    const exportsInfo = moduleGraph.getExportsInfo(module);\n    let needExportsCopy = false;\n    const importedModules = new Map();\n    const initParams = [];\n    let index = 0;\n\n    for (const dep of module.dependencies) {\n      const moduleDep = dep && dep instanceof ModuleDependency ? dep : undefined;\n\n      if (moduleGraph.getModule(dep)) {\n        let importData = importedModules.get(moduleGraph.getModule(dep));\n\n        if (importData === undefined) {\n          importedModules.set(moduleGraph.getModule(dep), importData = {\n            importVar: `m${index}`,\n            index,\n            request: moduleDep && moduleDep.userRequest || undefined,\n            names: new Set(),\n            reexports: []\n          });\n          index++;\n        }\n\n        if (dep instanceof WebAssemblyImportDependency) {\n          importData.names.add(dep.name);\n\n          if (dep.description.type === \"GlobalType\") {\n            const exportName = dep.name;\n            const importedModule = moduleGraph.getModule(dep);\n\n            if (importedModule) {\n              const usedName = moduleGraph.getExportsInfo(importedModule).getUsedName(exportName, runtime);\n\n              if (usedName) {\n                initParams.push(runtimeTemplate.exportFromImport({\n                  moduleGraph,\n                  module: importedModule,\n                  request: dep.request,\n                  importVar: importData.importVar,\n                  originModule: module,\n                  exportName: dep.name,\n                  asiSafe: true,\n                  isCall: false,\n                  callContext: null,\n                  defaultInterop: true,\n                  initFragments,\n                  runtime,\n                  runtimeRequirements\n                }));\n              }\n            }\n          }\n        }\n\n        if (dep instanceof WebAssemblyExportImportedDependency) {\n          importData.names.add(dep.name);\n          const usedName = moduleGraph.getExportsInfo(module).getUsedName(dep.exportName, runtime);\n\n          if (usedName) {\n            runtimeRequirements.add(RuntimeGlobals.exports);\n            const exportProp = `${module.exportsArgument}[${JSON.stringify(usedName)}]`;\n            const defineStatement = Template.asString([`${exportProp} = ${runtimeTemplate.exportFromImport({\n              moduleGraph,\n              module: moduleGraph.getModule(dep),\n              request: dep.request,\n              importVar: importData.importVar,\n              originModule: module,\n              exportName: dep.name,\n              asiSafe: true,\n              isCall: false,\n              callContext: null,\n              defaultInterop: true,\n              initFragments,\n              runtime,\n              runtimeRequirements\n            })};`, `if(WebAssembly.Global) ${exportProp} = ` + `new WebAssembly.Global({ value: ${JSON.stringify(dep.valueType)} }, ${exportProp});`]);\n            importData.reexports.push(defineStatement);\n            needExportsCopy = true;\n          }\n        }\n      }\n    }\n\n    const importsCode = Template.asString(Array.from(importedModules, _ref => {\n      let [module, {\n        importVar,\n        request,\n        reexports\n      }] = _ref;\n      const importStatement = runtimeTemplate.importStatement({\n        module,\n        chunkGraph,\n        request,\n        importVar,\n        originModule: module,\n        runtimeRequirements\n      });\n      return importStatement[0] + importStatement[1] + reexports.join(\"\\n\");\n    }));\n    const copyAllExports = exportsInfo.otherExportsInfo.getUsed(runtime) === UsageState.Unused && !needExportsCopy; // need these globals\n\n    runtimeRequirements.add(RuntimeGlobals.module);\n    runtimeRequirements.add(RuntimeGlobals.moduleId);\n    runtimeRequirements.add(RuntimeGlobals.wasmInstances);\n\n    if (exportsInfo.otherExportsInfo.getUsed(runtime) !== UsageState.Unused) {\n      runtimeRequirements.add(RuntimeGlobals.makeNamespaceObject);\n      runtimeRequirements.add(RuntimeGlobals.exports);\n    }\n\n    if (!copyAllExports) {\n      runtimeRequirements.add(RuntimeGlobals.exports);\n    } // create source\n\n\n    const source = new RawSource(['\"use strict\";', \"// Instantiate WebAssembly module\", `var wasmExports = ${RuntimeGlobals.wasmInstances}[${module.moduleArgument}.id];`, exportsInfo.otherExportsInfo.getUsed(runtime) !== UsageState.Unused ? `${RuntimeGlobals.makeNamespaceObject}(${module.exportsArgument});` : \"\", // this must be before import for circular dependencies\n    \"// export exports from WebAssembly module\", copyAllExports ? `${module.moduleArgument}.exports = wasmExports;` : \"for(var name in wasmExports) \" + `if(name) ` + `${module.exportsArgument}[name] = wasmExports[name];`, \"// exec imports from WebAssembly module (for esm order)\", importsCode, \"\", \"// exec wasm module\", `wasmExports[\"\"](${initParams.join(\", \")})`].join(\"\\n\"));\n    return InitFragment.addToSource(source, initFragments, generateContext);\n  }\n\n}\n\nmodule.exports = WebAssemblyJavascriptGenerator;","map":{"version":3,"names":["RawSource","require","UsageState","Generator","InitFragment","RuntimeGlobals","Template","ModuleDependency","WebAssemblyExportImportedDependency","WebAssemblyImportDependency","TYPES","Set","WebAssemblyJavascriptGenerator","getTypes","module","getSize","type","dependencies","length","generate","generateContext","runtimeTemplate","moduleGraph","chunkGraph","runtimeRequirements","runtime","initFragments","exportsInfo","getExportsInfo","needExportsCopy","importedModules","Map","initParams","index","dep","moduleDep","undefined","getModule","importData","get","set","importVar","request","userRequest","names","reexports","add","name","description","exportName","importedModule","usedName","getUsedName","push","exportFromImport","originModule","asiSafe","isCall","callContext","defaultInterop","exports","exportProp","exportsArgument","JSON","stringify","defineStatement","asString","valueType","importsCode","Array","from","importStatement","join","copyAllExports","otherExportsInfo","getUsed","Unused","moduleId","wasmInstances","makeNamespaceObject","source","moduleArgument","addToSource"],"sources":["/Users/arpanbhandari/Documents/cod-ing/React/newsapp/node_modules/webpack/lib/wasm-sync/WebAssemblyJavascriptGenerator.js"],"sourcesContent":["/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\n\"use strict\";\n\nconst { RawSource } = require(\"webpack-sources\");\nconst { UsageState } = require(\"../ExportsInfo\");\nconst Generator = require(\"../Generator\");\nconst InitFragment = require(\"../InitFragment\");\nconst RuntimeGlobals = require(\"../RuntimeGlobals\");\nconst Template = require(\"../Template\");\nconst ModuleDependency = require(\"../dependencies/ModuleDependency\");\nconst WebAssemblyExportImportedDependency = require(\"../dependencies/WebAssemblyExportImportedDependency\");\nconst WebAssemblyImportDependency = require(\"../dependencies/WebAssemblyImportDependency\");\n\n/** @typedef {import(\"webpack-sources\").Source} Source */\n/** @typedef {import(\"../Dependency\")} Dependency */\n/** @typedef {import(\"../DependencyTemplates\")} DependencyTemplates */\n/** @typedef {import(\"../Generator\").GenerateContext} GenerateContext */\n/** @typedef {import(\"../NormalModule\")} NormalModule */\n/** @typedef {import(\"../RuntimeTemplate\")} RuntimeTemplate */\n\nconst TYPES = new Set([\"webassembly\"]);\n\nclass WebAssemblyJavascriptGenerator extends Generator {\n\t/**\n\t * @param {NormalModule} module fresh module\n\t * @returns {Set<string>} available types (do not mutate)\n\t */\n\tgetTypes(module) {\n\t\treturn TYPES;\n\t}\n\n\t/**\n\t * @param {NormalModule} module the module\n\t * @param {string=} type source type\n\t * @returns {number} estimate size of the module\n\t */\n\tgetSize(module, type) {\n\t\treturn 95 + module.dependencies.length * 5;\n\t}\n\n\t/**\n\t * @param {NormalModule} module module for which the code should be generated\n\t * @param {GenerateContext} generateContext context for generate\n\t * @returns {Source} generated code\n\t */\n\tgenerate(module, generateContext) {\n\t\tconst {\n\t\t\truntimeTemplate,\n\t\t\tmoduleGraph,\n\t\t\tchunkGraph,\n\t\t\truntimeRequirements,\n\t\t\truntime\n\t\t} = generateContext;\n\t\t/** @type {InitFragment[]} */\n\t\tconst initFragments = [];\n\n\t\tconst exportsInfo = moduleGraph.getExportsInfo(module);\n\n\t\tlet needExportsCopy = false;\n\t\tconst importedModules = new Map();\n\t\tconst initParams = [];\n\t\tlet index = 0;\n\t\tfor (const dep of module.dependencies) {\n\t\t\tconst moduleDep =\n\t\t\t\tdep && dep instanceof ModuleDependency ? dep : undefined;\n\t\t\tif (moduleGraph.getModule(dep)) {\n\t\t\t\tlet importData = importedModules.get(moduleGraph.getModule(dep));\n\t\t\t\tif (importData === undefined) {\n\t\t\t\t\timportedModules.set(\n\t\t\t\t\t\tmoduleGraph.getModule(dep),\n\t\t\t\t\t\t(importData = {\n\t\t\t\t\t\t\timportVar: `m${index}`,\n\t\t\t\t\t\t\tindex,\n\t\t\t\t\t\t\trequest: (moduleDep && moduleDep.userRequest) || undefined,\n\t\t\t\t\t\t\tnames: new Set(),\n\t\t\t\t\t\t\treexports: []\n\t\t\t\t\t\t})\n\t\t\t\t\t);\n\t\t\t\t\tindex++;\n\t\t\t\t}\n\t\t\t\tif (dep instanceof WebAssemblyImportDependency) {\n\t\t\t\t\timportData.names.add(dep.name);\n\t\t\t\t\tif (dep.description.type === \"GlobalType\") {\n\t\t\t\t\t\tconst exportName = dep.name;\n\t\t\t\t\t\tconst importedModule = moduleGraph.getModule(dep);\n\n\t\t\t\t\t\tif (importedModule) {\n\t\t\t\t\t\t\tconst usedName = moduleGraph\n\t\t\t\t\t\t\t\t.getExportsInfo(importedModule)\n\t\t\t\t\t\t\t\t.getUsedName(exportName, runtime);\n\t\t\t\t\t\t\tif (usedName) {\n\t\t\t\t\t\t\t\tinitParams.push(\n\t\t\t\t\t\t\t\t\truntimeTemplate.exportFromImport({\n\t\t\t\t\t\t\t\t\t\tmoduleGraph,\n\t\t\t\t\t\t\t\t\t\tmodule: importedModule,\n\t\t\t\t\t\t\t\t\t\trequest: dep.request,\n\t\t\t\t\t\t\t\t\t\timportVar: importData.importVar,\n\t\t\t\t\t\t\t\t\t\toriginModule: module,\n\t\t\t\t\t\t\t\t\t\texportName: dep.name,\n\t\t\t\t\t\t\t\t\t\tasiSafe: true,\n\t\t\t\t\t\t\t\t\t\tisCall: false,\n\t\t\t\t\t\t\t\t\t\tcallContext: null,\n\t\t\t\t\t\t\t\t\t\tdefaultInterop: true,\n\t\t\t\t\t\t\t\t\t\tinitFragments,\n\t\t\t\t\t\t\t\t\t\truntime,\n\t\t\t\t\t\t\t\t\t\truntimeRequirements\n\t\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (dep instanceof WebAssemblyExportImportedDependency) {\n\t\t\t\t\timportData.names.add(dep.name);\n\t\t\t\t\tconst usedName = moduleGraph\n\t\t\t\t\t\t.getExportsInfo(module)\n\t\t\t\t\t\t.getUsedName(dep.exportName, runtime);\n\t\t\t\t\tif (usedName) {\n\t\t\t\t\t\truntimeRequirements.add(RuntimeGlobals.exports);\n\t\t\t\t\t\tconst exportProp = `${module.exportsArgument}[${JSON.stringify(\n\t\t\t\t\t\t\tusedName\n\t\t\t\t\t\t)}]`;\n\t\t\t\t\t\tconst defineStatement = Template.asString([\n\t\t\t\t\t\t\t`${exportProp} = ${runtimeTemplate.exportFromImport({\n\t\t\t\t\t\t\t\tmoduleGraph,\n\t\t\t\t\t\t\t\tmodule: moduleGraph.getModule(dep),\n\t\t\t\t\t\t\t\trequest: dep.request,\n\t\t\t\t\t\t\t\timportVar: importData.importVar,\n\t\t\t\t\t\t\t\toriginModule: module,\n\t\t\t\t\t\t\t\texportName: dep.name,\n\t\t\t\t\t\t\t\tasiSafe: true,\n\t\t\t\t\t\t\t\tisCall: false,\n\t\t\t\t\t\t\t\tcallContext: null,\n\t\t\t\t\t\t\t\tdefaultInterop: true,\n\t\t\t\t\t\t\t\tinitFragments,\n\t\t\t\t\t\t\t\truntime,\n\t\t\t\t\t\t\t\truntimeRequirements\n\t\t\t\t\t\t\t})};`,\n\t\t\t\t\t\t\t`if(WebAssembly.Global) ${exportProp} = ` +\n\t\t\t\t\t\t\t\t`new WebAssembly.Global({ value: ${JSON.stringify(\n\t\t\t\t\t\t\t\t\tdep.valueType\n\t\t\t\t\t\t\t\t)} }, ${exportProp});`\n\t\t\t\t\t\t]);\n\t\t\t\t\t\timportData.reexports.push(defineStatement);\n\t\t\t\t\t\tneedExportsCopy = true;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tconst importsCode = Template.asString(\n\t\t\tArray.from(\n\t\t\t\timportedModules,\n\t\t\t\t([module, { importVar, request, reexports }]) => {\n\t\t\t\t\tconst importStatement = runtimeTemplate.importStatement({\n\t\t\t\t\t\tmodule,\n\t\t\t\t\t\tchunkGraph,\n\t\t\t\t\t\trequest,\n\t\t\t\t\t\timportVar,\n\t\t\t\t\t\toriginModule: module,\n\t\t\t\t\t\truntimeRequirements\n\t\t\t\t\t});\n\t\t\t\t\treturn importStatement[0] + importStatement[1] + reexports.join(\"\\n\");\n\t\t\t\t}\n\t\t\t)\n\t\t);\n\n\t\tconst copyAllExports =\n\t\t\texportsInfo.otherExportsInfo.getUsed(runtime) === UsageState.Unused &&\n\t\t\t!needExportsCopy;\n\n\t\t// need these globals\n\t\truntimeRequirements.add(RuntimeGlobals.module);\n\t\truntimeRequirements.add(RuntimeGlobals.moduleId);\n\t\truntimeRequirements.add(RuntimeGlobals.wasmInstances);\n\t\tif (exportsInfo.otherExportsInfo.getUsed(runtime) !== UsageState.Unused) {\n\t\t\truntimeRequirements.add(RuntimeGlobals.makeNamespaceObject);\n\t\t\truntimeRequirements.add(RuntimeGlobals.exports);\n\t\t}\n\t\tif (!copyAllExports) {\n\t\t\truntimeRequirements.add(RuntimeGlobals.exports);\n\t\t}\n\n\t\t// create source\n\t\tconst source = new RawSource(\n\t\t\t[\n\t\t\t\t'\"use strict\";',\n\t\t\t\t\"// Instantiate WebAssembly module\",\n\t\t\t\t`var wasmExports = ${RuntimeGlobals.wasmInstances}[${module.moduleArgument}.id];`,\n\n\t\t\t\texportsInfo.otherExportsInfo.getUsed(runtime) !== UsageState.Unused\n\t\t\t\t\t? `${RuntimeGlobals.makeNamespaceObject}(${module.exportsArgument});`\n\t\t\t\t\t: \"\",\n\n\t\t\t\t// this must be before import for circular dependencies\n\t\t\t\t\"// export exports from WebAssembly module\",\n\t\t\t\tcopyAllExports\n\t\t\t\t\t? `${module.moduleArgument}.exports = wasmExports;`\n\t\t\t\t\t: \"for(var name in wasmExports) \" +\n\t\t\t\t\t  `if(name) ` +\n\t\t\t\t\t  `${module.exportsArgument}[name] = wasmExports[name];`,\n\t\t\t\t\"// exec imports from WebAssembly module (for esm order)\",\n\t\t\t\timportsCode,\n\t\t\t\t\"\",\n\t\t\t\t\"// exec wasm module\",\n\t\t\t\t`wasmExports[\"\"](${initParams.join(\", \")})`\n\t\t\t].join(\"\\n\")\n\t\t);\n\t\treturn InitFragment.addToSource(source, initFragments, generateContext);\n\t}\n}\n\nmodule.exports = WebAssemblyJavascriptGenerator;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}