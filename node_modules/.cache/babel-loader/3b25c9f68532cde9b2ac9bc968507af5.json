{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nconst makeSerializable = require(\"./util/makeSerializable\");\n/** @typedef {import(\"./AsyncDependenciesBlock\")} AsyncDependenciesBlock */\n\n/** @typedef {import(\"./ChunkGraph\")} ChunkGraph */\n\n/** @typedef {import(\"./ChunkGroup\")} ChunkGroup */\n\n/** @typedef {import(\"./Dependency\")} Dependency */\n\n/** @typedef {import(\"./Dependency\").UpdateHashContext} UpdateHashContext */\n\n/** @typedef {import(\"./util/Hash\")} Hash */\n\n/** @typedef {(d: Dependency) => boolean} DependencyFilterFunction */\n\n\nclass DependenciesBlock {\n  constructor() {\n    /** @type {Dependency[]} */\n    this.dependencies = [];\n    /** @type {AsyncDependenciesBlock[]} */\n\n    this.blocks = [];\n    /** @type {DependenciesBlock} */\n\n    this.parent = undefined;\n  }\n\n  getRootBlock() {\n    /** @type {DependenciesBlock} */\n    let current = this;\n\n    while (current.parent) current = current.parent;\n\n    return current;\n  }\n  /**\n   * Adds a DependencyBlock to DependencyBlock relationship.\n   * This is used for when a Module has a AsyncDependencyBlock tie (for code-splitting)\n   *\n   * @param {AsyncDependenciesBlock} block block being added\n   * @returns {void}\n   */\n\n\n  addBlock(block) {\n    this.blocks.push(block);\n    block.parent = this;\n  }\n  /**\n   * @param {Dependency} dependency dependency being tied to block.\n   * This is an \"edge\" pointing to another \"node\" on module graph.\n   * @returns {void}\n   */\n\n\n  addDependency(dependency) {\n    this.dependencies.push(dependency);\n  }\n  /**\n   * @param {Dependency} dependency dependency being removed\n   * @returns {void}\n   */\n\n\n  removeDependency(dependency) {\n    const idx = this.dependencies.indexOf(dependency);\n\n    if (idx >= 0) {\n      this.dependencies.splice(idx, 1);\n    }\n  }\n  /**\n   * Removes all dependencies and blocks\n   * @returns {void}\n   */\n\n\n  clearDependenciesAndBlocks() {\n    this.dependencies.length = 0;\n    this.blocks.length = 0;\n  }\n  /**\n   * @param {Hash} hash the hash used to track dependencies\n   * @param {UpdateHashContext} context context\n   * @returns {void}\n   */\n\n\n  updateHash(hash, context) {\n    for (const dep of this.dependencies) {\n      dep.updateHash(hash, context);\n    }\n\n    for (const block of this.blocks) {\n      block.updateHash(hash, context);\n    }\n  }\n\n  serialize(_ref) {\n    let {\n      write\n    } = _ref;\n    write(this.dependencies);\n    write(this.blocks);\n  }\n\n  deserialize(_ref2) {\n    let {\n      read\n    } = _ref2;\n    this.dependencies = read();\n    this.blocks = read();\n\n    for (const block of this.blocks) {\n      block.parent = this;\n    }\n  }\n\n}\n\nmakeSerializable(DependenciesBlock, \"webpack/lib/DependenciesBlock\");\nmodule.exports = DependenciesBlock;","map":{"version":3,"names":["makeSerializable","require","DependenciesBlock","constructor","dependencies","blocks","parent","undefined","getRootBlock","current","addBlock","block","push","addDependency","dependency","removeDependency","idx","indexOf","splice","clearDependenciesAndBlocks","length","updateHash","hash","context","dep","serialize","write","deserialize","read","module","exports"],"sources":["/Users/arpanbhandari/Documents/cod-ing/React/newsapp/node_modules/webpack/lib/DependenciesBlock.js"],"sourcesContent":["/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\n\"use strict\";\n\nconst makeSerializable = require(\"./util/makeSerializable\");\n\n/** @typedef {import(\"./AsyncDependenciesBlock\")} AsyncDependenciesBlock */\n/** @typedef {import(\"./ChunkGraph\")} ChunkGraph */\n/** @typedef {import(\"./ChunkGroup\")} ChunkGroup */\n/** @typedef {import(\"./Dependency\")} Dependency */\n/** @typedef {import(\"./Dependency\").UpdateHashContext} UpdateHashContext */\n/** @typedef {import(\"./util/Hash\")} Hash */\n\n/** @typedef {(d: Dependency) => boolean} DependencyFilterFunction */\n\nclass DependenciesBlock {\n\tconstructor() {\n\t\t/** @type {Dependency[]} */\n\t\tthis.dependencies = [];\n\t\t/** @type {AsyncDependenciesBlock[]} */\n\t\tthis.blocks = [];\n\t\t/** @type {DependenciesBlock} */\n\t\tthis.parent = undefined;\n\t}\n\n\tgetRootBlock() {\n\t\t/** @type {DependenciesBlock} */\n\t\tlet current = this;\n\t\twhile (current.parent) current = current.parent;\n\t\treturn current;\n\t}\n\n\t/**\n\t * Adds a DependencyBlock to DependencyBlock relationship.\n\t * This is used for when a Module has a AsyncDependencyBlock tie (for code-splitting)\n\t *\n\t * @param {AsyncDependenciesBlock} block block being added\n\t * @returns {void}\n\t */\n\taddBlock(block) {\n\t\tthis.blocks.push(block);\n\t\tblock.parent = this;\n\t}\n\n\t/**\n\t * @param {Dependency} dependency dependency being tied to block.\n\t * This is an \"edge\" pointing to another \"node\" on module graph.\n\t * @returns {void}\n\t */\n\taddDependency(dependency) {\n\t\tthis.dependencies.push(dependency);\n\t}\n\n\t/**\n\t * @param {Dependency} dependency dependency being removed\n\t * @returns {void}\n\t */\n\tremoveDependency(dependency) {\n\t\tconst idx = this.dependencies.indexOf(dependency);\n\t\tif (idx >= 0) {\n\t\t\tthis.dependencies.splice(idx, 1);\n\t\t}\n\t}\n\n\t/**\n\t * Removes all dependencies and blocks\n\t * @returns {void}\n\t */\n\tclearDependenciesAndBlocks() {\n\t\tthis.dependencies.length = 0;\n\t\tthis.blocks.length = 0;\n\t}\n\n\t/**\n\t * @param {Hash} hash the hash used to track dependencies\n\t * @param {UpdateHashContext} context context\n\t * @returns {void}\n\t */\n\tupdateHash(hash, context) {\n\t\tfor (const dep of this.dependencies) {\n\t\t\tdep.updateHash(hash, context);\n\t\t}\n\t\tfor (const block of this.blocks) {\n\t\t\tblock.updateHash(hash, context);\n\t\t}\n\t}\n\n\tserialize({ write }) {\n\t\twrite(this.dependencies);\n\t\twrite(this.blocks);\n\t}\n\n\tdeserialize({ read }) {\n\t\tthis.dependencies = read();\n\t\tthis.blocks = read();\n\t\tfor (const block of this.blocks) {\n\t\t\tblock.parent = this;\n\t\t}\n\t}\n}\n\nmakeSerializable(DependenciesBlock, \"webpack/lib/DependenciesBlock\");\n\nmodule.exports = DependenciesBlock;\n"],"mappings":"AAAA;AACA;AACA;AACA;AAEA;;AAEA,MAAMA,gBAAgB,GAAGC,OAAO,CAAC,yBAAD,CAAhC;AAEA;;AACA;;AACA;;AACA;;AACA;;AACA;;AAEA;;;AAEA,MAAMC,iBAAN,CAAwB;EACvBC,WAAW,GAAG;IACb;IACA,KAAKC,YAAL,GAAoB,EAApB;IACA;;IACA,KAAKC,MAAL,GAAc,EAAd;IACA;;IACA,KAAKC,MAAL,GAAcC,SAAd;EACA;;EAEDC,YAAY,GAAG;IACd;IACA,IAAIC,OAAO,GAAG,IAAd;;IACA,OAAOA,OAAO,CAACH,MAAf,EAAuBG,OAAO,GAAGA,OAAO,CAACH,MAAlB;;IACvB,OAAOG,OAAP;EACA;EAED;AACD;AACA;AACA;AACA;AACA;AACA;;;EACCC,QAAQ,CAACC,KAAD,EAAQ;IACf,KAAKN,MAAL,CAAYO,IAAZ,CAAiBD,KAAjB;IACAA,KAAK,CAACL,MAAN,GAAe,IAAf;EACA;EAED;AACD;AACA;AACA;AACA;;;EACCO,aAAa,CAACC,UAAD,EAAa;IACzB,KAAKV,YAAL,CAAkBQ,IAAlB,CAAuBE,UAAvB;EACA;EAED;AACD;AACA;AACA;;;EACCC,gBAAgB,CAACD,UAAD,EAAa;IAC5B,MAAME,GAAG,GAAG,KAAKZ,YAAL,CAAkBa,OAAlB,CAA0BH,UAA1B,CAAZ;;IACA,IAAIE,GAAG,IAAI,CAAX,EAAc;MACb,KAAKZ,YAAL,CAAkBc,MAAlB,CAAyBF,GAAzB,EAA8B,CAA9B;IACA;EACD;EAED;AACD;AACA;AACA;;;EACCG,0BAA0B,GAAG;IAC5B,KAAKf,YAAL,CAAkBgB,MAAlB,GAA2B,CAA3B;IACA,KAAKf,MAAL,CAAYe,MAAZ,GAAqB,CAArB;EACA;EAED;AACD;AACA;AACA;AACA;;;EACCC,UAAU,CAACC,IAAD,EAAOC,OAAP,EAAgB;IACzB,KAAK,MAAMC,GAAX,IAAkB,KAAKpB,YAAvB,EAAqC;MACpCoB,GAAG,CAACH,UAAJ,CAAeC,IAAf,EAAqBC,OAArB;IACA;;IACD,KAAK,MAAMZ,KAAX,IAAoB,KAAKN,MAAzB,EAAiC;MAChCM,KAAK,CAACU,UAAN,CAAiBC,IAAjB,EAAuBC,OAAvB;IACA;EACD;;EAEDE,SAAS,OAAY;IAAA,IAAX;MAAEC;IAAF,CAAW;IACpBA,KAAK,CAAC,KAAKtB,YAAN,CAAL;IACAsB,KAAK,CAAC,KAAKrB,MAAN,CAAL;EACA;;EAEDsB,WAAW,QAAW;IAAA,IAAV;MAAEC;IAAF,CAAU;IACrB,KAAKxB,YAAL,GAAoBwB,IAAI,EAAxB;IACA,KAAKvB,MAAL,GAAcuB,IAAI,EAAlB;;IACA,KAAK,MAAMjB,KAAX,IAAoB,KAAKN,MAAzB,EAAiC;MAChCM,KAAK,CAACL,MAAN,GAAe,IAAf;IACA;EACD;;AAnFsB;;AAsFxBN,gBAAgB,CAACE,iBAAD,EAAoB,+BAApB,CAAhB;AAEA2B,MAAM,CAACC,OAAP,GAAiB5B,iBAAjB"},"metadata":{},"sourceType":"script"}