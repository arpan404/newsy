{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nconst {\n  compareChunksNatural\n} = require(\"../util/comparators\");\n\nconst {\n  assignAscendingChunkIds\n} = require(\"./IdHelpers\");\n/** @typedef {import(\"../Chunk\")} Chunk */\n\n/** @typedef {import(\"../Compiler\")} Compiler */\n\n/** @typedef {import(\"../Module\")} Module */\n\n\nclass NaturalChunkIdsPlugin {\n  /**\n   * Apply the plugin\n   * @param {Compiler} compiler the compiler instance\n   * @returns {void}\n   */\n  apply(compiler) {\n    compiler.hooks.compilation.tap(\"NaturalChunkIdsPlugin\", compilation => {\n      compilation.hooks.chunkIds.tap(\"NaturalChunkIdsPlugin\", chunks => {\n        const chunkGraph = compilation.chunkGraph;\n        const compareNatural = compareChunksNatural(chunkGraph);\n        const chunksInNaturalOrder = Array.from(chunks).sort(compareNatural);\n        assignAscendingChunkIds(chunksInNaturalOrder, compilation);\n      });\n    });\n  }\n\n}\n\nmodule.exports = NaturalChunkIdsPlugin;","map":{"version":3,"names":["compareChunksNatural","require","assignAscendingChunkIds","NaturalChunkIdsPlugin","apply","compiler","hooks","compilation","tap","chunkIds","chunks","chunkGraph","compareNatural","chunksInNaturalOrder","Array","from","sort","module","exports"],"sources":["/Users/arpanbhandari/Documents/cod-ing/React/newsapp/node_modules/webpack/lib/ids/NaturalChunkIdsPlugin.js"],"sourcesContent":["/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\n\"use strict\";\n\nconst { compareChunksNatural } = require(\"../util/comparators\");\nconst { assignAscendingChunkIds } = require(\"./IdHelpers\");\n\n/** @typedef {import(\"../Chunk\")} Chunk */\n/** @typedef {import(\"../Compiler\")} Compiler */\n/** @typedef {import(\"../Module\")} Module */\n\nclass NaturalChunkIdsPlugin {\n\t/**\n\t * Apply the plugin\n\t * @param {Compiler} compiler the compiler instance\n\t * @returns {void}\n\t */\n\tapply(compiler) {\n\t\tcompiler.hooks.compilation.tap(\"NaturalChunkIdsPlugin\", compilation => {\n\t\t\tcompilation.hooks.chunkIds.tap(\"NaturalChunkIdsPlugin\", chunks => {\n\t\t\t\tconst chunkGraph = compilation.chunkGraph;\n\t\t\t\tconst compareNatural = compareChunksNatural(chunkGraph);\n\t\t\t\tconst chunksInNaturalOrder = Array.from(chunks).sort(compareNatural);\n\t\t\t\tassignAscendingChunkIds(chunksInNaturalOrder, compilation);\n\t\t\t});\n\t\t});\n\t}\n}\n\nmodule.exports = NaturalChunkIdsPlugin;\n"],"mappings":"AAAA;AACA;AACA;AACA;AAEA;;AAEA,MAAM;EAAEA;AAAF,IAA2BC,OAAO,CAAC,qBAAD,CAAxC;;AACA,MAAM;EAAEC;AAAF,IAA8BD,OAAO,CAAC,aAAD,CAA3C;AAEA;;AACA;;AACA;;;AAEA,MAAME,qBAAN,CAA4B;EAC3B;AACD;AACA;AACA;AACA;EACCC,KAAK,CAACC,QAAD,EAAW;IACfA,QAAQ,CAACC,KAAT,CAAeC,WAAf,CAA2BC,GAA3B,CAA+B,uBAA/B,EAAwDD,WAAW,IAAI;MACtEA,WAAW,CAACD,KAAZ,CAAkBG,QAAlB,CAA2BD,GAA3B,CAA+B,uBAA/B,EAAwDE,MAAM,IAAI;QACjE,MAAMC,UAAU,GAAGJ,WAAW,CAACI,UAA/B;QACA,MAAMC,cAAc,GAAGZ,oBAAoB,CAACW,UAAD,CAA3C;QACA,MAAME,oBAAoB,GAAGC,KAAK,CAACC,IAAN,CAAWL,MAAX,EAAmBM,IAAnB,CAAwBJ,cAAxB,CAA7B;QACAV,uBAAuB,CAACW,oBAAD,EAAuBN,WAAvB,CAAvB;MACA,CALD;IAMA,CAPD;EAQA;;AAf0B;;AAkB5BU,MAAM,CAACC,OAAP,GAAiBf,qBAAjB"},"metadata":{},"sourceType":"script"}