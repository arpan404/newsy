{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nconst DllEntryPlugin = require(\"./DllEntryPlugin\");\n\nconst FlagAllModulesAsUsedPlugin = require(\"./FlagAllModulesAsUsedPlugin\");\n\nconst LibManifestPlugin = require(\"./LibManifestPlugin\");\n\nconst createSchemaValidation = require(\"./util/create-schema-validation\");\n/** @typedef {import(\"../declarations/plugins/DllPlugin\").DllPluginOptions} DllPluginOptions */\n\n/** @typedef {import(\"./Compiler\")} Compiler */\n\n\nconst validate = createSchemaValidation(require(\"../schemas/plugins/DllPlugin.check.js\"), () => require(\"../schemas/plugins/DllPlugin.json\"), {\n  name: \"Dll Plugin\",\n  baseDataPath: \"options\"\n});\n\nclass DllPlugin {\n  /**\n   * @param {DllPluginOptions} options options object\n   */\n  constructor(options) {\n    validate(options);\n    this.options = { ...options,\n      entryOnly: options.entryOnly !== false\n    };\n  }\n  /**\n   * Apply the plugin\n   * @param {Compiler} compiler the compiler instance\n   * @returns {void}\n   */\n\n\n  apply(compiler) {\n    compiler.hooks.entryOption.tap(\"DllPlugin\", (context, entry) => {\n      if (typeof entry !== \"function\") {\n        for (const name of Object.keys(entry)) {\n          const options = {\n            name,\n            filename: entry.filename\n          };\n          new DllEntryPlugin(context, entry[name].import, options).apply(compiler);\n        }\n      } else {\n        throw new Error(\"DllPlugin doesn't support dynamic entry (function) yet\");\n      }\n\n      return true;\n    });\n    new LibManifestPlugin(this.options).apply(compiler);\n\n    if (!this.options.entryOnly) {\n      new FlagAllModulesAsUsedPlugin(\"DllPlugin\").apply(compiler);\n    }\n  }\n\n}\n\nmodule.exports = DllPlugin;","map":{"version":3,"names":["DllEntryPlugin","require","FlagAllModulesAsUsedPlugin","LibManifestPlugin","createSchemaValidation","validate","name","baseDataPath","DllPlugin","constructor","options","entryOnly","apply","compiler","hooks","entryOption","tap","context","entry","Object","keys","filename","import","Error","module","exports"],"sources":["/Users/arpanbhandari/Documents/cod-ing/React/newsapp/node_modules/webpack/lib/DllPlugin.js"],"sourcesContent":["/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\n\"use strict\";\n\nconst DllEntryPlugin = require(\"./DllEntryPlugin\");\nconst FlagAllModulesAsUsedPlugin = require(\"./FlagAllModulesAsUsedPlugin\");\nconst LibManifestPlugin = require(\"./LibManifestPlugin\");\nconst createSchemaValidation = require(\"./util/create-schema-validation\");\n\n/** @typedef {import(\"../declarations/plugins/DllPlugin\").DllPluginOptions} DllPluginOptions */\n/** @typedef {import(\"./Compiler\")} Compiler */\n\nconst validate = createSchemaValidation(\n\trequire(\"../schemas/plugins/DllPlugin.check.js\"),\n\t() => require(\"../schemas/plugins/DllPlugin.json\"),\n\t{\n\t\tname: \"Dll Plugin\",\n\t\tbaseDataPath: \"options\"\n\t}\n);\n\nclass DllPlugin {\n\t/**\n\t * @param {DllPluginOptions} options options object\n\t */\n\tconstructor(options) {\n\t\tvalidate(options);\n\t\tthis.options = {\n\t\t\t...options,\n\t\t\tentryOnly: options.entryOnly !== false\n\t\t};\n\t}\n\n\t/**\n\t * Apply the plugin\n\t * @param {Compiler} compiler the compiler instance\n\t * @returns {void}\n\t */\n\tapply(compiler) {\n\t\tcompiler.hooks.entryOption.tap(\"DllPlugin\", (context, entry) => {\n\t\t\tif (typeof entry !== \"function\") {\n\t\t\t\tfor (const name of Object.keys(entry)) {\n\t\t\t\t\tconst options = {\n\t\t\t\t\t\tname,\n\t\t\t\t\t\tfilename: entry.filename\n\t\t\t\t\t};\n\t\t\t\t\tnew DllEntryPlugin(context, entry[name].import, options).apply(\n\t\t\t\t\t\tcompiler\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tthrow new Error(\n\t\t\t\t\t\"DllPlugin doesn't support dynamic entry (function) yet\"\n\t\t\t\t);\n\t\t\t}\n\t\t\treturn true;\n\t\t});\n\t\tnew LibManifestPlugin(this.options).apply(compiler);\n\t\tif (!this.options.entryOnly) {\n\t\t\tnew FlagAllModulesAsUsedPlugin(\"DllPlugin\").apply(compiler);\n\t\t}\n\t}\n}\n\nmodule.exports = DllPlugin;\n"],"mappings":"AAAA;AACA;AACA;AACA;AAEA;;AAEA,MAAMA,cAAc,GAAGC,OAAO,CAAC,kBAAD,CAA9B;;AACA,MAAMC,0BAA0B,GAAGD,OAAO,CAAC,8BAAD,CAA1C;;AACA,MAAME,iBAAiB,GAAGF,OAAO,CAAC,qBAAD,CAAjC;;AACA,MAAMG,sBAAsB,GAAGH,OAAO,CAAC,iCAAD,CAAtC;AAEA;;AACA;;;AAEA,MAAMI,QAAQ,GAAGD,sBAAsB,CACtCH,OAAO,CAAC,uCAAD,CAD+B,EAEtC,MAAMA,OAAO,CAAC,mCAAD,CAFyB,EAGtC;EACCK,IAAI,EAAE,YADP;EAECC,YAAY,EAAE;AAFf,CAHsC,CAAvC;;AASA,MAAMC,SAAN,CAAgB;EACf;AACD;AACA;EACCC,WAAW,CAACC,OAAD,EAAU;IACpBL,QAAQ,CAACK,OAAD,CAAR;IACA,KAAKA,OAAL,GAAe,EACd,GAAGA,OADW;MAEdC,SAAS,EAAED,OAAO,CAACC,SAAR,KAAsB;IAFnB,CAAf;EAIA;EAED;AACD;AACA;AACA;AACA;;;EACCC,KAAK,CAACC,QAAD,EAAW;IACfA,QAAQ,CAACC,KAAT,CAAeC,WAAf,CAA2BC,GAA3B,CAA+B,WAA/B,EAA4C,CAACC,OAAD,EAAUC,KAAV,KAAoB;MAC/D,IAAI,OAAOA,KAAP,KAAiB,UAArB,EAAiC;QAChC,KAAK,MAAMZ,IAAX,IAAmBa,MAAM,CAACC,IAAP,CAAYF,KAAZ,CAAnB,EAAuC;UACtC,MAAMR,OAAO,GAAG;YACfJ,IADe;YAEfe,QAAQ,EAAEH,KAAK,CAACG;UAFD,CAAhB;UAIA,IAAIrB,cAAJ,CAAmBiB,OAAnB,EAA4BC,KAAK,CAACZ,IAAD,CAAL,CAAYgB,MAAxC,EAAgDZ,OAAhD,EAAyDE,KAAzD,CACCC,QADD;QAGA;MACD,CAVD,MAUO;QACN,MAAM,IAAIU,KAAJ,CACL,wDADK,CAAN;MAGA;;MACD,OAAO,IAAP;IACA,CAjBD;IAkBA,IAAIpB,iBAAJ,CAAsB,KAAKO,OAA3B,EAAoCE,KAApC,CAA0CC,QAA1C;;IACA,IAAI,CAAC,KAAKH,OAAL,CAAaC,SAAlB,EAA6B;MAC5B,IAAIT,0BAAJ,CAA+B,WAA/B,EAA4CU,KAA5C,CAAkDC,QAAlD;IACA;EACD;;AAxCc;;AA2ChBW,MAAM,CAACC,OAAP,GAAiBjB,SAAjB"},"metadata":{},"sourceType":"script"}