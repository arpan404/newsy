{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nconst Hash = require(\"../Hash\");\n\nconst MAX_SHORT_STRING = require(\"./wasm-hash\").MAX_SHORT_STRING;\n\nclass BatchedHash extends Hash {\n  constructor(hash) {\n    super();\n    this.string = undefined;\n    this.encoding = undefined;\n    this.hash = hash;\n  }\n  /**\n   * Update hash {@link https://nodejs.org/api/crypto.html#crypto_hash_update_data_inputencoding}\n   * @param {string|Buffer} data data\n   * @param {string=} inputEncoding data encoding\n   * @returns {this} updated hash\n   */\n\n\n  update(data, inputEncoding) {\n    if (this.string !== undefined) {\n      if (typeof data === \"string\" && inputEncoding === this.encoding && this.string.length + data.length < MAX_SHORT_STRING) {\n        this.string += data;\n        return this;\n      }\n\n      this.hash.update(this.string, this.encoding);\n      this.string = undefined;\n    }\n\n    if (typeof data === \"string\") {\n      if (data.length < MAX_SHORT_STRING && ( // base64 encoding is not valid since it may contain padding chars\n      !inputEncoding || !inputEncoding.startsWith(\"ba\"))) {\n        this.string = data;\n        this.encoding = inputEncoding;\n      } else {\n        this.hash.update(data, inputEncoding);\n      }\n    } else {\n      this.hash.update(data);\n    }\n\n    return this;\n  }\n  /**\n   * Calculates the digest {@link https://nodejs.org/api/crypto.html#crypto_hash_digest_encoding}\n   * @param {string=} encoding encoding of the return value\n   * @returns {string|Buffer} digest\n   */\n\n\n  digest(encoding) {\n    if (this.string !== undefined) {\n      this.hash.update(this.string, this.encoding);\n    }\n\n    return this.hash.digest(encoding);\n  }\n\n}\n\nmodule.exports = BatchedHash;","map":{"version":3,"names":["Hash","require","MAX_SHORT_STRING","BatchedHash","constructor","hash","string","undefined","encoding","update","data","inputEncoding","length","startsWith","digest","module","exports"],"sources":["/Users/arpanbhandari/Documents/cod-ing/React/newsapp/node_modules/webpack/lib/util/hash/BatchedHash.js"],"sourcesContent":["/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\n\"use strict\";\n\nconst Hash = require(\"../Hash\");\nconst MAX_SHORT_STRING = require(\"./wasm-hash\").MAX_SHORT_STRING;\n\nclass BatchedHash extends Hash {\n\tconstructor(hash) {\n\t\tsuper();\n\t\tthis.string = undefined;\n\t\tthis.encoding = undefined;\n\t\tthis.hash = hash;\n\t}\n\n\t/**\n\t * Update hash {@link https://nodejs.org/api/crypto.html#crypto_hash_update_data_inputencoding}\n\t * @param {string|Buffer} data data\n\t * @param {string=} inputEncoding data encoding\n\t * @returns {this} updated hash\n\t */\n\tupdate(data, inputEncoding) {\n\t\tif (this.string !== undefined) {\n\t\t\tif (\n\t\t\t\ttypeof data === \"string\" &&\n\t\t\t\tinputEncoding === this.encoding &&\n\t\t\t\tthis.string.length + data.length < MAX_SHORT_STRING\n\t\t\t) {\n\t\t\t\tthis.string += data;\n\t\t\t\treturn this;\n\t\t\t}\n\t\t\tthis.hash.update(this.string, this.encoding);\n\t\t\tthis.string = undefined;\n\t\t}\n\t\tif (typeof data === \"string\") {\n\t\t\tif (\n\t\t\t\tdata.length < MAX_SHORT_STRING &&\n\t\t\t\t// base64 encoding is not valid since it may contain padding chars\n\t\t\t\t(!inputEncoding || !inputEncoding.startsWith(\"ba\"))\n\t\t\t) {\n\t\t\t\tthis.string = data;\n\t\t\t\tthis.encoding = inputEncoding;\n\t\t\t} else {\n\t\t\t\tthis.hash.update(data, inputEncoding);\n\t\t\t}\n\t\t} else {\n\t\t\tthis.hash.update(data);\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t * Calculates the digest {@link https://nodejs.org/api/crypto.html#crypto_hash_digest_encoding}\n\t * @param {string=} encoding encoding of the return value\n\t * @returns {string|Buffer} digest\n\t */\n\tdigest(encoding) {\n\t\tif (this.string !== undefined) {\n\t\t\tthis.hash.update(this.string, this.encoding);\n\t\t}\n\t\treturn this.hash.digest(encoding);\n\t}\n}\n\nmodule.exports = BatchedHash;\n"],"mappings":"AAAA;AACA;AACA;AACA;AAEA;;AAEA,MAAMA,IAAI,GAAGC,OAAO,CAAC,SAAD,CAApB;;AACA,MAAMC,gBAAgB,GAAGD,OAAO,CAAC,aAAD,CAAP,CAAuBC,gBAAhD;;AAEA,MAAMC,WAAN,SAA0BH,IAA1B,CAA+B;EAC9BI,WAAW,CAACC,IAAD,EAAO;IACjB;IACA,KAAKC,MAAL,GAAcC,SAAd;IACA,KAAKC,QAAL,GAAgBD,SAAhB;IACA,KAAKF,IAAL,GAAYA,IAAZ;EACA;EAED;AACD;AACA;AACA;AACA;AACA;;;EACCI,MAAM,CAACC,IAAD,EAAOC,aAAP,EAAsB;IAC3B,IAAI,KAAKL,MAAL,KAAgBC,SAApB,EAA+B;MAC9B,IACC,OAAOG,IAAP,KAAgB,QAAhB,IACAC,aAAa,KAAK,KAAKH,QADvB,IAEA,KAAKF,MAAL,CAAYM,MAAZ,GAAqBF,IAAI,CAACE,MAA1B,GAAmCV,gBAHpC,EAIE;QACD,KAAKI,MAAL,IAAeI,IAAf;QACA,OAAO,IAAP;MACA;;MACD,KAAKL,IAAL,CAAUI,MAAV,CAAiB,KAAKH,MAAtB,EAA8B,KAAKE,QAAnC;MACA,KAAKF,MAAL,GAAcC,SAAd;IACA;;IACD,IAAI,OAAOG,IAAP,KAAgB,QAApB,EAA8B;MAC7B,IACCA,IAAI,CAACE,MAAL,GAAcV,gBAAd,MACA;MACC,CAACS,aAAD,IAAkB,CAACA,aAAa,CAACE,UAAd,CAAyB,IAAzB,CAFpB,CADD,EAIE;QACD,KAAKP,MAAL,GAAcI,IAAd;QACA,KAAKF,QAAL,GAAgBG,aAAhB;MACA,CAPD,MAOO;QACN,KAAKN,IAAL,CAAUI,MAAV,CAAiBC,IAAjB,EAAuBC,aAAvB;MACA;IACD,CAXD,MAWO;MACN,KAAKN,IAAL,CAAUI,MAAV,CAAiBC,IAAjB;IACA;;IACD,OAAO,IAAP;EACA;EAED;AACD;AACA;AACA;AACA;;;EACCI,MAAM,CAACN,QAAD,EAAW;IAChB,IAAI,KAAKF,MAAL,KAAgBC,SAApB,EAA+B;MAC9B,KAAKF,IAAL,CAAUI,MAAV,CAAiB,KAAKH,MAAtB,EAA8B,KAAKE,QAAnC;IACA;;IACD,OAAO,KAAKH,IAAL,CAAUS,MAAV,CAAiBN,QAAjB,CAAP;EACA;;AAtD6B;;AAyD/BO,MAAM,CAACC,OAAP,GAAiBb,WAAjB"},"metadata":{},"sourceType":"script"}