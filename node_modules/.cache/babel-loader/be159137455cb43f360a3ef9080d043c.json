{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Sergey Melyukov @smelukov\n*/\n\"use strict\";\n\nconst {\n  ReplaceSource\n} = require(\"webpack-sources\");\n\nconst Generator = require(\"../Generator\");\n\nconst InitFragment = require(\"../InitFragment\");\n\nconst RuntimeGlobals = require(\"../RuntimeGlobals\");\n/** @typedef {import(\"webpack-sources\").Source} Source */\n\n/** @typedef {import(\"../Dependency\")} Dependency */\n\n/** @typedef {import(\"../Generator\").GenerateContext} GenerateContext */\n\n/** @typedef {import(\"../Generator\").UpdateHashContext} UpdateHashContext */\n\n/** @typedef {import(\"../NormalModule\")} NormalModule */\n\n/** @typedef {import(\"../util/Hash\")} Hash */\n\n\nconst TYPES = new Set([\"css\"]);\n\nclass CssGenerator extends Generator {\n  constructor() {\n    super();\n  }\n  /**\n   * @param {NormalModule} module module for which the code should be generated\n   * @param {GenerateContext} generateContext context for generate\n   * @returns {Source} generated code\n   */\n\n\n  generate(module, generateContext) {\n    const originalSource = module.originalSource();\n    const source = new ReplaceSource(originalSource);\n    const initFragments = [];\n    const cssExports = new Map();\n    generateContext.runtimeRequirements.add(RuntimeGlobals.hasCssModules);\n    const templateContext = {\n      runtimeTemplate: generateContext.runtimeTemplate,\n      dependencyTemplates: generateContext.dependencyTemplates,\n      moduleGraph: generateContext.moduleGraph,\n      chunkGraph: generateContext.chunkGraph,\n      module,\n      runtime: generateContext.runtime,\n      runtimeRequirements: generateContext.runtimeRequirements,\n      concatenationScope: generateContext.concatenationScope,\n      codeGenerationResults: generateContext.codeGenerationResults,\n      initFragments,\n      cssExports\n    };\n\n    const handleDependency = dependency => {\n      const constructor =\n      /** @type {new (...args: any[]) => Dependency} */\n      dependency.constructor;\n      const template = generateContext.dependencyTemplates.get(constructor);\n\n      if (!template) {\n        throw new Error(\"No template for dependency: \" + dependency.constructor.name);\n      }\n\n      template.apply(dependency, source, templateContext);\n    };\n\n    module.dependencies.forEach(handleDependency);\n    if (module.presentationalDependencies !== undefined) module.presentationalDependencies.forEach(handleDependency);\n\n    if (cssExports.size > 0) {\n      const data = generateContext.getData();\n      data.set(\"css-exports\", cssExports);\n    }\n\n    return InitFragment.addToSource(source, initFragments, generateContext);\n  }\n  /**\n   * @param {NormalModule} module fresh module\n   * @returns {Set<string>} available types (do not mutate)\n   */\n\n\n  getTypes(module) {\n    return TYPES;\n  }\n  /**\n   * @param {NormalModule} module the module\n   * @param {string=} type source type\n   * @returns {number} estimate size of the module\n   */\n\n\n  getSize(module, type) {\n    const originalSource = module.originalSource();\n\n    if (!originalSource) {\n      return 0;\n    }\n\n    return originalSource.size();\n  }\n  /**\n   * @param {Hash} hash hash that will be modified\n   * @param {UpdateHashContext} updateHashContext context for updating hash\n   */\n\n\n  updateHash(hash, _ref) {\n    let {\n      module\n    } = _ref;\n  }\n\n}\n\nmodule.exports = CssGenerator;","map":{"version":3,"names":["ReplaceSource","require","Generator","InitFragment","RuntimeGlobals","TYPES","Set","CssGenerator","constructor","generate","module","generateContext","originalSource","source","initFragments","cssExports","Map","runtimeRequirements","add","hasCssModules","templateContext","runtimeTemplate","dependencyTemplates","moduleGraph","chunkGraph","runtime","concatenationScope","codeGenerationResults","handleDependency","dependency","template","get","Error","name","apply","dependencies","forEach","presentationalDependencies","undefined","size","data","getData","set","addToSource","getTypes","getSize","type","updateHash","hash","exports"],"sources":["/Users/arpanbhandari/Documents/cod-ing/React/newsapp/node_modules/webpack/lib/css/CssGenerator.js"],"sourcesContent":["/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Sergey Melyukov @smelukov\n*/\n\n\"use strict\";\n\nconst { ReplaceSource } = require(\"webpack-sources\");\nconst Generator = require(\"../Generator\");\nconst InitFragment = require(\"../InitFragment\");\nconst RuntimeGlobals = require(\"../RuntimeGlobals\");\n\n/** @typedef {import(\"webpack-sources\").Source} Source */\n/** @typedef {import(\"../Dependency\")} Dependency */\n/** @typedef {import(\"../Generator\").GenerateContext} GenerateContext */\n/** @typedef {import(\"../Generator\").UpdateHashContext} UpdateHashContext */\n/** @typedef {import(\"../NormalModule\")} NormalModule */\n/** @typedef {import(\"../util/Hash\")} Hash */\n\nconst TYPES = new Set([\"css\"]);\n\nclass CssGenerator extends Generator {\n\tconstructor() {\n\t\tsuper();\n\t}\n\n\t/**\n\t * @param {NormalModule} module module for which the code should be generated\n\t * @param {GenerateContext} generateContext context for generate\n\t * @returns {Source} generated code\n\t */\n\tgenerate(module, generateContext) {\n\t\tconst originalSource = module.originalSource();\n\t\tconst source = new ReplaceSource(originalSource);\n\t\tconst initFragments = [];\n\t\tconst cssExports = new Map();\n\n\t\tgenerateContext.runtimeRequirements.add(RuntimeGlobals.hasCssModules);\n\n\t\tconst templateContext = {\n\t\t\truntimeTemplate: generateContext.runtimeTemplate,\n\t\t\tdependencyTemplates: generateContext.dependencyTemplates,\n\t\t\tmoduleGraph: generateContext.moduleGraph,\n\t\t\tchunkGraph: generateContext.chunkGraph,\n\t\t\tmodule,\n\t\t\truntime: generateContext.runtime,\n\t\t\truntimeRequirements: generateContext.runtimeRequirements,\n\t\t\tconcatenationScope: generateContext.concatenationScope,\n\t\t\tcodeGenerationResults: generateContext.codeGenerationResults,\n\t\t\tinitFragments,\n\t\t\tcssExports\n\t\t};\n\n\t\tconst handleDependency = dependency => {\n\t\t\tconst constructor = /** @type {new (...args: any[]) => Dependency} */ (\n\t\t\t\tdependency.constructor\n\t\t\t);\n\t\t\tconst template = generateContext.dependencyTemplates.get(constructor);\n\t\t\tif (!template) {\n\t\t\t\tthrow new Error(\n\t\t\t\t\t\"No template for dependency: \" + dependency.constructor.name\n\t\t\t\t);\n\t\t\t}\n\n\t\t\ttemplate.apply(dependency, source, templateContext);\n\t\t};\n\t\tmodule.dependencies.forEach(handleDependency);\n\t\tif (module.presentationalDependencies !== undefined)\n\t\t\tmodule.presentationalDependencies.forEach(handleDependency);\n\n\t\tif (cssExports.size > 0) {\n\t\t\tconst data = generateContext.getData();\n\t\t\tdata.set(\"css-exports\", cssExports);\n\t\t}\n\n\t\treturn InitFragment.addToSource(source, initFragments, generateContext);\n\t}\n\n\t/**\n\t * @param {NormalModule} module fresh module\n\t * @returns {Set<string>} available types (do not mutate)\n\t */\n\tgetTypes(module) {\n\t\treturn TYPES;\n\t}\n\n\t/**\n\t * @param {NormalModule} module the module\n\t * @param {string=} type source type\n\t * @returns {number} estimate size of the module\n\t */\n\tgetSize(module, type) {\n\t\tconst originalSource = module.originalSource();\n\n\t\tif (!originalSource) {\n\t\t\treturn 0;\n\t\t}\n\n\t\treturn originalSource.size();\n\t}\n\n\t/**\n\t * @param {Hash} hash hash that will be modified\n\t * @param {UpdateHashContext} updateHashContext context for updating hash\n\t */\n\tupdateHash(hash, { module }) {}\n}\n\nmodule.exports = CssGenerator;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}