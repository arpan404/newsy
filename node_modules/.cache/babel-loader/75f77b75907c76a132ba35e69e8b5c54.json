{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nconst util = require(\"util\");\n\nconst ModuleDependency = require(\"../dependencies/ModuleDependency\");\n\nconst formatLocation = require(\"../formatLocation\");\n\nconst {\n  LogType\n} = require(\"../logging/Logger\");\n\nconst AggressiveSplittingPlugin = require(\"../optimize/AggressiveSplittingPlugin\");\n\nconst SizeLimitsPlugin = require(\"../performance/SizeLimitsPlugin\");\n\nconst {\n  countIterable\n} = require(\"../util/IterableHelpers\");\n\nconst {\n  compareLocations,\n  compareChunksById,\n  compareNumbers,\n  compareIds,\n  concatComparators,\n  compareSelect,\n  compareModulesByIdentifier\n} = require(\"../util/comparators\");\n\nconst {\n  makePathsRelative,\n  parseResource\n} = require(\"../util/identifier\");\n/** @typedef {import(\"webpack-sources\").Source} Source */\n\n/** @typedef {import(\"../Chunk\")} Chunk */\n\n/** @typedef {import(\"../ChunkGroup\")} ChunkGroup */\n\n/** @typedef {import(\"../ChunkGroup\").OriginRecord} OriginRecord */\n\n/** @typedef {import(\"../Compilation\")} Compilation */\n\n/** @typedef {import(\"../Compilation\").Asset} Asset */\n\n/** @typedef {import(\"../Compilation\").AssetInfo} AssetInfo */\n\n/** @typedef {import(\"../Compilation\").NormalizedStatsOptions} NormalizedStatsOptions */\n\n/** @typedef {import(\"../Compiler\")} Compiler */\n\n/** @typedef {import(\"../Dependency\")} Dependency */\n\n/** @typedef {import(\"../Dependency\").DependencyLocation} DependencyLocation */\n\n/** @typedef {import(\"../Module\")} Module */\n\n/** @typedef {import(\"../ModuleGraphConnection\")} ModuleGraphConnection */\n\n/** @typedef {import(\"../ModuleProfile\")} ModuleProfile */\n\n/** @typedef {import(\"../RequestShortener\")} RequestShortener */\n\n/** @typedef {import(\"../WebpackError\")} WebpackError */\n\n/** @template T @typedef {import(\"../util/comparators\").Comparator<T>} Comparator<T> */\n\n/** @typedef {import(\"../util/runtime\").RuntimeSpec} RuntimeSpec */\n\n/** @typedef {import(\"../util/smartGrouping\").GroupConfig<any, object>} GroupConfig */\n\n/** @typedef {import(\"./StatsFactory\")} StatsFactory */\n\n/** @typedef {import(\"./StatsFactory\").StatsFactoryContext} StatsFactoryContext */\n\n/** @typedef {KnownStatsCompilation & Record<string, any>} StatsCompilation */\n\n/**\n * @typedef {Object} KnownStatsCompilation\n * @property {any=} env\n * @property {string=} name\n * @property {string=} hash\n * @property {string=} version\n * @property {number=} time\n * @property {number=} builtAt\n * @property {boolean=} needAdditionalPass\n * @property {string=} publicPath\n * @property {string=} outputPath\n * @property {Record<string, string[]>=} assetsByChunkName\n * @property {StatsAsset[]=} assets\n * @property {number=} filteredAssets\n * @property {StatsChunk[]=} chunks\n * @property {StatsModule[]=} modules\n * @property {number=} filteredModules\n * @property {Record<string, StatsChunkGroup>=} entrypoints\n * @property {Record<string, StatsChunkGroup>=} namedChunkGroups\n * @property {StatsError[]=} errors\n * @property {number=} errorsCount\n * @property {StatsError[]=} warnings\n * @property {number=} warningsCount\n * @property {StatsCompilation[]=} children\n * @property {Record<string, StatsLogging>=} logging\n */\n\n/** @typedef {KnownStatsLogging & Record<string, any>} StatsLogging */\n\n/**\n * @typedef {Object} KnownStatsLogging\n * @property {StatsLoggingEntry[]} entries\n * @property {number} filteredEntries\n * @property {boolean} debug\n */\n\n/** @typedef {KnownStatsLoggingEntry & Record<string, any>} StatsLoggingEntry */\n\n/**\n * @typedef {Object} KnownStatsLoggingEntry\n * @property {string} type\n * @property {string} message\n * @property {string[]=} trace\n * @property {StatsLoggingEntry[]=} children\n * @property {any[]=} args\n * @property {number=} time\n */\n\n/** @typedef {KnownStatsAsset & Record<string, any>} StatsAsset */\n\n/**\n * @typedef {Object} KnownStatsAsset\n * @property {string} type\n * @property {string} name\n * @property {AssetInfo} info\n * @property {number} size\n * @property {boolean} emitted\n * @property {boolean} comparedForEmit\n * @property {boolean} cached\n * @property {StatsAsset[]=} related\n * @property {(string|number)[]=} chunkNames\n * @property {(string|number)[]=} chunkIdHints\n * @property {(string|number)[]=} chunks\n * @property {(string|number)[]=} auxiliaryChunkNames\n * @property {(string|number)[]=} auxiliaryChunks\n * @property {(string|number)[]=} auxiliaryChunkIdHints\n * @property {number=} filteredRelated\n * @property {boolean=} isOverSizeLimit\n */\n\n/** @typedef {KnownStatsChunkGroup & Record<string, any>} StatsChunkGroup */\n\n/**\n * @typedef {Object} KnownStatsChunkGroup\n * @property {string=} name\n * @property {(string|number)[]=} chunks\n * @property {({ name: string, size?: number })[]=} assets\n * @property {number=} filteredAssets\n * @property {number=} assetsSize\n * @property {({ name: string, size?: number })[]=} auxiliaryAssets\n * @property {number=} filteredAuxiliaryAssets\n * @property {number=} auxiliaryAssetsSize\n * @property {{ [x: string]: StatsChunkGroup[] }=} children\n * @property {{ [x: string]: string[] }=} childAssets\n * @property {boolean=} isOverSizeLimit\n */\n\n/** @typedef {KnownStatsModule & Record<string, any>} StatsModule */\n\n/**\n * @typedef {Object} KnownStatsModule\n * @property {string=} type\n * @property {string=} moduleType\n * @property {string=} layer\n * @property {string=} identifier\n * @property {string=} name\n * @property {string=} nameForCondition\n * @property {number=} index\n * @property {number=} preOrderIndex\n * @property {number=} index2\n * @property {number=} postOrderIndex\n * @property {number=} size\n * @property {{[x: string]: number}=} sizes\n * @property {boolean=} cacheable\n * @property {boolean=} built\n * @property {boolean=} codeGenerated\n * @property {boolean=} buildTimeExecuted\n * @property {boolean=} cached\n * @property {boolean=} optional\n * @property {boolean=} orphan\n * @property {string|number=} id\n * @property {string|number=} issuerId\n * @property {(string|number)[]=} chunks\n * @property {(string|number)[]=} assets\n * @property {boolean=} dependent\n * @property {string=} issuer\n * @property {string=} issuerName\n * @property {StatsModuleIssuer[]=} issuerPath\n * @property {boolean=} failed\n * @property {number=} errors\n * @property {number=} warnings\n * @property {StatsProfile=} profile\n * @property {StatsModuleReason[]=} reasons\n * @property {(boolean | string[])=} usedExports\n * @property {string[]=} providedExports\n * @property {string[]=} optimizationBailout\n * @property {number=} depth\n * @property {StatsModule[]=} modules\n * @property {number=} filteredModules\n * @property {ReturnType<Source[\"source\"]>=} source\n */\n\n/** @typedef {KnownStatsProfile & Record<string, any>} StatsProfile */\n\n/**\n * @typedef {Object} KnownStatsProfile\n * @property {number} total\n * @property {number} resolving\n * @property {number} restoring\n * @property {number} building\n * @property {number} integration\n * @property {number} storing\n * @property {number} additionalResolving\n * @property {number} additionalIntegration\n * @property {number} factory\n * @property {number} dependencies\n */\n\n/** @typedef {KnownStatsModuleIssuer & Record<string, any>} StatsModuleIssuer */\n\n/**\n * @typedef {Object} KnownStatsModuleIssuer\n * @property {string=} identifier\n * @property {string=} name\n * @property {(string|number)=} id\n * @property {StatsProfile=} profile\n */\n\n/** @typedef {KnownStatsModuleReason & Record<string, any>} StatsModuleReason */\n\n/**\n * @typedef {Object} KnownStatsModuleReason\n * @property {string=} moduleIdentifier\n * @property {string=} module\n * @property {string=} moduleName\n * @property {string=} resolvedModuleIdentifier\n * @property {string=} resolvedModule\n * @property {string=} type\n * @property {boolean} active\n * @property {string=} explanation\n * @property {string=} userRequest\n * @property {string=} loc\n * @property {(string|number)=} moduleId\n * @property {(string|number)=} resolvedModuleId\n */\n\n/** @typedef {KnownStatsChunk & Record<string, any>} StatsChunk */\n\n/**\n * @typedef {Object} KnownStatsChunk\n * @property {boolean} rendered\n * @property {boolean} initial\n * @property {boolean} entry\n * @property {boolean} recorded\n * @property {string=} reason\n * @property {number} size\n * @property {Record<string, number>=} sizes\n * @property {string[]=} names\n * @property {string[]=} idHints\n * @property {string[]=} runtime\n * @property {string[]=} files\n * @property {string[]=} auxiliaryFiles\n * @property {string} hash\n * @property {Record<string, (string|number)[]>=} childrenByOrder\n * @property {(string|number)=} id\n * @property {(string|number)[]=} siblings\n * @property {(string|number)[]=} parents\n * @property {(string|number)[]=} children\n * @property {StatsModule[]=} modules\n * @property {number=} filteredModules\n * @property {StatsChunkOrigin[]=} origins\n */\n\n/** @typedef {KnownStatsChunkOrigin & Record<string, any>} StatsChunkOrigin */\n\n/**\n * @typedef {Object} KnownStatsChunkOrigin\n * @property {string=} module\n * @property {string=} moduleIdentifier\n * @property {string=} moduleName\n * @property {string=} loc\n * @property {string=} request\n * @property {(string|number)=} moduleId\n */\n\n/** @typedef {KnownStatsModuleTraceItem & Record<string, any>} StatsModuleTraceItem */\n\n/**\n * @typedef {Object} KnownStatsModuleTraceItem\n * @property {string=} originIdentifier\n * @property {string=} originName\n * @property {string=} moduleIdentifier\n * @property {string=} moduleName\n * @property {StatsModuleTraceDependency[]=} dependencies\n * @property {(string|number)=} originId\n * @property {(string|number)=} moduleId\n */\n\n/** @typedef {KnownStatsModuleTraceDependency & Record<string, any>} StatsModuleTraceDependency */\n\n/**\n * @typedef {Object} KnownStatsModuleTraceDependency\n * @property {string=} loc\n */\n\n/** @typedef {KnownStatsError & Record<string, any>} StatsError */\n\n/**\n * @typedef {Object} KnownStatsError\n * @property {string} message\n * @property {string=} chunkName\n * @property {boolean=} chunkEntry\n * @property {boolean=} chunkInitial\n * @property {string=} file\n * @property {string=} moduleIdentifier\n * @property {string=} moduleName\n * @property {string=} loc\n * @property {string|number=} chunkId\n * @property {string|number=} moduleId\n * @property {StatsModuleTraceItem[]=} moduleTrace\n * @property {any=} details\n * @property {string=} stack\n */\n\n/** @typedef {Asset & { type: string, related: PreprocessedAsset[] }} PreprocessedAsset */\n\n/**\n * @template T\n * @template O\n * @typedef {Record<string, (object: O, data: T, context: StatsFactoryContext, options: NormalizedStatsOptions, factory: StatsFactory) => void>} ExtractorsByOption\n */\n\n/**\n * @typedef {Object} SimpleExtractors\n * @property {ExtractorsByOption<Compilation, StatsCompilation>} compilation\n * @property {ExtractorsByOption<PreprocessedAsset, StatsAsset>} asset\n * @property {ExtractorsByOption<PreprocessedAsset, StatsAsset>} asset$visible\n * @property {ExtractorsByOption<{ name: string, chunkGroup: ChunkGroup }, StatsChunkGroup>} chunkGroup\n * @property {ExtractorsByOption<Module, StatsModule>} module\n * @property {ExtractorsByOption<Module, StatsModule>} module$visible\n * @property {ExtractorsByOption<Module, StatsModuleIssuer>} moduleIssuer\n * @property {ExtractorsByOption<ModuleProfile, StatsProfile>} profile\n * @property {ExtractorsByOption<ModuleGraphConnection, StatsModuleReason>} moduleReason\n * @property {ExtractorsByOption<Chunk, StatsChunk>} chunk\n * @property {ExtractorsByOption<OriginRecord, StatsChunkOrigin>} chunkOrigin\n * @property {ExtractorsByOption<WebpackError, StatsError>} error\n * @property {ExtractorsByOption<WebpackError, StatsError>} warning\n * @property {ExtractorsByOption<{ origin: Module, module: Module }, StatsModuleTraceItem>} moduleTraceItem\n * @property {ExtractorsByOption<Dependency, StatsModuleTraceDependency>} moduleTraceDependency\n */\n\n/**\n * @template T\n * @template I\n * @param {Iterable<T>} items items to select from\n * @param {function(T): Iterable<I>} selector selector function to select values from item\n * @returns {I[]} array of values\n */\n\n\nconst uniqueArray = (items, selector) => {\n  /** @type {Set<I>} */\n  const set = new Set();\n\n  for (const item of items) {\n    for (const i of selector(item)) {\n      set.add(i);\n    }\n  }\n\n  return Array.from(set);\n};\n/**\n * @template T\n * @template I\n * @param {Iterable<T>} items items to select from\n * @param {function(T): Iterable<I>} selector selector function to select values from item\n * @param {Comparator<I>} comparator comparator function\n * @returns {I[]} array of values\n */\n\n\nconst uniqueOrderedArray = (items, selector, comparator) => {\n  return uniqueArray(items, selector).sort(comparator);\n};\n/** @template T @template R @typedef {{ [P in keyof T]: R }} MappedValues<T, R> */\n\n/**\n * @template T\n * @template R\n * @param {T} obj object to be mapped\n * @param {function(T[keyof T], keyof T): R} fn mapping function\n * @returns {MappedValues<T, R>} mapped object\n */\n\n\nconst mapObject = (obj, fn) => {\n  const newObj = Object.create(null);\n\n  for (const key of Object.keys(obj)) {\n    newObj[key] = fn(obj[key],\n    /** @type {keyof T} */\n    key);\n  }\n\n  return newObj;\n};\n/**\n * @param {Compilation} compilation the compilation\n * @param {function(Compilation, string): any[]} getItems get items\n * @returns {number} total number\n */\n\n\nconst countWithChildren = (compilation, getItems) => {\n  let count = getItems(compilation, \"\").length;\n\n  for (const child of compilation.children) {\n    count += countWithChildren(child, (c, type) => getItems(c, `.children[].compilation${type}`));\n  }\n\n  return count;\n};\n/** @type {ExtractorsByOption<WebpackError | string, StatsError>} */\n\n\nconst EXTRACT_ERROR = {\n  _: (object, error, context, _ref) => {\n    let {\n      requestShortener\n    } = _ref;\n\n    // TODO webpack 6 disallow strings in the errors/warnings list\n    if (typeof error === \"string\") {\n      object.message = error;\n    } else {\n      if (error.chunk) {\n        object.chunkName = error.chunk.name;\n        object.chunkEntry = error.chunk.hasRuntime();\n        object.chunkInitial = error.chunk.canBeInitial();\n      }\n\n      if (error.file) {\n        object.file = error.file;\n      }\n\n      if (error.module) {\n        object.moduleIdentifier = error.module.identifier();\n        object.moduleName = error.module.readableIdentifier(requestShortener);\n      }\n\n      if (error.loc) {\n        object.loc = formatLocation(error.loc);\n      }\n\n      object.message = error.message;\n    }\n  },\n  ids: (object, error, _ref2) => {\n    let {\n      compilation: {\n        chunkGraph\n      }\n    } = _ref2;\n\n    if (typeof error !== \"string\") {\n      if (error.chunk) {\n        object.chunkId = error.chunk.id;\n      }\n\n      if (error.module) {\n        object.moduleId = chunkGraph.getModuleId(error.module);\n      }\n    }\n  },\n  moduleTrace: (object, error, context, options, factory) => {\n    if (typeof error !== \"string\" && error.module) {\n      const {\n        type,\n        compilation: {\n          moduleGraph\n        }\n      } = context;\n      /** @type {Set<Module>} */\n\n      const visitedModules = new Set();\n      const moduleTrace = [];\n      let current = error.module;\n\n      while (current) {\n        if (visitedModules.has(current)) break; // circular (technically impossible, but how knows)\n\n        visitedModules.add(current);\n        const origin = moduleGraph.getIssuer(current);\n        if (!origin) break;\n        moduleTrace.push({\n          origin,\n          module: current\n        });\n        current = origin;\n      }\n\n      object.moduleTrace = factory.create(`${type}.moduleTrace`, moduleTrace, context);\n    }\n  },\n  errorDetails: (object, error, _ref3, _ref4) => {\n    let {\n      type,\n      compilation,\n      cachedGetErrors,\n      cachedGetWarnings\n    } = _ref3;\n    let {\n      errorDetails\n    } = _ref4;\n\n    if (typeof error !== \"string\" && (errorDetails === true || type.endsWith(\".error\") && cachedGetErrors(compilation).length < 3)) {\n      object.details = error.details;\n    }\n  },\n  errorStack: (object, error) => {\n    if (typeof error !== \"string\") {\n      object.stack = error.stack;\n    }\n  }\n};\n/** @type {SimpleExtractors} */\n\nconst SIMPLE_EXTRACTORS = {\n  compilation: {\n    _: (object, compilation, context, options) => {\n      if (!context.makePathsRelative) {\n        context.makePathsRelative = makePathsRelative.bindContextCache(compilation.compiler.context, compilation.compiler.root);\n      }\n\n      if (!context.cachedGetErrors) {\n        const map = new WeakMap();\n\n        context.cachedGetErrors = compilation => {\n          return map.get(compilation) || (errors => (map.set(compilation, errors), errors))(compilation.getErrors());\n        };\n      }\n\n      if (!context.cachedGetWarnings) {\n        const map = new WeakMap();\n\n        context.cachedGetWarnings = compilation => {\n          return map.get(compilation) || (warnings => (map.set(compilation, warnings), warnings))(compilation.getWarnings());\n        };\n      }\n\n      if (compilation.name) {\n        object.name = compilation.name;\n      }\n\n      if (compilation.needAdditionalPass) {\n        object.needAdditionalPass = true;\n      }\n\n      const {\n        logging,\n        loggingDebug,\n        loggingTrace\n      } = options;\n\n      if (logging || loggingDebug && loggingDebug.length > 0) {\n        const util = require(\"util\");\n\n        object.logging = {};\n        let acceptedTypes;\n        let collapsedGroups = false;\n\n        switch (logging) {\n          default:\n            acceptedTypes = new Set();\n            break;\n\n          case \"error\":\n            acceptedTypes = new Set([LogType.error]);\n            break;\n\n          case \"warn\":\n            acceptedTypes = new Set([LogType.error, LogType.warn]);\n            break;\n\n          case \"info\":\n            acceptedTypes = new Set([LogType.error, LogType.warn, LogType.info]);\n            break;\n\n          case \"log\":\n            acceptedTypes = new Set([LogType.error, LogType.warn, LogType.info, LogType.log, LogType.group, LogType.groupEnd, LogType.groupCollapsed, LogType.clear]);\n            break;\n\n          case \"verbose\":\n            acceptedTypes = new Set([LogType.error, LogType.warn, LogType.info, LogType.log, LogType.group, LogType.groupEnd, LogType.groupCollapsed, LogType.profile, LogType.profileEnd, LogType.time, LogType.status, LogType.clear]);\n            collapsedGroups = true;\n            break;\n        }\n\n        const cachedMakePathsRelative = makePathsRelative.bindContextCache(options.context, compilation.compiler.root);\n        let depthInCollapsedGroup = 0;\n\n        for (const [origin, logEntries] of compilation.logging) {\n          const debugMode = loggingDebug.some(fn => fn(origin));\n          if (logging === false && !debugMode) continue;\n          /** @type {KnownStatsLoggingEntry[]} */\n\n          const groupStack = [];\n          /** @type {KnownStatsLoggingEntry[]} */\n\n          const rootList = [];\n          let currentList = rootList;\n          let processedLogEntries = 0;\n\n          for (const entry of logEntries) {\n            let type = entry.type;\n            if (!debugMode && !acceptedTypes.has(type)) continue; // Expand groups in verbose and debug modes\n\n            if (type === LogType.groupCollapsed && (debugMode || collapsedGroups)) type = LogType.group;\n\n            if (depthInCollapsedGroup === 0) {\n              processedLogEntries++;\n            }\n\n            if (type === LogType.groupEnd) {\n              groupStack.pop();\n\n              if (groupStack.length > 0) {\n                currentList = groupStack[groupStack.length - 1].children;\n              } else {\n                currentList = rootList;\n              }\n\n              if (depthInCollapsedGroup > 0) depthInCollapsedGroup--;\n              continue;\n            }\n\n            let message = undefined;\n\n            if (entry.type === LogType.time) {\n              message = `${entry.args[0]}: ${entry.args[1] * 1000 + entry.args[2] / 1000000} ms`;\n            } else if (entry.args && entry.args.length > 0) {\n              message = util.format(entry.args[0], ...entry.args.slice(1));\n            }\n            /** @type {KnownStatsLoggingEntry} */\n\n\n            const newEntry = { ...entry,\n              type,\n              message,\n              trace: loggingTrace ? entry.trace : undefined,\n              children: type === LogType.group || type === LogType.groupCollapsed ? [] : undefined\n            };\n            currentList.push(newEntry);\n\n            if (newEntry.children) {\n              groupStack.push(newEntry);\n              currentList = newEntry.children;\n\n              if (depthInCollapsedGroup > 0) {\n                depthInCollapsedGroup++;\n              } else if (type === LogType.groupCollapsed) {\n                depthInCollapsedGroup = 1;\n              }\n            }\n          }\n\n          let name = cachedMakePathsRelative(origin).replace(/\\|/g, \" \");\n\n          if (name in object.logging) {\n            let i = 1;\n\n            while (`${name}#${i}` in object.logging) {\n              i++;\n            }\n\n            name = `${name}#${i}`;\n          }\n\n          object.logging[name] = {\n            entries: rootList,\n            filteredEntries: logEntries.length - processedLogEntries,\n            debug: debugMode\n          };\n        }\n      }\n    },\n    hash: (object, compilation) => {\n      object.hash = compilation.hash;\n    },\n    version: object => {\n      object.version = require(\"../../package.json\").version;\n    },\n    env: (object, compilation, context, _ref5) => {\n      let {\n        _env\n      } = _ref5;\n      object.env = _env;\n    },\n    timings: (object, compilation) => {\n      object.time = compilation.endTime - compilation.startTime;\n    },\n    builtAt: (object, compilation) => {\n      object.builtAt = compilation.endTime;\n    },\n    publicPath: (object, compilation) => {\n      object.publicPath = compilation.getPath(compilation.outputOptions.publicPath);\n    },\n    outputPath: (object, compilation) => {\n      object.outputPath = compilation.outputOptions.path;\n    },\n    assets: (object, compilation, context, options, factory) => {\n      const {\n        type\n      } = context;\n      /** @type {Map<string, Chunk[]>} */\n\n      const compilationFileToChunks = new Map();\n      /** @type {Map<string, Chunk[]>} */\n\n      const compilationAuxiliaryFileToChunks = new Map();\n\n      for (const chunk of compilation.chunks) {\n        for (const file of chunk.files) {\n          let array = compilationFileToChunks.get(file);\n\n          if (array === undefined) {\n            array = [];\n            compilationFileToChunks.set(file, array);\n          }\n\n          array.push(chunk);\n        }\n\n        for (const file of chunk.auxiliaryFiles) {\n          let array = compilationAuxiliaryFileToChunks.get(file);\n\n          if (array === undefined) {\n            array = [];\n            compilationAuxiliaryFileToChunks.set(file, array);\n          }\n\n          array.push(chunk);\n        }\n      }\n      /** @type {Map<string, PreprocessedAsset>} */\n\n\n      const assetMap = new Map();\n      /** @type {Set<PreprocessedAsset>} */\n\n      const assets = new Set();\n\n      for (const asset of compilation.getAssets()) {\n        /** @type {PreprocessedAsset} */\n        const item = { ...asset,\n          type: \"asset\",\n          related: undefined\n        };\n        assets.add(item);\n        assetMap.set(asset.name, item);\n      }\n\n      for (const item of assetMap.values()) {\n        const related = item.info.related;\n        if (!related) continue;\n\n        for (const type of Object.keys(related)) {\n          const relatedEntry = related[type];\n          const deps = Array.isArray(relatedEntry) ? relatedEntry : [relatedEntry];\n\n          for (const dep of deps) {\n            const depItem = assetMap.get(dep);\n            if (!depItem) continue;\n            assets.delete(depItem);\n            depItem.type = type;\n            item.related = item.related || [];\n            item.related.push(depItem);\n          }\n        }\n      }\n\n      object.assetsByChunkName = {};\n\n      for (const [file, chunks] of compilationFileToChunks) {\n        for (const chunk of chunks) {\n          const name = chunk.name;\n          if (!name) continue;\n\n          if (!Object.prototype.hasOwnProperty.call(object.assetsByChunkName, name)) {\n            object.assetsByChunkName[name] = [];\n          }\n\n          object.assetsByChunkName[name].push(file);\n        }\n      }\n\n      const groupedAssets = factory.create(`${type}.assets`, Array.from(assets), { ...context,\n        compilationFileToChunks,\n        compilationAuxiliaryFileToChunks\n      });\n      const limited = spaceLimited(groupedAssets, options.assetsSpace);\n      object.assets = limited.children;\n      object.filteredAssets = limited.filteredChildren;\n    },\n    chunks: (object, compilation, context, options, factory) => {\n      const {\n        type\n      } = context;\n      object.chunks = factory.create(`${type}.chunks`, Array.from(compilation.chunks), context);\n    },\n    modules: (object, compilation, context, options, factory) => {\n      const {\n        type\n      } = context;\n      const array = Array.from(compilation.modules);\n      const groupedModules = factory.create(`${type}.modules`, array, context);\n      const limited = spaceLimited(groupedModules, options.modulesSpace);\n      object.modules = limited.children;\n      object.filteredModules = limited.filteredChildren;\n    },\n    entrypoints: (object, compilation, context, _ref6, factory) => {\n      let {\n        entrypoints,\n        chunkGroups,\n        chunkGroupAuxiliary,\n        chunkGroupChildren\n      } = _ref6;\n      const {\n        type\n      } = context;\n      const array = Array.from(compilation.entrypoints, _ref7 => {\n        let [key, value] = _ref7;\n        return {\n          name: key,\n          chunkGroup: value\n        };\n      });\n\n      if (entrypoints === \"auto\" && !chunkGroups) {\n        if (array.length > 5) return;\n\n        if (!chunkGroupChildren && array.every(_ref8 => {\n          let {\n            chunkGroup\n          } = _ref8;\n          if (chunkGroup.chunks.length !== 1) return false;\n          const chunk = chunkGroup.chunks[0];\n          return chunk.files.size === 1 && (!chunkGroupAuxiliary || chunk.auxiliaryFiles.size === 0);\n        })) {\n          return;\n        }\n      }\n\n      object.entrypoints = factory.create(`${type}.entrypoints`, array, context);\n    },\n    chunkGroups: (object, compilation, context, options, factory) => {\n      const {\n        type\n      } = context;\n      const array = Array.from(compilation.namedChunkGroups, _ref9 => {\n        let [key, value] = _ref9;\n        return {\n          name: key,\n          chunkGroup: value\n        };\n      });\n      object.namedChunkGroups = factory.create(`${type}.namedChunkGroups`, array, context);\n    },\n    errors: (object, compilation, context, options, factory) => {\n      const {\n        type,\n        cachedGetErrors\n      } = context;\n      object.errors = factory.create(`${type}.errors`, cachedGetErrors(compilation), context);\n    },\n    errorsCount: (object, compilation, _ref10) => {\n      let {\n        cachedGetErrors\n      } = _ref10;\n      object.errorsCount = countWithChildren(compilation, c => cachedGetErrors(c));\n    },\n    warnings: (object, compilation, context, options, factory) => {\n      const {\n        type,\n        cachedGetWarnings\n      } = context;\n      object.warnings = factory.create(`${type}.warnings`, cachedGetWarnings(compilation), context);\n    },\n    warningsCount: (object, compilation, context, _ref11, factory) => {\n      let {\n        warningsFilter\n      } = _ref11;\n      const {\n        type,\n        cachedGetWarnings\n      } = context;\n      object.warningsCount = countWithChildren(compilation, (c, childType) => {\n        if (!warningsFilter && warningsFilter.length === 0) return cachedGetWarnings(c);\n        return factory.create(`${type}${childType}.warnings`, cachedGetWarnings(c), context).filter(warning => {\n          const warningString = Object.keys(warning).map(key => `${warning[key]}`).join(\"\\n\");\n          return !warningsFilter.some(filter => filter(warning, warningString));\n        });\n      });\n    },\n    errorDetails: (object, compilation, _ref12, _ref13) => {\n      let {\n        cachedGetErrors,\n        cachedGetWarnings\n      } = _ref12;\n      let {\n        errorDetails,\n        errors,\n        warnings\n      } = _ref13;\n\n      if (errorDetails === \"auto\") {\n        if (warnings) {\n          const warnings = cachedGetWarnings(compilation);\n          object.filteredWarningDetailsCount = warnings.map(e => typeof e !== \"string\" && e.details).filter(Boolean).length;\n        }\n\n        if (errors) {\n          const errors = cachedGetErrors(compilation);\n\n          if (errors.length >= 3) {\n            object.filteredErrorDetailsCount = errors.map(e => typeof e !== \"string\" && e.details).filter(Boolean).length;\n          }\n        }\n      }\n    },\n    children: (object, compilation, context, options, factory) => {\n      const {\n        type\n      } = context;\n      object.children = factory.create(`${type}.children`, compilation.children, context);\n    }\n  },\n  asset: {\n    _: (object, asset, context, options, factory) => {\n      const {\n        compilation\n      } = context;\n      object.type = asset.type;\n      object.name = asset.name;\n      object.size = asset.source.size();\n      object.emitted = compilation.emittedAssets.has(asset.name);\n      object.comparedForEmit = compilation.comparedForEmitAssets.has(asset.name);\n      const cached = !object.emitted && !object.comparedForEmit;\n      object.cached = cached;\n      object.info = asset.info;\n\n      if (!cached || options.cachedAssets) {\n        Object.assign(object, factory.create(`${context.type}$visible`, asset, context));\n      }\n    }\n  },\n  asset$visible: {\n    _: (object, asset, _ref14) => {\n      let {\n        compilation,\n        compilationFileToChunks,\n        compilationAuxiliaryFileToChunks\n      } = _ref14;\n      const chunks = compilationFileToChunks.get(asset.name) || [];\n      const auxiliaryChunks = compilationAuxiliaryFileToChunks.get(asset.name) || [];\n      object.chunkNames = uniqueOrderedArray(chunks, c => c.name ? [c.name] : [], compareIds);\n      object.chunkIdHints = uniqueOrderedArray(chunks, c => Array.from(c.idNameHints), compareIds);\n      object.auxiliaryChunkNames = uniqueOrderedArray(auxiliaryChunks, c => c.name ? [c.name] : [], compareIds);\n      object.auxiliaryChunkIdHints = uniqueOrderedArray(auxiliaryChunks, c => Array.from(c.idNameHints), compareIds);\n      object.filteredRelated = asset.related ? asset.related.length : undefined;\n    },\n    relatedAssets: (object, asset, context, options, factory) => {\n      const {\n        type\n      } = context;\n      object.related = factory.create(`${type.slice(0, -8)}.related`, asset.related, context);\n      object.filteredRelated = asset.related ? asset.related.length - object.related.length : undefined;\n    },\n    ids: (object, asset, _ref15) => {\n      let {\n        compilationFileToChunks,\n        compilationAuxiliaryFileToChunks\n      } = _ref15;\n      const chunks = compilationFileToChunks.get(asset.name) || [];\n      const auxiliaryChunks = compilationAuxiliaryFileToChunks.get(asset.name) || [];\n      object.chunks = uniqueOrderedArray(chunks, c => c.ids, compareIds);\n      object.auxiliaryChunks = uniqueOrderedArray(auxiliaryChunks, c => c.ids, compareIds);\n    },\n    performance: (object, asset) => {\n      object.isOverSizeLimit = SizeLimitsPlugin.isOverSizeLimit(asset.source);\n    }\n  },\n  chunkGroup: {\n    _: (object, _ref16, _ref17, _ref18) => {\n      let {\n        name,\n        chunkGroup\n      } = _ref16;\n      let {\n        compilation,\n        compilation: {\n          moduleGraph,\n          chunkGraph\n        }\n      } = _ref17;\n      let {\n        ids,\n        chunkGroupAuxiliary,\n        chunkGroupChildren,\n        chunkGroupMaxAssets\n      } = _ref18;\n      const children = chunkGroupChildren && chunkGroup.getChildrenByOrders(moduleGraph, chunkGraph);\n      /**\n       * @param {string} name Name\n       * @returns {{ name: string, size: number }} Asset object\n       */\n\n      const toAsset = name => {\n        const asset = compilation.getAsset(name);\n        return {\n          name,\n          size: asset ? asset.info.size : -1\n        };\n      };\n      /** @type {(total: number, asset: { size: number }) => number} */\n\n\n      const sizeReducer = (total, _ref19) => {\n        let {\n          size\n        } = _ref19;\n        return total + size;\n      };\n\n      const assets = uniqueArray(chunkGroup.chunks, c => c.files).map(toAsset);\n      const auxiliaryAssets = uniqueOrderedArray(chunkGroup.chunks, c => c.auxiliaryFiles, compareIds).map(toAsset);\n      const assetsSize = assets.reduce(sizeReducer, 0);\n      const auxiliaryAssetsSize = auxiliaryAssets.reduce(sizeReducer, 0);\n      /** @type {KnownStatsChunkGroup} */\n\n      const statsChunkGroup = {\n        name,\n        chunks: ids ? chunkGroup.chunks.map(c => c.id) : undefined,\n        assets: assets.length <= chunkGroupMaxAssets ? assets : undefined,\n        filteredAssets: assets.length <= chunkGroupMaxAssets ? 0 : assets.length,\n        assetsSize,\n        auxiliaryAssets: chunkGroupAuxiliary && auxiliaryAssets.length <= chunkGroupMaxAssets ? auxiliaryAssets : undefined,\n        filteredAuxiliaryAssets: chunkGroupAuxiliary && auxiliaryAssets.length <= chunkGroupMaxAssets ? 0 : auxiliaryAssets.length,\n        auxiliaryAssetsSize,\n        children: children ? mapObject(children, groups => groups.map(group => {\n          const assets = uniqueArray(group.chunks, c => c.files).map(toAsset);\n          const auxiliaryAssets = uniqueOrderedArray(group.chunks, c => c.auxiliaryFiles, compareIds).map(toAsset);\n          /** @type {KnownStatsChunkGroup} */\n\n          const childStatsChunkGroup = {\n            name: group.name,\n            chunks: ids ? group.chunks.map(c => c.id) : undefined,\n            assets: assets.length <= chunkGroupMaxAssets ? assets : undefined,\n            filteredAssets: assets.length <= chunkGroupMaxAssets ? 0 : assets.length,\n            auxiliaryAssets: chunkGroupAuxiliary && auxiliaryAssets.length <= chunkGroupMaxAssets ? auxiliaryAssets : undefined,\n            filteredAuxiliaryAssets: chunkGroupAuxiliary && auxiliaryAssets.length <= chunkGroupMaxAssets ? 0 : auxiliaryAssets.length\n          };\n          return childStatsChunkGroup;\n        })) : undefined,\n        childAssets: children ? mapObject(children, groups => {\n          /** @type {Set<string>} */\n          const set = new Set();\n\n          for (const group of groups) {\n            for (const chunk of group.chunks) {\n              for (const asset of chunk.files) {\n                set.add(asset);\n              }\n            }\n          }\n\n          return Array.from(set);\n        }) : undefined\n      };\n      Object.assign(object, statsChunkGroup);\n    },\n    performance: (object, _ref20) => {\n      let {\n        chunkGroup\n      } = _ref20;\n      object.isOverSizeLimit = SizeLimitsPlugin.isOverSizeLimit(chunkGroup);\n    }\n  },\n  module: {\n    _: (object, module, context, options, factory) => {\n      const {\n        compilation,\n        type\n      } = context;\n      const built = compilation.builtModules.has(module);\n      const codeGenerated = compilation.codeGeneratedModules.has(module);\n      const buildTimeExecuted = compilation.buildTimeExecutedModules.has(module);\n      /** @type {{[x: string]: number}} */\n\n      const sizes = {};\n\n      for (const sourceType of module.getSourceTypes()) {\n        sizes[sourceType] = module.size(sourceType);\n      }\n      /** @type {KnownStatsModule} */\n\n\n      const statsModule = {\n        type: \"module\",\n        moduleType: module.type,\n        layer: module.layer,\n        size: module.size(),\n        sizes,\n        built,\n        codeGenerated,\n        buildTimeExecuted,\n        cached: !built && !codeGenerated\n      };\n      Object.assign(object, statsModule);\n\n      if (built || codeGenerated || options.cachedModules) {\n        Object.assign(object, factory.create(`${type}$visible`, module, context));\n      }\n    }\n  },\n  module$visible: {\n    _: (object, module, context, _ref21, factory) => {\n      let {\n        requestShortener\n      } = _ref21;\n      const {\n        compilation,\n        type,\n        rootModules\n      } = context;\n      const {\n        moduleGraph\n      } = compilation;\n      /** @type {Module[]} */\n\n      const path = [];\n      const issuer = moduleGraph.getIssuer(module);\n      let current = issuer;\n\n      while (current) {\n        path.push(current);\n        current = moduleGraph.getIssuer(current);\n      }\n\n      path.reverse();\n      const profile = moduleGraph.getProfile(module);\n      const errors = module.getErrors();\n      const errorsCount = errors !== undefined ? countIterable(errors) : 0;\n      const warnings = module.getWarnings();\n      const warningsCount = warnings !== undefined ? countIterable(warnings) : 0;\n      /** @type {{[x: string]: number}} */\n\n      const sizes = {};\n\n      for (const sourceType of module.getSourceTypes()) {\n        sizes[sourceType] = module.size(sourceType);\n      }\n      /** @type {KnownStatsModule} */\n\n\n      const statsModule = {\n        identifier: module.identifier(),\n        name: module.readableIdentifier(requestShortener),\n        nameForCondition: module.nameForCondition(),\n        index: moduleGraph.getPreOrderIndex(module),\n        preOrderIndex: moduleGraph.getPreOrderIndex(module),\n        index2: moduleGraph.getPostOrderIndex(module),\n        postOrderIndex: moduleGraph.getPostOrderIndex(module),\n        cacheable: module.buildInfo.cacheable,\n        optional: module.isOptional(moduleGraph),\n        orphan: !type.endsWith(\"module.modules[].module$visible\") && compilation.chunkGraph.getNumberOfModuleChunks(module) === 0,\n        dependent: rootModules ? !rootModules.has(module) : undefined,\n        issuer: issuer && issuer.identifier(),\n        issuerName: issuer && issuer.readableIdentifier(requestShortener),\n        issuerPath: issuer && factory.create(`${type.slice(0, -8)}.issuerPath`, path, context),\n        failed: errorsCount > 0,\n        errors: errorsCount,\n        warnings: warningsCount\n      };\n      Object.assign(object, statsModule);\n\n      if (profile) {\n        object.profile = factory.create(`${type.slice(0, -8)}.profile`, profile, context);\n      }\n    },\n    ids: (object, module, _ref22) => {\n      let {\n        compilation: {\n          chunkGraph,\n          moduleGraph\n        }\n      } = _ref22;\n      object.id = chunkGraph.getModuleId(module);\n      const issuer = moduleGraph.getIssuer(module);\n      object.issuerId = issuer && chunkGraph.getModuleId(issuer);\n      object.chunks = Array.from(chunkGraph.getOrderedModuleChunksIterable(module, compareChunksById), chunk => chunk.id);\n    },\n    moduleAssets: (object, module) => {\n      object.assets = module.buildInfo.assets ? Object.keys(module.buildInfo.assets) : [];\n    },\n    reasons: (object, module, context, options, factory) => {\n      const {\n        type,\n        compilation: {\n          moduleGraph\n        }\n      } = context;\n      const groupsReasons = factory.create(`${type.slice(0, -8)}.reasons`, Array.from(moduleGraph.getIncomingConnections(module)), context);\n      const limited = spaceLimited(groupsReasons, options.reasonsSpace);\n      object.reasons = limited.children;\n      object.filteredReasons = limited.filteredChildren;\n    },\n    usedExports: (object, module, _ref23) => {\n      let {\n        runtime,\n        compilation: {\n          moduleGraph\n        }\n      } = _ref23;\n      const usedExports = moduleGraph.getUsedExports(module, runtime);\n\n      if (usedExports === null) {\n        object.usedExports = null;\n      } else if (typeof usedExports === \"boolean\") {\n        object.usedExports = usedExports;\n      } else {\n        object.usedExports = Array.from(usedExports);\n      }\n    },\n    providedExports: (object, module, _ref24) => {\n      let {\n        compilation: {\n          moduleGraph\n        }\n      } = _ref24;\n      const providedExports = moduleGraph.getProvidedExports(module);\n      object.providedExports = Array.isArray(providedExports) ? providedExports : null;\n    },\n    optimizationBailout: (object, module, _ref25, _ref26) => {\n      let {\n        compilation: {\n          moduleGraph\n        }\n      } = _ref25;\n      let {\n        requestShortener\n      } = _ref26;\n      object.optimizationBailout = moduleGraph.getOptimizationBailout(module).map(item => {\n        if (typeof item === \"function\") return item(requestShortener);\n        return item;\n      });\n    },\n    depth: (object, module, _ref27) => {\n      let {\n        compilation: {\n          moduleGraph\n        }\n      } = _ref27;\n      object.depth = moduleGraph.getDepth(module);\n    },\n    nestedModules: (object, module, context, options, factory) => {\n      const {\n        type\n      } = context;\n      const innerModules =\n      /** @type {Module & { modules?: Module[] }} */\n      module.modules;\n\n      if (Array.isArray(innerModules)) {\n        const groupedModules = factory.create(`${type.slice(0, -8)}.modules`, innerModules, context);\n        const limited = spaceLimited(groupedModules, options.nestedModulesSpace);\n        object.modules = limited.children;\n        object.filteredModules = limited.filteredChildren;\n      }\n    },\n    source: (object, module) => {\n      const originalSource = module.originalSource();\n\n      if (originalSource) {\n        object.source = originalSource.source();\n      }\n    }\n  },\n  profile: {\n    _: (object, profile) => {\n      /** @type {KnownStatsProfile} */\n      const statsProfile = {\n        total: profile.factory + profile.restoring + profile.integration + profile.building + profile.storing,\n        resolving: profile.factory,\n        restoring: profile.restoring,\n        building: profile.building,\n        integration: profile.integration,\n        storing: profile.storing,\n        additionalResolving: profile.additionalFactories,\n        additionalIntegration: profile.additionalIntegration,\n        // TODO remove this in webpack 6\n        factory: profile.factory,\n        // TODO remove this in webpack 6\n        dependencies: profile.additionalFactories\n      };\n      Object.assign(object, statsProfile);\n    }\n  },\n  moduleIssuer: {\n    _: (object, module, context, _ref28, factory) => {\n      let {\n        requestShortener\n      } = _ref28;\n      const {\n        compilation,\n        type\n      } = context;\n      const {\n        moduleGraph\n      } = compilation;\n      const profile = moduleGraph.getProfile(module);\n      /** @type {KnownStatsModuleIssuer} */\n\n      const statsModuleIssuer = {\n        identifier: module.identifier(),\n        name: module.readableIdentifier(requestShortener)\n      };\n      Object.assign(object, statsModuleIssuer);\n\n      if (profile) {\n        object.profile = factory.create(`${type}.profile`, profile, context);\n      }\n    },\n    ids: (object, module, _ref29) => {\n      let {\n        compilation: {\n          chunkGraph\n        }\n      } = _ref29;\n      object.id = chunkGraph.getModuleId(module);\n    }\n  },\n  moduleReason: {\n    _: (object, reason, _ref30, _ref31) => {\n      let {\n        runtime\n      } = _ref30;\n      let {\n        requestShortener\n      } = _ref31;\n      const dep = reason.dependency;\n      const moduleDep = dep && dep instanceof ModuleDependency ? dep : undefined;\n      /** @type {KnownStatsModuleReason} */\n\n      const statsModuleReason = {\n        moduleIdentifier: reason.originModule ? reason.originModule.identifier() : null,\n        module: reason.originModule ? reason.originModule.readableIdentifier(requestShortener) : null,\n        moduleName: reason.originModule ? reason.originModule.readableIdentifier(requestShortener) : null,\n        resolvedModuleIdentifier: reason.resolvedOriginModule ? reason.resolvedOriginModule.identifier() : null,\n        resolvedModule: reason.resolvedOriginModule ? reason.resolvedOriginModule.readableIdentifier(requestShortener) : null,\n        type: reason.dependency ? reason.dependency.type : null,\n        active: reason.isActive(runtime),\n        explanation: reason.explanation,\n        userRequest: moduleDep && moduleDep.userRequest || null\n      };\n      Object.assign(object, statsModuleReason);\n\n      if (reason.dependency) {\n        const locInfo = formatLocation(reason.dependency.loc);\n\n        if (locInfo) {\n          object.loc = locInfo;\n        }\n      }\n    },\n    ids: (object, reason, _ref32) => {\n      let {\n        compilation: {\n          chunkGraph\n        }\n      } = _ref32;\n      object.moduleId = reason.originModule ? chunkGraph.getModuleId(reason.originModule) : null;\n      object.resolvedModuleId = reason.resolvedOriginModule ? chunkGraph.getModuleId(reason.resolvedOriginModule) : null;\n    }\n  },\n  chunk: {\n    _: (object, chunk, _ref33) => {\n      let {\n        makePathsRelative,\n        compilation: {\n          chunkGraph\n        }\n      } = _ref33;\n      const childIdByOrder = chunk.getChildIdsByOrders(chunkGraph);\n      /** @type {KnownStatsChunk} */\n\n      const statsChunk = {\n        rendered: chunk.rendered,\n        initial: chunk.canBeInitial(),\n        entry: chunk.hasRuntime(),\n        recorded: AggressiveSplittingPlugin.wasChunkRecorded(chunk),\n        reason: chunk.chunkReason,\n        size: chunkGraph.getChunkModulesSize(chunk),\n        sizes: chunkGraph.getChunkModulesSizes(chunk),\n        names: chunk.name ? [chunk.name] : [],\n        idHints: Array.from(chunk.idNameHints),\n        runtime: chunk.runtime === undefined ? undefined : typeof chunk.runtime === \"string\" ? [makePathsRelative(chunk.runtime)] : Array.from(chunk.runtime.sort(), makePathsRelative),\n        files: Array.from(chunk.files),\n        auxiliaryFiles: Array.from(chunk.auxiliaryFiles).sort(compareIds),\n        hash: chunk.renderedHash,\n        childrenByOrder: childIdByOrder\n      };\n      Object.assign(object, statsChunk);\n    },\n    ids: (object, chunk) => {\n      object.id = chunk.id;\n    },\n    chunkRelations: (object, chunk, _ref34) => {\n      let {\n        compilation: {\n          chunkGraph\n        }\n      } = _ref34;\n\n      /** @type {Set<string|number>} */\n      const parents = new Set();\n      /** @type {Set<string|number>} */\n\n      const children = new Set();\n      /** @type {Set<string|number>} */\n\n      const siblings = new Set();\n\n      for (const chunkGroup of chunk.groupsIterable) {\n        for (const parentGroup of chunkGroup.parentsIterable) {\n          for (const chunk of parentGroup.chunks) {\n            parents.add(chunk.id);\n          }\n        }\n\n        for (const childGroup of chunkGroup.childrenIterable) {\n          for (const chunk of childGroup.chunks) {\n            children.add(chunk.id);\n          }\n        }\n\n        for (const sibling of chunkGroup.chunks) {\n          if (sibling !== chunk) siblings.add(sibling.id);\n        }\n      }\n\n      object.siblings = Array.from(siblings).sort(compareIds);\n      object.parents = Array.from(parents).sort(compareIds);\n      object.children = Array.from(children).sort(compareIds);\n    },\n    chunkModules: (object, chunk, context, options, factory) => {\n      const {\n        type,\n        compilation: {\n          chunkGraph\n        }\n      } = context;\n      const array = chunkGraph.getChunkModules(chunk);\n      const groupedModules = factory.create(`${type}.modules`, array, { ...context,\n        runtime: chunk.runtime,\n        rootModules: new Set(chunkGraph.getChunkRootModules(chunk))\n      });\n      const limited = spaceLimited(groupedModules, options.chunkModulesSpace);\n      object.modules = limited.children;\n      object.filteredModules = limited.filteredChildren;\n    },\n    chunkOrigins: (object, chunk, context, options, factory) => {\n      const {\n        type,\n        compilation: {\n          chunkGraph\n        }\n      } = context;\n      /** @type {Set<string>} */\n\n      const originsKeySet = new Set();\n      const origins = [];\n\n      for (const g of chunk.groupsIterable) {\n        origins.push(...g.origins);\n      }\n\n      const array = origins.filter(origin => {\n        const key = [origin.module ? chunkGraph.getModuleId(origin.module) : undefined, formatLocation(origin.loc), origin.request].join();\n        if (originsKeySet.has(key)) return false;\n        originsKeySet.add(key);\n        return true;\n      });\n      object.origins = factory.create(`${type}.origins`, array, context);\n    }\n  },\n  chunkOrigin: {\n    _: (object, origin, context, _ref35) => {\n      let {\n        requestShortener\n      } = _ref35;\n\n      /** @type {KnownStatsChunkOrigin} */\n      const statsChunkOrigin = {\n        module: origin.module ? origin.module.identifier() : \"\",\n        moduleIdentifier: origin.module ? origin.module.identifier() : \"\",\n        moduleName: origin.module ? origin.module.readableIdentifier(requestShortener) : \"\",\n        loc: formatLocation(origin.loc),\n        request: origin.request\n      };\n      Object.assign(object, statsChunkOrigin);\n    },\n    ids: (object, origin, _ref36) => {\n      let {\n        compilation: {\n          chunkGraph\n        }\n      } = _ref36;\n      object.moduleId = origin.module ? chunkGraph.getModuleId(origin.module) : undefined;\n    }\n  },\n  error: EXTRACT_ERROR,\n  warning: EXTRACT_ERROR,\n  moduleTraceItem: {\n    _: (object, _ref37, context, _ref38, factory) => {\n      let {\n        origin,\n        module\n      } = _ref37;\n      let {\n        requestShortener\n      } = _ref38;\n      const {\n        type,\n        compilation: {\n          moduleGraph\n        }\n      } = context;\n      object.originIdentifier = origin.identifier();\n      object.originName = origin.readableIdentifier(requestShortener);\n      object.moduleIdentifier = module.identifier();\n      object.moduleName = module.readableIdentifier(requestShortener);\n      const dependencies = Array.from(moduleGraph.getIncomingConnections(module)).filter(c => c.resolvedOriginModule === origin && c.dependency).map(c => c.dependency);\n      object.dependencies = factory.create(`${type}.dependencies`, Array.from(new Set(dependencies)), context);\n    },\n    ids: (object, _ref39, _ref40) => {\n      let {\n        origin,\n        module\n      } = _ref39;\n      let {\n        compilation: {\n          chunkGraph\n        }\n      } = _ref40;\n      object.originId = chunkGraph.getModuleId(origin);\n      object.moduleId = chunkGraph.getModuleId(module);\n    }\n  },\n  moduleTraceDependency: {\n    _: (object, dependency) => {\n      object.loc = formatLocation(dependency.loc);\n    }\n  }\n};\n/** @type {Record<string, Record<string, (thing: any, context: StatsFactoryContext, options: NormalizedStatsOptions) => boolean | undefined>>} */\n\nconst FILTER = {\n  \"module.reasons\": {\n    \"!orphanModules\": (reason, _ref41) => {\n      let {\n        compilation: {\n          chunkGraph\n        }\n      } = _ref41;\n\n      if (reason.originModule && chunkGraph.getNumberOfModuleChunks(reason.originModule) === 0) {\n        return false;\n      }\n    }\n  }\n};\n/** @type {Record<string, Record<string, (thing: Object, context: StatsFactoryContext, options: NormalizedStatsOptions) => boolean | undefined>>} */\n\nconst FILTER_RESULTS = {\n  \"compilation.warnings\": {\n    warningsFilter: util.deprecate((warning, context, _ref42) => {\n      let {\n        warningsFilter\n      } = _ref42;\n      const warningString = Object.keys(warning).map(key => `${warning[key]}`).join(\"\\n\");\n      return !warningsFilter.some(filter => filter(warning, warningString));\n    }, \"config.stats.warningsFilter is deprecated in favor of config.ignoreWarnings\", \"DEP_WEBPACK_STATS_WARNINGS_FILTER\")\n  }\n};\n/** @type {Record<string, (comparators: Function[], context: StatsFactoryContext) => void>} */\n\nconst MODULES_SORTER = {\n  _: (comparators, _ref43) => {\n    let {\n      compilation: {\n        moduleGraph\n      }\n    } = _ref43;\n    comparators.push(compareSelect(\n    /**\n     * @param {Module} m module\n     * @returns {number} depth\n     */\n    m => moduleGraph.getDepth(m), compareNumbers), compareSelect(\n    /**\n     * @param {Module} m module\n     * @returns {number} index\n     */\n    m => moduleGraph.getPreOrderIndex(m), compareNumbers), compareSelect(\n    /**\n     * @param {Module} m module\n     * @returns {string} identifier\n     */\n    m => m.identifier(), compareIds));\n  }\n};\n/** @type {Record<string, Record<string, (comparators: Function[], context: StatsFactoryContext) => void>>} */\n\nconst SORTERS = {\n  \"compilation.chunks\": {\n    _: comparators => {\n      comparators.push(compareSelect(c => c.id, compareIds));\n    }\n  },\n  \"compilation.modules\": MODULES_SORTER,\n  \"chunk.rootModules\": MODULES_SORTER,\n  \"chunk.modules\": MODULES_SORTER,\n  \"module.modules\": MODULES_SORTER,\n  \"module.reasons\": {\n    _: (comparators, _ref44) => {\n      let {\n        compilation: {\n          chunkGraph\n        }\n      } = _ref44;\n      comparators.push(compareSelect(x => x.originModule, compareModulesByIdentifier));\n      comparators.push(compareSelect(x => x.resolvedOriginModule, compareModulesByIdentifier));\n      comparators.push(compareSelect(x => x.dependency, concatComparators(compareSelect(\n      /**\n       * @param {Dependency} x dependency\n       * @returns {DependencyLocation} location\n       */\n      x => x.loc, compareLocations), compareSelect(x => x.type, compareIds))));\n    }\n  },\n  \"chunk.origins\": {\n    _: (comparators, _ref45) => {\n      let {\n        compilation: {\n          chunkGraph\n        }\n      } = _ref45;\n      comparators.push(compareSelect(origin => origin.module ? chunkGraph.getModuleId(origin.module) : undefined, compareIds), compareSelect(origin => formatLocation(origin.loc), compareIds), compareSelect(origin => origin.request, compareIds));\n    }\n  }\n};\n\nconst getItemSize = item => {\n  // Each item takes 1 line\n  // + the size of the children\n  // + 1 extra line when it has children and filteredChildren\n  return !item.children ? 1 : item.filteredChildren ? 2 + getTotalSize(item.children) : 1 + getTotalSize(item.children);\n};\n\nconst getTotalSize = children => {\n  let size = 0;\n\n  for (const child of children) {\n    size += getItemSize(child);\n  }\n\n  return size;\n};\n\nconst getTotalItems = children => {\n  let count = 0;\n\n  for (const child of children) {\n    if (!child.children && !child.filteredChildren) {\n      count++;\n    } else {\n      if (child.children) count += getTotalItems(child.children);\n      if (child.filteredChildren) count += child.filteredChildren;\n    }\n  }\n\n  return count;\n};\n\nconst collapse = children => {\n  // After collapse each child must take exactly one line\n  const newChildren = [];\n\n  for (const child of children) {\n    if (child.children) {\n      let filteredChildren = child.filteredChildren || 0;\n      filteredChildren += getTotalItems(child.children);\n      newChildren.push({ ...child,\n        children: undefined,\n        filteredChildren\n      });\n    } else {\n      newChildren.push(child);\n    }\n  }\n\n  return newChildren;\n};\n\nconst spaceLimited = function (itemsAndGroups, max) {\n  let filteredChildrenLineReserved = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n\n  if (max < 1) {\n    return {\n      children: undefined,\n      filteredChildren: getTotalItems(itemsAndGroups)\n    };\n  }\n  /** @type {any[] | undefined} */\n\n\n  let children = undefined;\n  /** @type {number | undefined} */\n\n  let filteredChildren = undefined; // This are the groups, which take 1+ lines each\n\n  const groups = []; // The sizes of the groups are stored in groupSizes\n\n  const groupSizes = []; // This are the items, which take 1 line each\n\n  const items = []; // The total of group sizes\n\n  let groupsSize = 0;\n\n  for (const itemOrGroup of itemsAndGroups) {\n    // is item\n    if (!itemOrGroup.children && !itemOrGroup.filteredChildren) {\n      items.push(itemOrGroup);\n    } else {\n      groups.push(itemOrGroup);\n      const size = getItemSize(itemOrGroup);\n      groupSizes.push(size);\n      groupsSize += size;\n    }\n  }\n\n  if (groupsSize + items.length <= max) {\n    // The total size in the current state fits into the max\n    // keep all\n    children = groups.length > 0 ? groups.concat(items) : items;\n  } else if (groups.length === 0) {\n    // slice items to max\n    // inner space marks that lines for filteredChildren already reserved\n    const limit = max - (filteredChildrenLineReserved ? 0 : 1);\n    filteredChildren = items.length - limit;\n    items.length = limit;\n    children = items;\n  } else {\n    // limit is the size when all groups are collapsed\n    const limit = groups.length + (filteredChildrenLineReserved || items.length === 0 ? 0 : 1);\n\n    if (limit < max) {\n      // calculate how much we are over the size limit\n      // this allows to approach the limit faster\n      let oversize; // If each group would take 1 line the total would be below the maximum\n      // collapse some groups, keep items\n\n      while ((oversize = groupsSize + items.length + (filteredChildren && !filteredChildrenLineReserved ? 1 : 0) - max) > 0) {\n        // Find the maximum group and process only this one\n        const maxGroupSize = Math.max(...groupSizes);\n\n        if (maxGroupSize < items.length) {\n          filteredChildren = items.length;\n          items.length = 0;\n          continue;\n        }\n\n        for (let i = 0; i < groups.length; i++) {\n          if (groupSizes[i] === maxGroupSize) {\n            const group = groups[i]; // run this algorithm recursively and limit the size of the children to\n            // current size - oversize / number of groups\n            // So it should always end up being smaller\n\n            const headerSize = group.filteredChildren ? 2 : 1;\n            const limited = spaceLimited(group.children, maxGroupSize - // we should use ceil to always feet in max\n            Math.ceil(oversize / groups.length) - // we substitute size of group head\n            headerSize, headerSize === 2);\n            groups[i] = { ...group,\n              children: limited.children,\n              filteredChildren: limited.filteredChildren ? (group.filteredChildren || 0) + limited.filteredChildren : group.filteredChildren\n            };\n            const newSize = getItemSize(groups[i]);\n            groupsSize -= maxGroupSize - newSize;\n            groupSizes[i] = newSize;\n            break;\n          }\n        }\n      }\n\n      children = groups.concat(items);\n    } else if (limit === max) {\n      // If we have only enough space to show one line per group and one line for the filtered items\n      // collapse all groups and items\n      children = collapse(groups);\n      filteredChildren = items.length;\n    } else {\n      // If we have no space\n      // collapse complete group\n      filteredChildren = getTotalItems(itemsAndGroups);\n    }\n  }\n\n  return {\n    children,\n    filteredChildren\n  };\n};\n\nconst assetGroup = (children, assets) => {\n  let size = 0;\n\n  for (const asset of children) {\n    size += asset.size;\n  }\n\n  return {\n    size\n  };\n};\n\nconst moduleGroup = (children, modules) => {\n  let size = 0;\n  const sizes = {};\n\n  for (const module of children) {\n    size += module.size;\n\n    for (const key of Object.keys(module.sizes)) {\n      sizes[key] = (sizes[key] || 0) + module.sizes[key];\n    }\n  }\n\n  return {\n    size,\n    sizes\n  };\n};\n\nconst reasonGroup = (children, reasons) => {\n  let active = false;\n\n  for (const reason of children) {\n    active = active || reason.active;\n  }\n\n  return {\n    active\n  };\n};\n\nconst GROUP_EXTENSION_REGEXP = /(\\.[^.]+?)(?:\\?|(?: \\+ \\d+ modules?)?$)/;\nconst GROUP_PATH_REGEXP = /(.+)[/\\\\][^/\\\\]+?(?:\\?|(?: \\+ \\d+ modules?)?$)/;\n/** @type {Record<string, (groupConfigs: GroupConfig[], context: StatsFactoryContext, options: NormalizedStatsOptions) => void>} */\n\nconst ASSETS_GROUPERS = {\n  _: (groupConfigs, context, options) => {\n    const groupByFlag = (name, exclude) => {\n      groupConfigs.push({\n        getKeys: asset => {\n          return asset[name] ? [\"1\"] : undefined;\n        },\n        getOptions: () => {\n          return {\n            groupChildren: !exclude,\n            force: exclude\n          };\n        },\n        createGroup: (key, children, assets) => {\n          return exclude ? {\n            type: \"assets by status\",\n            [name]: !!key,\n            filteredChildren: assets.length,\n            ...assetGroup(children, assets)\n          } : {\n            type: \"assets by status\",\n            [name]: !!key,\n            children,\n            ...assetGroup(children, assets)\n          };\n        }\n      });\n    };\n\n    const {\n      groupAssetsByEmitStatus,\n      groupAssetsByPath,\n      groupAssetsByExtension\n    } = options;\n\n    if (groupAssetsByEmitStatus) {\n      groupByFlag(\"emitted\");\n      groupByFlag(\"comparedForEmit\");\n      groupByFlag(\"isOverSizeLimit\");\n    }\n\n    if (groupAssetsByEmitStatus || !options.cachedAssets) {\n      groupByFlag(\"cached\", !options.cachedAssets);\n    }\n\n    if (groupAssetsByPath || groupAssetsByExtension) {\n      groupConfigs.push({\n        getKeys: asset => {\n          const extensionMatch = groupAssetsByExtension && GROUP_EXTENSION_REGEXP.exec(asset.name);\n          const extension = extensionMatch ? extensionMatch[1] : \"\";\n          const pathMatch = groupAssetsByPath && GROUP_PATH_REGEXP.exec(asset.name);\n          const path = pathMatch ? pathMatch[1].split(/[/\\\\]/) : [];\n          const keys = [];\n\n          if (groupAssetsByPath) {\n            keys.push(\".\");\n            if (extension) keys.push(path.length ? `${path.join(\"/\")}/*${extension}` : `*${extension}`);\n\n            while (path.length > 0) {\n              keys.push(path.join(\"/\") + \"/\");\n              path.pop();\n            }\n          } else {\n            if (extension) keys.push(`*${extension}`);\n          }\n\n          return keys;\n        },\n        createGroup: (key, children, assets) => {\n          return {\n            type: groupAssetsByPath ? \"assets by path\" : \"assets by extension\",\n            name: key,\n            children,\n            ...assetGroup(children, assets)\n          };\n        }\n      });\n    }\n  },\n  groupAssetsByInfo: (groupConfigs, context, options) => {\n    const groupByAssetInfoFlag = name => {\n      groupConfigs.push({\n        getKeys: asset => {\n          return asset.info && asset.info[name] ? [\"1\"] : undefined;\n        },\n        createGroup: (key, children, assets) => {\n          return {\n            type: \"assets by info\",\n            info: {\n              [name]: !!key\n            },\n            children,\n            ...assetGroup(children, assets)\n          };\n        }\n      });\n    };\n\n    groupByAssetInfoFlag(\"immutable\");\n    groupByAssetInfoFlag(\"development\");\n    groupByAssetInfoFlag(\"hotModuleReplacement\");\n  },\n  groupAssetsByChunk: (groupConfigs, context, options) => {\n    const groupByNames = name => {\n      groupConfigs.push({\n        getKeys: asset => {\n          return asset[name];\n        },\n        createGroup: (key, children, assets) => {\n          return {\n            type: \"assets by chunk\",\n            [name]: [key],\n            children,\n            ...assetGroup(children, assets)\n          };\n        }\n      });\n    };\n\n    groupByNames(\"chunkNames\");\n    groupByNames(\"auxiliaryChunkNames\");\n    groupByNames(\"chunkIdHints\");\n    groupByNames(\"auxiliaryChunkIdHints\");\n  },\n  excludeAssets: (groupConfigs, context, _ref46) => {\n    let {\n      excludeAssets\n    } = _ref46;\n    groupConfigs.push({\n      getKeys: asset => {\n        const ident = asset.name;\n        const excluded = excludeAssets.some(fn => fn(ident, asset));\n        if (excluded) return [\"excluded\"];\n      },\n      getOptions: () => ({\n        groupChildren: false,\n        force: true\n      }),\n      createGroup: (key, children, assets) => ({\n        type: \"hidden assets\",\n        filteredChildren: assets.length,\n        ...assetGroup(children, assets)\n      })\n    });\n  }\n};\n/** @type {function(\"module\" | \"chunk\" | \"root-of-chunk\" | \"nested\"): Record<string, (groupConfigs: GroupConfig[], context: StatsFactoryContext, options: NormalizedStatsOptions) => void>} */\n\nconst MODULES_GROUPERS = type => ({\n  _: (groupConfigs, context, options) => {\n    const groupByFlag = (name, type, exclude) => {\n      groupConfigs.push({\n        getKeys: module => {\n          return module[name] ? [\"1\"] : undefined;\n        },\n        getOptions: () => {\n          return {\n            groupChildren: !exclude,\n            force: exclude\n          };\n        },\n        createGroup: (key, children, modules) => {\n          return {\n            type,\n            [name]: !!key,\n            ...(exclude ? {\n              filteredChildren: modules.length\n            } : {\n              children\n            }),\n            ...moduleGroup(children, modules)\n          };\n        }\n      });\n    };\n\n    const {\n      groupModulesByCacheStatus,\n      groupModulesByLayer,\n      groupModulesByAttributes,\n      groupModulesByType,\n      groupModulesByPath,\n      groupModulesByExtension\n    } = options;\n\n    if (groupModulesByAttributes) {\n      groupByFlag(\"errors\", \"modules with errors\");\n      groupByFlag(\"warnings\", \"modules with warnings\");\n      groupByFlag(\"assets\", \"modules with assets\");\n      groupByFlag(\"optional\", \"optional modules\");\n    }\n\n    if (groupModulesByCacheStatus) {\n      groupByFlag(\"cacheable\", \"cacheable modules\");\n      groupByFlag(\"built\", \"built modules\");\n      groupByFlag(\"codeGenerated\", \"code generated modules\");\n    }\n\n    if (groupModulesByCacheStatus || !options.cachedModules) {\n      groupByFlag(\"cached\", \"cached modules\", !options.cachedModules);\n    }\n\n    if (groupModulesByAttributes || !options.orphanModules) {\n      groupByFlag(\"orphan\", \"orphan modules\", !options.orphanModules);\n    }\n\n    if (groupModulesByAttributes || !options.dependentModules) {\n      groupByFlag(\"dependent\", \"dependent modules\", !options.dependentModules);\n    }\n\n    if (groupModulesByType || !options.runtimeModules) {\n      groupConfigs.push({\n        getKeys: module => {\n          if (!module.moduleType) return;\n\n          if (groupModulesByType) {\n            return [module.moduleType.split(\"/\", 1)[0]];\n          } else if (module.moduleType === \"runtime\") {\n            return [\"runtime\"];\n          }\n        },\n        getOptions: key => {\n          const exclude = key === \"runtime\" && !options.runtimeModules;\n          return {\n            groupChildren: !exclude,\n            force: exclude\n          };\n        },\n        createGroup: (key, children, modules) => {\n          const exclude = key === \"runtime\" && !options.runtimeModules;\n          return {\n            type: `${key} modules`,\n            moduleType: key,\n            ...(exclude ? {\n              filteredChildren: modules.length\n            } : {\n              children\n            }),\n            ...moduleGroup(children, modules)\n          };\n        }\n      });\n    }\n\n    if (groupModulesByLayer) {\n      groupConfigs.push({\n        getKeys: module => {\n          return [module.layer];\n        },\n        createGroup: (key, children, modules) => {\n          return {\n            type: \"modules by layer\",\n            layer: key,\n            children,\n            ...moduleGroup(children, modules)\n          };\n        }\n      });\n    }\n\n    if (groupModulesByPath || groupModulesByExtension) {\n      groupConfigs.push({\n        getKeys: module => {\n          if (!module.name) return;\n          const resource = parseResource(module.name.split(\"!\").pop()).path;\n          const dataUrl = /^data:[^,;]+/.exec(resource);\n          if (dataUrl) return [dataUrl[0]];\n          const extensionMatch = groupModulesByExtension && GROUP_EXTENSION_REGEXP.exec(resource);\n          const extension = extensionMatch ? extensionMatch[1] : \"\";\n          const pathMatch = groupModulesByPath && GROUP_PATH_REGEXP.exec(resource);\n          const path = pathMatch ? pathMatch[1].split(/[/\\\\]/) : [];\n          const keys = [];\n\n          if (groupModulesByPath) {\n            if (extension) keys.push(path.length ? `${path.join(\"/\")}/*${extension}` : `*${extension}`);\n\n            while (path.length > 0) {\n              keys.push(path.join(\"/\") + \"/\");\n              path.pop();\n            }\n          } else {\n            if (extension) keys.push(`*${extension}`);\n          }\n\n          return keys;\n        },\n        createGroup: (key, children, modules) => {\n          const isDataUrl = key.startsWith(\"data:\");\n          return {\n            type: isDataUrl ? \"modules by mime type\" : groupModulesByPath ? \"modules by path\" : \"modules by extension\",\n            name: isDataUrl ? key.slice(\n            /* 'data:'.length */\n            5) : key,\n            children,\n            ...moduleGroup(children, modules)\n          };\n        }\n      });\n    }\n  },\n  excludeModules: (groupConfigs, context, _ref47) => {\n    let {\n      excludeModules\n    } = _ref47;\n    groupConfigs.push({\n      getKeys: module => {\n        const name = module.name;\n\n        if (name) {\n          const excluded = excludeModules.some(fn => fn(name, module, type));\n          if (excluded) return [\"1\"];\n        }\n      },\n      getOptions: () => ({\n        groupChildren: false,\n        force: true\n      }),\n      createGroup: (key, children, modules) => ({\n        type: \"hidden modules\",\n        filteredChildren: children.length,\n        ...moduleGroup(children, modules)\n      })\n    });\n  }\n});\n/** @type {Record<string, Record<string, (groupConfigs: GroupConfig[], context: StatsFactoryContext, options: NormalizedStatsOptions) => void>>} */\n\n\nconst RESULT_GROUPERS = {\n  \"compilation.assets\": ASSETS_GROUPERS,\n  \"asset.related\": ASSETS_GROUPERS,\n  \"compilation.modules\": MODULES_GROUPERS(\"module\"),\n  \"chunk.modules\": MODULES_GROUPERS(\"chunk\"),\n  \"chunk.rootModules\": MODULES_GROUPERS(\"root-of-chunk\"),\n  \"module.modules\": MODULES_GROUPERS(\"nested\"),\n  \"module.reasons\": {\n    groupReasonsByOrigin: groupConfigs => {\n      groupConfigs.push({\n        getKeys: reason => {\n          return [reason.module];\n        },\n        createGroup: (key, children, reasons) => {\n          return {\n            type: \"from origin\",\n            module: key,\n            children,\n            ...reasonGroup(children, reasons)\n          };\n        }\n      });\n    }\n  }\n}; // remove a prefixed \"!\" that can be specified to reverse sort order\n\nconst normalizeFieldKey = field => {\n  if (field[0] === \"!\") {\n    return field.slice(1);\n  }\n\n  return field;\n}; // if a field is prefixed by a \"!\" reverse sort order\n\n\nconst sortOrderRegular = field => {\n  if (field[0] === \"!\") {\n    return false;\n  }\n\n  return true;\n};\n/**\n * @param {string} field field name\n * @returns {function(Object, Object): number} comparators\n */\n\n\nconst sortByField = field => {\n  if (!field) {\n    /**\n     * @param {any} a first\n     * @param {any} b second\n     * @returns {-1|0|1} zero\n     */\n    const noSort = (a, b) => 0;\n\n    return noSort;\n  }\n\n  const fieldKey = normalizeFieldKey(field);\n  let sortFn = compareSelect(m => m[fieldKey], compareIds); // if a field is prefixed with a \"!\" the sort is reversed!\n\n  const sortIsRegular = sortOrderRegular(field);\n\n  if (!sortIsRegular) {\n    const oldSortFn = sortFn;\n\n    sortFn = (a, b) => oldSortFn(b, a);\n  }\n\n  return sortFn;\n};\n\nconst ASSET_SORTERS = {\n  /** @type {(comparators: Function[], context: StatsFactoryContext, options: NormalizedStatsOptions) => void} */\n  assetsSort: (comparators, context, _ref48) => {\n    let {\n      assetsSort\n    } = _ref48;\n    comparators.push(sortByField(assetsSort));\n  },\n  _: comparators => {\n    comparators.push(compareSelect(a => a.name, compareIds));\n  }\n};\n/** @type {Record<string, Record<string, (comparators: Function[], context: StatsFactoryContext, options: NormalizedStatsOptions) => void>>} */\n\nconst RESULT_SORTERS = {\n  \"compilation.chunks\": {\n    chunksSort: (comparators, context, _ref49) => {\n      let {\n        chunksSort\n      } = _ref49;\n      comparators.push(sortByField(chunksSort));\n    }\n  },\n  \"compilation.modules\": {\n    modulesSort: (comparators, context, _ref50) => {\n      let {\n        modulesSort\n      } = _ref50;\n      comparators.push(sortByField(modulesSort));\n    }\n  },\n  \"chunk.modules\": {\n    chunkModulesSort: (comparators, context, _ref51) => {\n      let {\n        chunkModulesSort\n      } = _ref51;\n      comparators.push(sortByField(chunkModulesSort));\n    }\n  },\n  \"module.modules\": {\n    nestedModulesSort: (comparators, context, _ref52) => {\n      let {\n        nestedModulesSort\n      } = _ref52;\n      comparators.push(sortByField(nestedModulesSort));\n    }\n  },\n  \"compilation.assets\": ASSET_SORTERS,\n  \"asset.related\": ASSET_SORTERS\n};\n/**\n * @param {Record<string, Record<string, Function>>} config the config see above\n * @param {NormalizedStatsOptions} options stats options\n * @param {function(string, Function): void} fn handler function called for every active line in config\n * @returns {void}\n */\n\nconst iterateConfig = (config, options, fn) => {\n  for (const hookFor of Object.keys(config)) {\n    const subConfig = config[hookFor];\n\n    for (const option of Object.keys(subConfig)) {\n      if (option !== \"_\") {\n        if (option.startsWith(\"!\")) {\n          if (options[option.slice(1)]) continue;\n        } else {\n          const value = options[option];\n          if (value === false || value === undefined || Array.isArray(value) && value.length === 0) continue;\n        }\n      }\n\n      fn(hookFor, subConfig[option]);\n    }\n  }\n};\n/** @type {Record<string, string>} */\n\n\nconst ITEM_NAMES = {\n  \"compilation.children[]\": \"compilation\",\n  \"compilation.modules[]\": \"module\",\n  \"compilation.entrypoints[]\": \"chunkGroup\",\n  \"compilation.namedChunkGroups[]\": \"chunkGroup\",\n  \"compilation.errors[]\": \"error\",\n  \"compilation.warnings[]\": \"warning\",\n  \"chunk.modules[]\": \"module\",\n  \"chunk.rootModules[]\": \"module\",\n  \"chunk.origins[]\": \"chunkOrigin\",\n  \"compilation.chunks[]\": \"chunk\",\n  \"compilation.assets[]\": \"asset\",\n  \"asset.related[]\": \"asset\",\n  \"module.issuerPath[]\": \"moduleIssuer\",\n  \"module.reasons[]\": \"moduleReason\",\n  \"module.modules[]\": \"module\",\n  \"module.children[]\": \"module\",\n  \"moduleTrace[]\": \"moduleTraceItem\",\n  \"moduleTraceItem.dependencies[]\": \"moduleTraceDependency\"\n};\n/**\n * @param {Object[]} items items to be merged\n * @returns {Object} an object\n */\n\nconst mergeToObject = items => {\n  const obj = Object.create(null);\n\n  for (const item of items) {\n    obj[item.name] = item;\n  }\n\n  return obj;\n};\n/** @type {Record<string, (items: Object[]) => any>} */\n\n\nconst MERGER = {\n  \"compilation.entrypoints\": mergeToObject,\n  \"compilation.namedChunkGroups\": mergeToObject\n};\n\nclass DefaultStatsFactoryPlugin {\n  /**\n   * Apply the plugin\n   * @param {Compiler} compiler the compiler instance\n   * @returns {void}\n   */\n  apply(compiler) {\n    compiler.hooks.compilation.tap(\"DefaultStatsFactoryPlugin\", compilation => {\n      compilation.hooks.statsFactory.tap(\"DefaultStatsFactoryPlugin\", (stats, options, context) => {\n        iterateConfig(SIMPLE_EXTRACTORS, options, (hookFor, fn) => {\n          stats.hooks.extract.for(hookFor).tap(\"DefaultStatsFactoryPlugin\", (obj, data, ctx) => fn(obj, data, ctx, options, stats));\n        });\n        iterateConfig(FILTER, options, (hookFor, fn) => {\n          stats.hooks.filter.for(hookFor).tap(\"DefaultStatsFactoryPlugin\", (item, ctx, idx, i) => fn(item, ctx, options, idx, i));\n        });\n        iterateConfig(FILTER_RESULTS, options, (hookFor, fn) => {\n          stats.hooks.filterResults.for(hookFor).tap(\"DefaultStatsFactoryPlugin\", (item, ctx, idx, i) => fn(item, ctx, options, idx, i));\n        });\n        iterateConfig(SORTERS, options, (hookFor, fn) => {\n          stats.hooks.sort.for(hookFor).tap(\"DefaultStatsFactoryPlugin\", (comparators, ctx) => fn(comparators, ctx, options));\n        });\n        iterateConfig(RESULT_SORTERS, options, (hookFor, fn) => {\n          stats.hooks.sortResults.for(hookFor).tap(\"DefaultStatsFactoryPlugin\", (comparators, ctx) => fn(comparators, ctx, options));\n        });\n        iterateConfig(RESULT_GROUPERS, options, (hookFor, fn) => {\n          stats.hooks.groupResults.for(hookFor).tap(\"DefaultStatsFactoryPlugin\", (groupConfigs, ctx) => fn(groupConfigs, ctx, options));\n        });\n\n        for (const key of Object.keys(ITEM_NAMES)) {\n          const itemName = ITEM_NAMES[key];\n          stats.hooks.getItemName.for(key).tap(\"DefaultStatsFactoryPlugin\", () => itemName);\n        }\n\n        for (const key of Object.keys(MERGER)) {\n          const merger = MERGER[key];\n          stats.hooks.merge.for(key).tap(\"DefaultStatsFactoryPlugin\", merger);\n        }\n\n        if (options.children) {\n          if (Array.isArray(options.children)) {\n            stats.hooks.getItemFactory.for(\"compilation.children[].compilation\").tap(\"DefaultStatsFactoryPlugin\", (comp, _ref53) => {\n              let {\n                _index: idx\n              } = _ref53;\n\n              if (idx < options.children.length) {\n                return compilation.createStatsFactory(compilation.createStatsOptions(options.children[idx], context));\n              }\n            });\n          } else if (options.children !== true) {\n            const childFactory = compilation.createStatsFactory(compilation.createStatsOptions(options.children, context));\n            stats.hooks.getItemFactory.for(\"compilation.children[].compilation\").tap(\"DefaultStatsFactoryPlugin\", () => {\n              return childFactory;\n            });\n          }\n        }\n      });\n    });\n  }\n\n}\n\nmodule.exports = DefaultStatsFactoryPlugin;","map":{"version":3,"names":["util","require","ModuleDependency","formatLocation","LogType","AggressiveSplittingPlugin","SizeLimitsPlugin","countIterable","compareLocations","compareChunksById","compareNumbers","compareIds","concatComparators","compareSelect","compareModulesByIdentifier","makePathsRelative","parseResource","uniqueArray","items","selector","set","Set","item","i","add","Array","from","uniqueOrderedArray","comparator","sort","mapObject","obj","fn","newObj","Object","create","key","keys","countWithChildren","compilation","getItems","count","length","child","children","c","type","EXTRACT_ERROR","_","object","error","context","requestShortener","message","chunk","chunkName","name","chunkEntry","hasRuntime","chunkInitial","canBeInitial","file","module","moduleIdentifier","identifier","moduleName","readableIdentifier","loc","ids","chunkGraph","chunkId","id","moduleId","getModuleId","moduleTrace","options","factory","moduleGraph","visitedModules","current","has","origin","getIssuer","push","errorDetails","cachedGetErrors","cachedGetWarnings","endsWith","details","errorStack","stack","SIMPLE_EXTRACTORS","bindContextCache","compiler","root","map","WeakMap","get","errors","getErrors","warnings","getWarnings","needAdditionalPass","logging","loggingDebug","loggingTrace","acceptedTypes","collapsedGroups","warn","info","log","group","groupEnd","groupCollapsed","clear","profile","profileEnd","time","status","cachedMakePathsRelative","depthInCollapsedGroup","logEntries","debugMode","some","groupStack","rootList","currentList","processedLogEntries","entry","pop","undefined","args","format","slice","newEntry","trace","replace","entries","filteredEntries","debug","hash","version","env","_env","timings","endTime","startTime","builtAt","publicPath","getPath","outputOptions","outputPath","path","assets","compilationFileToChunks","Map","compilationAuxiliaryFileToChunks","chunks","files","array","auxiliaryFiles","assetMap","asset","getAssets","related","values","relatedEntry","deps","isArray","dep","depItem","delete","assetsByChunkName","prototype","hasOwnProperty","call","groupedAssets","limited","spaceLimited","assetsSpace","filteredAssets","filteredChildren","modules","groupedModules","modulesSpace","filteredModules","entrypoints","chunkGroups","chunkGroupAuxiliary","chunkGroupChildren","value","chunkGroup","every","size","namedChunkGroups","errorsCount","warningsCount","warningsFilter","childType","filter","warning","warningString","join","filteredWarningDetailsCount","e","Boolean","filteredErrorDetailsCount","source","emitted","emittedAssets","comparedForEmit","comparedForEmitAssets","cached","cachedAssets","assign","asset$visible","auxiliaryChunks","chunkNames","chunkIdHints","idNameHints","auxiliaryChunkNames","auxiliaryChunkIdHints","filteredRelated","relatedAssets","performance","isOverSizeLimit","chunkGroupMaxAssets","getChildrenByOrders","toAsset","getAsset","sizeReducer","total","auxiliaryAssets","assetsSize","reduce","auxiliaryAssetsSize","statsChunkGroup","filteredAuxiliaryAssets","groups","childStatsChunkGroup","childAssets","built","builtModules","codeGenerated","codeGeneratedModules","buildTimeExecuted","buildTimeExecutedModules","sizes","sourceType","getSourceTypes","statsModule","moduleType","layer","cachedModules","module$visible","rootModules","issuer","reverse","getProfile","nameForCondition","index","getPreOrderIndex","preOrderIndex","index2","getPostOrderIndex","postOrderIndex","cacheable","buildInfo","optional","isOptional","orphan","getNumberOfModuleChunks","dependent","issuerName","issuerPath","failed","issuerId","getOrderedModuleChunksIterable","moduleAssets","reasons","groupsReasons","getIncomingConnections","reasonsSpace","filteredReasons","usedExports","runtime","getUsedExports","providedExports","getProvidedExports","optimizationBailout","getOptimizationBailout","depth","getDepth","nestedModules","innerModules","nestedModulesSpace","originalSource","statsProfile","restoring","integration","building","storing","resolving","additionalResolving","additionalFactories","additionalIntegration","dependencies","moduleIssuer","statsModuleIssuer","moduleReason","reason","dependency","moduleDep","statsModuleReason","originModule","resolvedModuleIdentifier","resolvedOriginModule","resolvedModule","active","isActive","explanation","userRequest","locInfo","resolvedModuleId","childIdByOrder","getChildIdsByOrders","statsChunk","rendered","initial","recorded","wasChunkRecorded","chunkReason","getChunkModulesSize","getChunkModulesSizes","names","idHints","renderedHash","childrenByOrder","chunkRelations","parents","siblings","groupsIterable","parentGroup","parentsIterable","childGroup","childrenIterable","sibling","chunkModules","getChunkModules","getChunkRootModules","chunkModulesSpace","chunkOrigins","originsKeySet","origins","g","request","chunkOrigin","statsChunkOrigin","moduleTraceItem","originIdentifier","originName","originId","moduleTraceDependency","FILTER","FILTER_RESULTS","deprecate","MODULES_SORTER","comparators","m","SORTERS","x","getItemSize","getTotalSize","getTotalItems","collapse","newChildren","itemsAndGroups","max","filteredChildrenLineReserved","groupSizes","groupsSize","itemOrGroup","concat","limit","oversize","maxGroupSize","Math","headerSize","ceil","newSize","assetGroup","moduleGroup","reasonGroup","GROUP_EXTENSION_REGEXP","GROUP_PATH_REGEXP","ASSETS_GROUPERS","groupConfigs","groupByFlag","exclude","getKeys","getOptions","groupChildren","force","createGroup","groupAssetsByEmitStatus","groupAssetsByPath","groupAssetsByExtension","extensionMatch","exec","extension","pathMatch","split","groupAssetsByInfo","groupByAssetInfoFlag","groupAssetsByChunk","groupByNames","excludeAssets","ident","excluded","MODULES_GROUPERS","groupModulesByCacheStatus","groupModulesByLayer","groupModulesByAttributes","groupModulesByType","groupModulesByPath","groupModulesByExtension","orphanModules","dependentModules","runtimeModules","resource","dataUrl","isDataUrl","startsWith","excludeModules","RESULT_GROUPERS","groupReasonsByOrigin","normalizeFieldKey","field","sortOrderRegular","sortByField","noSort","a","b","fieldKey","sortFn","sortIsRegular","oldSortFn","ASSET_SORTERS","assetsSort","RESULT_SORTERS","chunksSort","modulesSort","chunkModulesSort","nestedModulesSort","iterateConfig","config","hookFor","subConfig","option","ITEM_NAMES","mergeToObject","MERGER","DefaultStatsFactoryPlugin","apply","hooks","tap","statsFactory","stats","extract","for","data","ctx","idx","filterResults","sortResults","groupResults","itemName","getItemName","merger","merge","getItemFactory","comp","_index","createStatsFactory","createStatsOptions","childFactory","exports"],"sources":["/Users/arpanbhandari/Documents/cod-ing/React/newsapp/node_modules/webpack/lib/stats/DefaultStatsFactoryPlugin.js"],"sourcesContent":["/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\n\"use strict\";\n\nconst util = require(\"util\");\nconst ModuleDependency = require(\"../dependencies/ModuleDependency\");\nconst formatLocation = require(\"../formatLocation\");\nconst { LogType } = require(\"../logging/Logger\");\nconst AggressiveSplittingPlugin = require(\"../optimize/AggressiveSplittingPlugin\");\nconst SizeLimitsPlugin = require(\"../performance/SizeLimitsPlugin\");\nconst { countIterable } = require(\"../util/IterableHelpers\");\nconst {\n\tcompareLocations,\n\tcompareChunksById,\n\tcompareNumbers,\n\tcompareIds,\n\tconcatComparators,\n\tcompareSelect,\n\tcompareModulesByIdentifier\n} = require(\"../util/comparators\");\nconst { makePathsRelative, parseResource } = require(\"../util/identifier\");\n\n/** @typedef {import(\"webpack-sources\").Source} Source */\n/** @typedef {import(\"../Chunk\")} Chunk */\n/** @typedef {import(\"../ChunkGroup\")} ChunkGroup */\n/** @typedef {import(\"../ChunkGroup\").OriginRecord} OriginRecord */\n/** @typedef {import(\"../Compilation\")} Compilation */\n/** @typedef {import(\"../Compilation\").Asset} Asset */\n/** @typedef {import(\"../Compilation\").AssetInfo} AssetInfo */\n/** @typedef {import(\"../Compilation\").NormalizedStatsOptions} NormalizedStatsOptions */\n/** @typedef {import(\"../Compiler\")} Compiler */\n/** @typedef {import(\"../Dependency\")} Dependency */\n/** @typedef {import(\"../Dependency\").DependencyLocation} DependencyLocation */\n/** @typedef {import(\"../Module\")} Module */\n/** @typedef {import(\"../ModuleGraphConnection\")} ModuleGraphConnection */\n/** @typedef {import(\"../ModuleProfile\")} ModuleProfile */\n/** @typedef {import(\"../RequestShortener\")} RequestShortener */\n/** @typedef {import(\"../WebpackError\")} WebpackError */\n/** @template T @typedef {import(\"../util/comparators\").Comparator<T>} Comparator<T> */\n/** @typedef {import(\"../util/runtime\").RuntimeSpec} RuntimeSpec */\n/** @typedef {import(\"../util/smartGrouping\").GroupConfig<any, object>} GroupConfig */\n/** @typedef {import(\"./StatsFactory\")} StatsFactory */\n/** @typedef {import(\"./StatsFactory\").StatsFactoryContext} StatsFactoryContext */\n\n/** @typedef {KnownStatsCompilation & Record<string, any>} StatsCompilation */\n/**\n * @typedef {Object} KnownStatsCompilation\n * @property {any=} env\n * @property {string=} name\n * @property {string=} hash\n * @property {string=} version\n * @property {number=} time\n * @property {number=} builtAt\n * @property {boolean=} needAdditionalPass\n * @property {string=} publicPath\n * @property {string=} outputPath\n * @property {Record<string, string[]>=} assetsByChunkName\n * @property {StatsAsset[]=} assets\n * @property {number=} filteredAssets\n * @property {StatsChunk[]=} chunks\n * @property {StatsModule[]=} modules\n * @property {number=} filteredModules\n * @property {Record<string, StatsChunkGroup>=} entrypoints\n * @property {Record<string, StatsChunkGroup>=} namedChunkGroups\n * @property {StatsError[]=} errors\n * @property {number=} errorsCount\n * @property {StatsError[]=} warnings\n * @property {number=} warningsCount\n * @property {StatsCompilation[]=} children\n * @property {Record<string, StatsLogging>=} logging\n */\n\n/** @typedef {KnownStatsLogging & Record<string, any>} StatsLogging */\n/**\n * @typedef {Object} KnownStatsLogging\n * @property {StatsLoggingEntry[]} entries\n * @property {number} filteredEntries\n * @property {boolean} debug\n */\n\n/** @typedef {KnownStatsLoggingEntry & Record<string, any>} StatsLoggingEntry */\n/**\n * @typedef {Object} KnownStatsLoggingEntry\n * @property {string} type\n * @property {string} message\n * @property {string[]=} trace\n * @property {StatsLoggingEntry[]=} children\n * @property {any[]=} args\n * @property {number=} time\n */\n\n/** @typedef {KnownStatsAsset & Record<string, any>} StatsAsset */\n/**\n * @typedef {Object} KnownStatsAsset\n * @property {string} type\n * @property {string} name\n * @property {AssetInfo} info\n * @property {number} size\n * @property {boolean} emitted\n * @property {boolean} comparedForEmit\n * @property {boolean} cached\n * @property {StatsAsset[]=} related\n * @property {(string|number)[]=} chunkNames\n * @property {(string|number)[]=} chunkIdHints\n * @property {(string|number)[]=} chunks\n * @property {(string|number)[]=} auxiliaryChunkNames\n * @property {(string|number)[]=} auxiliaryChunks\n * @property {(string|number)[]=} auxiliaryChunkIdHints\n * @property {number=} filteredRelated\n * @property {boolean=} isOverSizeLimit\n */\n\n/** @typedef {KnownStatsChunkGroup & Record<string, any>} StatsChunkGroup */\n/**\n * @typedef {Object} KnownStatsChunkGroup\n * @property {string=} name\n * @property {(string|number)[]=} chunks\n * @property {({ name: string, size?: number })[]=} assets\n * @property {number=} filteredAssets\n * @property {number=} assetsSize\n * @property {({ name: string, size?: number })[]=} auxiliaryAssets\n * @property {number=} filteredAuxiliaryAssets\n * @property {number=} auxiliaryAssetsSize\n * @property {{ [x: string]: StatsChunkGroup[] }=} children\n * @property {{ [x: string]: string[] }=} childAssets\n * @property {boolean=} isOverSizeLimit\n */\n\n/** @typedef {KnownStatsModule & Record<string, any>} StatsModule */\n/**\n * @typedef {Object} KnownStatsModule\n * @property {string=} type\n * @property {string=} moduleType\n * @property {string=} layer\n * @property {string=} identifier\n * @property {string=} name\n * @property {string=} nameForCondition\n * @property {number=} index\n * @property {number=} preOrderIndex\n * @property {number=} index2\n * @property {number=} postOrderIndex\n * @property {number=} size\n * @property {{[x: string]: number}=} sizes\n * @property {boolean=} cacheable\n * @property {boolean=} built\n * @property {boolean=} codeGenerated\n * @property {boolean=} buildTimeExecuted\n * @property {boolean=} cached\n * @property {boolean=} optional\n * @property {boolean=} orphan\n * @property {string|number=} id\n * @property {string|number=} issuerId\n * @property {(string|number)[]=} chunks\n * @property {(string|number)[]=} assets\n * @property {boolean=} dependent\n * @property {string=} issuer\n * @property {string=} issuerName\n * @property {StatsModuleIssuer[]=} issuerPath\n * @property {boolean=} failed\n * @property {number=} errors\n * @property {number=} warnings\n * @property {StatsProfile=} profile\n * @property {StatsModuleReason[]=} reasons\n * @property {(boolean | string[])=} usedExports\n * @property {string[]=} providedExports\n * @property {string[]=} optimizationBailout\n * @property {number=} depth\n * @property {StatsModule[]=} modules\n * @property {number=} filteredModules\n * @property {ReturnType<Source[\"source\"]>=} source\n */\n\n/** @typedef {KnownStatsProfile & Record<string, any>} StatsProfile */\n/**\n * @typedef {Object} KnownStatsProfile\n * @property {number} total\n * @property {number} resolving\n * @property {number} restoring\n * @property {number} building\n * @property {number} integration\n * @property {number} storing\n * @property {number} additionalResolving\n * @property {number} additionalIntegration\n * @property {number} factory\n * @property {number} dependencies\n */\n\n/** @typedef {KnownStatsModuleIssuer & Record<string, any>} StatsModuleIssuer */\n/**\n * @typedef {Object} KnownStatsModuleIssuer\n * @property {string=} identifier\n * @property {string=} name\n * @property {(string|number)=} id\n * @property {StatsProfile=} profile\n */\n\n/** @typedef {KnownStatsModuleReason & Record<string, any>} StatsModuleReason */\n/**\n * @typedef {Object} KnownStatsModuleReason\n * @property {string=} moduleIdentifier\n * @property {string=} module\n * @property {string=} moduleName\n * @property {string=} resolvedModuleIdentifier\n * @property {string=} resolvedModule\n * @property {string=} type\n * @property {boolean} active\n * @property {string=} explanation\n * @property {string=} userRequest\n * @property {string=} loc\n * @property {(string|number)=} moduleId\n * @property {(string|number)=} resolvedModuleId\n */\n\n/** @typedef {KnownStatsChunk & Record<string, any>} StatsChunk */\n/**\n * @typedef {Object} KnownStatsChunk\n * @property {boolean} rendered\n * @property {boolean} initial\n * @property {boolean} entry\n * @property {boolean} recorded\n * @property {string=} reason\n * @property {number} size\n * @property {Record<string, number>=} sizes\n * @property {string[]=} names\n * @property {string[]=} idHints\n * @property {string[]=} runtime\n * @property {string[]=} files\n * @property {string[]=} auxiliaryFiles\n * @property {string} hash\n * @property {Record<string, (string|number)[]>=} childrenByOrder\n * @property {(string|number)=} id\n * @property {(string|number)[]=} siblings\n * @property {(string|number)[]=} parents\n * @property {(string|number)[]=} children\n * @property {StatsModule[]=} modules\n * @property {number=} filteredModules\n * @property {StatsChunkOrigin[]=} origins\n */\n\n/** @typedef {KnownStatsChunkOrigin & Record<string, any>} StatsChunkOrigin */\n/**\n * @typedef {Object} KnownStatsChunkOrigin\n * @property {string=} module\n * @property {string=} moduleIdentifier\n * @property {string=} moduleName\n * @property {string=} loc\n * @property {string=} request\n * @property {(string|number)=} moduleId\n */\n\n/** @typedef {KnownStatsModuleTraceItem & Record<string, any>} StatsModuleTraceItem */\n/**\n * @typedef {Object} KnownStatsModuleTraceItem\n * @property {string=} originIdentifier\n * @property {string=} originName\n * @property {string=} moduleIdentifier\n * @property {string=} moduleName\n * @property {StatsModuleTraceDependency[]=} dependencies\n * @property {(string|number)=} originId\n * @property {(string|number)=} moduleId\n */\n\n/** @typedef {KnownStatsModuleTraceDependency & Record<string, any>} StatsModuleTraceDependency */\n/**\n * @typedef {Object} KnownStatsModuleTraceDependency\n * @property {string=} loc\n */\n\n/** @typedef {KnownStatsError & Record<string, any>} StatsError */\n/**\n * @typedef {Object} KnownStatsError\n * @property {string} message\n * @property {string=} chunkName\n * @property {boolean=} chunkEntry\n * @property {boolean=} chunkInitial\n * @property {string=} file\n * @property {string=} moduleIdentifier\n * @property {string=} moduleName\n * @property {string=} loc\n * @property {string|number=} chunkId\n * @property {string|number=} moduleId\n * @property {StatsModuleTraceItem[]=} moduleTrace\n * @property {any=} details\n * @property {string=} stack\n */\n\n/** @typedef {Asset & { type: string, related: PreprocessedAsset[] }} PreprocessedAsset */\n\n/**\n * @template T\n * @template O\n * @typedef {Record<string, (object: O, data: T, context: StatsFactoryContext, options: NormalizedStatsOptions, factory: StatsFactory) => void>} ExtractorsByOption\n */\n\n/**\n * @typedef {Object} SimpleExtractors\n * @property {ExtractorsByOption<Compilation, StatsCompilation>} compilation\n * @property {ExtractorsByOption<PreprocessedAsset, StatsAsset>} asset\n * @property {ExtractorsByOption<PreprocessedAsset, StatsAsset>} asset$visible\n * @property {ExtractorsByOption<{ name: string, chunkGroup: ChunkGroup }, StatsChunkGroup>} chunkGroup\n * @property {ExtractorsByOption<Module, StatsModule>} module\n * @property {ExtractorsByOption<Module, StatsModule>} module$visible\n * @property {ExtractorsByOption<Module, StatsModuleIssuer>} moduleIssuer\n * @property {ExtractorsByOption<ModuleProfile, StatsProfile>} profile\n * @property {ExtractorsByOption<ModuleGraphConnection, StatsModuleReason>} moduleReason\n * @property {ExtractorsByOption<Chunk, StatsChunk>} chunk\n * @property {ExtractorsByOption<OriginRecord, StatsChunkOrigin>} chunkOrigin\n * @property {ExtractorsByOption<WebpackError, StatsError>} error\n * @property {ExtractorsByOption<WebpackError, StatsError>} warning\n * @property {ExtractorsByOption<{ origin: Module, module: Module }, StatsModuleTraceItem>} moduleTraceItem\n * @property {ExtractorsByOption<Dependency, StatsModuleTraceDependency>} moduleTraceDependency\n */\n\n/**\n * @template T\n * @template I\n * @param {Iterable<T>} items items to select from\n * @param {function(T): Iterable<I>} selector selector function to select values from item\n * @returns {I[]} array of values\n */\nconst uniqueArray = (items, selector) => {\n\t/** @type {Set<I>} */\n\tconst set = new Set();\n\tfor (const item of items) {\n\t\tfor (const i of selector(item)) {\n\t\t\tset.add(i);\n\t\t}\n\t}\n\treturn Array.from(set);\n};\n\n/**\n * @template T\n * @template I\n * @param {Iterable<T>} items items to select from\n * @param {function(T): Iterable<I>} selector selector function to select values from item\n * @param {Comparator<I>} comparator comparator function\n * @returns {I[]} array of values\n */\nconst uniqueOrderedArray = (items, selector, comparator) => {\n\treturn uniqueArray(items, selector).sort(comparator);\n};\n\n/** @template T @template R @typedef {{ [P in keyof T]: R }} MappedValues<T, R> */\n\n/**\n * @template T\n * @template R\n * @param {T} obj object to be mapped\n * @param {function(T[keyof T], keyof T): R} fn mapping function\n * @returns {MappedValues<T, R>} mapped object\n */\nconst mapObject = (obj, fn) => {\n\tconst newObj = Object.create(null);\n\tfor (const key of Object.keys(obj)) {\n\t\tnewObj[key] = fn(obj[key], /** @type {keyof T} */ (key));\n\t}\n\treturn newObj;\n};\n\n/**\n * @param {Compilation} compilation the compilation\n * @param {function(Compilation, string): any[]} getItems get items\n * @returns {number} total number\n */\nconst countWithChildren = (compilation, getItems) => {\n\tlet count = getItems(compilation, \"\").length;\n\tfor (const child of compilation.children) {\n\t\tcount += countWithChildren(child, (c, type) =>\n\t\t\tgetItems(c, `.children[].compilation${type}`)\n\t\t);\n\t}\n\treturn count;\n};\n\n/** @type {ExtractorsByOption<WebpackError | string, StatsError>} */\nconst EXTRACT_ERROR = {\n\t_: (object, error, context, { requestShortener }) => {\n\t\t// TODO webpack 6 disallow strings in the errors/warnings list\n\t\tif (typeof error === \"string\") {\n\t\t\tobject.message = error;\n\t\t} else {\n\t\t\tif (error.chunk) {\n\t\t\t\tobject.chunkName = error.chunk.name;\n\t\t\t\tobject.chunkEntry = error.chunk.hasRuntime();\n\t\t\t\tobject.chunkInitial = error.chunk.canBeInitial();\n\t\t\t}\n\t\t\tif (error.file) {\n\t\t\t\tobject.file = error.file;\n\t\t\t}\n\t\t\tif (error.module) {\n\t\t\t\tobject.moduleIdentifier = error.module.identifier();\n\t\t\t\tobject.moduleName = error.module.readableIdentifier(requestShortener);\n\t\t\t}\n\t\t\tif (error.loc) {\n\t\t\t\tobject.loc = formatLocation(error.loc);\n\t\t\t}\n\t\t\tobject.message = error.message;\n\t\t}\n\t},\n\tids: (object, error, { compilation: { chunkGraph } }) => {\n\t\tif (typeof error !== \"string\") {\n\t\t\tif (error.chunk) {\n\t\t\t\tobject.chunkId = error.chunk.id;\n\t\t\t}\n\t\t\tif (error.module) {\n\t\t\t\tobject.moduleId = chunkGraph.getModuleId(error.module);\n\t\t\t}\n\t\t}\n\t},\n\tmoduleTrace: (object, error, context, options, factory) => {\n\t\tif (typeof error !== \"string\" && error.module) {\n\t\t\tconst {\n\t\t\t\ttype,\n\t\t\t\tcompilation: { moduleGraph }\n\t\t\t} = context;\n\t\t\t/** @type {Set<Module>} */\n\t\t\tconst visitedModules = new Set();\n\t\t\tconst moduleTrace = [];\n\t\t\tlet current = error.module;\n\t\t\twhile (current) {\n\t\t\t\tif (visitedModules.has(current)) break; // circular (technically impossible, but how knows)\n\t\t\t\tvisitedModules.add(current);\n\t\t\t\tconst origin = moduleGraph.getIssuer(current);\n\t\t\t\tif (!origin) break;\n\t\t\t\tmoduleTrace.push({ origin, module: current });\n\t\t\t\tcurrent = origin;\n\t\t\t}\n\t\t\tobject.moduleTrace = factory.create(\n\t\t\t\t`${type}.moduleTrace`,\n\t\t\t\tmoduleTrace,\n\t\t\t\tcontext\n\t\t\t);\n\t\t}\n\t},\n\terrorDetails: (\n\t\tobject,\n\t\terror,\n\t\t{ type, compilation, cachedGetErrors, cachedGetWarnings },\n\t\t{ errorDetails }\n\t) => {\n\t\tif (\n\t\t\ttypeof error !== \"string\" &&\n\t\t\t(errorDetails === true ||\n\t\t\t\t(type.endsWith(\".error\") && cachedGetErrors(compilation).length < 3))\n\t\t) {\n\t\t\tobject.details = error.details;\n\t\t}\n\t},\n\terrorStack: (object, error) => {\n\t\tif (typeof error !== \"string\") {\n\t\t\tobject.stack = error.stack;\n\t\t}\n\t}\n};\n\n/** @type {SimpleExtractors} */\nconst SIMPLE_EXTRACTORS = {\n\tcompilation: {\n\t\t_: (object, compilation, context, options) => {\n\t\t\tif (!context.makePathsRelative) {\n\t\t\t\tcontext.makePathsRelative = makePathsRelative.bindContextCache(\n\t\t\t\t\tcompilation.compiler.context,\n\t\t\t\t\tcompilation.compiler.root\n\t\t\t\t);\n\t\t\t}\n\t\t\tif (!context.cachedGetErrors) {\n\t\t\t\tconst map = new WeakMap();\n\t\t\t\tcontext.cachedGetErrors = compilation => {\n\t\t\t\t\treturn (\n\t\t\t\t\t\tmap.get(compilation) ||\n\t\t\t\t\t\t(errors => (map.set(compilation, errors), errors))(\n\t\t\t\t\t\t\tcompilation.getErrors()\n\t\t\t\t\t\t)\n\t\t\t\t\t);\n\t\t\t\t};\n\t\t\t}\n\t\t\tif (!context.cachedGetWarnings) {\n\t\t\t\tconst map = new WeakMap();\n\t\t\t\tcontext.cachedGetWarnings = compilation => {\n\t\t\t\t\treturn (\n\t\t\t\t\t\tmap.get(compilation) ||\n\t\t\t\t\t\t(warnings => (map.set(compilation, warnings), warnings))(\n\t\t\t\t\t\t\tcompilation.getWarnings()\n\t\t\t\t\t\t)\n\t\t\t\t\t);\n\t\t\t\t};\n\t\t\t}\n\t\t\tif (compilation.name) {\n\t\t\t\tobject.name = compilation.name;\n\t\t\t}\n\t\t\tif (compilation.needAdditionalPass) {\n\t\t\t\tobject.needAdditionalPass = true;\n\t\t\t}\n\n\t\t\tconst { logging, loggingDebug, loggingTrace } = options;\n\t\t\tif (logging || (loggingDebug && loggingDebug.length > 0)) {\n\t\t\t\tconst util = require(\"util\");\n\t\t\t\tobject.logging = {};\n\t\t\t\tlet acceptedTypes;\n\t\t\t\tlet collapsedGroups = false;\n\t\t\t\tswitch (logging) {\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tacceptedTypes = new Set();\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase \"error\":\n\t\t\t\t\t\tacceptedTypes = new Set([LogType.error]);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase \"warn\":\n\t\t\t\t\t\tacceptedTypes = new Set([LogType.error, LogType.warn]);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase \"info\":\n\t\t\t\t\t\tacceptedTypes = new Set([\n\t\t\t\t\t\t\tLogType.error,\n\t\t\t\t\t\t\tLogType.warn,\n\t\t\t\t\t\t\tLogType.info\n\t\t\t\t\t\t]);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase \"log\":\n\t\t\t\t\t\tacceptedTypes = new Set([\n\t\t\t\t\t\t\tLogType.error,\n\t\t\t\t\t\t\tLogType.warn,\n\t\t\t\t\t\t\tLogType.info,\n\t\t\t\t\t\t\tLogType.log,\n\t\t\t\t\t\t\tLogType.group,\n\t\t\t\t\t\t\tLogType.groupEnd,\n\t\t\t\t\t\t\tLogType.groupCollapsed,\n\t\t\t\t\t\t\tLogType.clear\n\t\t\t\t\t\t]);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase \"verbose\":\n\t\t\t\t\t\tacceptedTypes = new Set([\n\t\t\t\t\t\t\tLogType.error,\n\t\t\t\t\t\t\tLogType.warn,\n\t\t\t\t\t\t\tLogType.info,\n\t\t\t\t\t\t\tLogType.log,\n\t\t\t\t\t\t\tLogType.group,\n\t\t\t\t\t\t\tLogType.groupEnd,\n\t\t\t\t\t\t\tLogType.groupCollapsed,\n\t\t\t\t\t\t\tLogType.profile,\n\t\t\t\t\t\t\tLogType.profileEnd,\n\t\t\t\t\t\t\tLogType.time,\n\t\t\t\t\t\t\tLogType.status,\n\t\t\t\t\t\t\tLogType.clear\n\t\t\t\t\t\t]);\n\t\t\t\t\t\tcollapsedGroups = true;\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tconst cachedMakePathsRelative = makePathsRelative.bindContextCache(\n\t\t\t\t\toptions.context,\n\t\t\t\t\tcompilation.compiler.root\n\t\t\t\t);\n\t\t\t\tlet depthInCollapsedGroup = 0;\n\t\t\t\tfor (const [origin, logEntries] of compilation.logging) {\n\t\t\t\t\tconst debugMode = loggingDebug.some(fn => fn(origin));\n\t\t\t\t\tif (logging === false && !debugMode) continue;\n\t\t\t\t\t/** @type {KnownStatsLoggingEntry[]} */\n\t\t\t\t\tconst groupStack = [];\n\t\t\t\t\t/** @type {KnownStatsLoggingEntry[]} */\n\t\t\t\t\tconst rootList = [];\n\t\t\t\t\tlet currentList = rootList;\n\t\t\t\t\tlet processedLogEntries = 0;\n\t\t\t\t\tfor (const entry of logEntries) {\n\t\t\t\t\t\tlet type = entry.type;\n\t\t\t\t\t\tif (!debugMode && !acceptedTypes.has(type)) continue;\n\n\t\t\t\t\t\t// Expand groups in verbose and debug modes\n\t\t\t\t\t\tif (\n\t\t\t\t\t\t\ttype === LogType.groupCollapsed &&\n\t\t\t\t\t\t\t(debugMode || collapsedGroups)\n\t\t\t\t\t\t)\n\t\t\t\t\t\t\ttype = LogType.group;\n\n\t\t\t\t\t\tif (depthInCollapsedGroup === 0) {\n\t\t\t\t\t\t\tprocessedLogEntries++;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (type === LogType.groupEnd) {\n\t\t\t\t\t\t\tgroupStack.pop();\n\t\t\t\t\t\t\tif (groupStack.length > 0) {\n\t\t\t\t\t\t\t\tcurrentList = groupStack[groupStack.length - 1].children;\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tcurrentList = rootList;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif (depthInCollapsedGroup > 0) depthInCollapsedGroup--;\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tlet message = undefined;\n\t\t\t\t\t\tif (entry.type === LogType.time) {\n\t\t\t\t\t\t\tmessage = `${entry.args[0]}: ${\n\t\t\t\t\t\t\t\tentry.args[1] * 1000 + entry.args[2] / 1000000\n\t\t\t\t\t\t\t} ms`;\n\t\t\t\t\t\t} else if (entry.args && entry.args.length > 0) {\n\t\t\t\t\t\t\tmessage = util.format(entry.args[0], ...entry.args.slice(1));\n\t\t\t\t\t\t}\n\t\t\t\t\t\t/** @type {KnownStatsLoggingEntry} */\n\t\t\t\t\t\tconst newEntry = {\n\t\t\t\t\t\t\t...entry,\n\t\t\t\t\t\t\ttype,\n\t\t\t\t\t\t\tmessage,\n\t\t\t\t\t\t\ttrace: loggingTrace ? entry.trace : undefined,\n\t\t\t\t\t\t\tchildren:\n\t\t\t\t\t\t\t\ttype === LogType.group || type === LogType.groupCollapsed\n\t\t\t\t\t\t\t\t\t? []\n\t\t\t\t\t\t\t\t\t: undefined\n\t\t\t\t\t\t};\n\t\t\t\t\t\tcurrentList.push(newEntry);\n\t\t\t\t\t\tif (newEntry.children) {\n\t\t\t\t\t\t\tgroupStack.push(newEntry);\n\t\t\t\t\t\t\tcurrentList = newEntry.children;\n\t\t\t\t\t\t\tif (depthInCollapsedGroup > 0) {\n\t\t\t\t\t\t\t\tdepthInCollapsedGroup++;\n\t\t\t\t\t\t\t} else if (type === LogType.groupCollapsed) {\n\t\t\t\t\t\t\t\tdepthInCollapsedGroup = 1;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tlet name = cachedMakePathsRelative(origin).replace(/\\|/g, \" \");\n\t\t\t\t\tif (name in object.logging) {\n\t\t\t\t\t\tlet i = 1;\n\t\t\t\t\t\twhile (`${name}#${i}` in object.logging) {\n\t\t\t\t\t\t\ti++;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tname = `${name}#${i}`;\n\t\t\t\t\t}\n\t\t\t\t\tobject.logging[name] = {\n\t\t\t\t\t\tentries: rootList,\n\t\t\t\t\t\tfilteredEntries: logEntries.length - processedLogEntries,\n\t\t\t\t\t\tdebug: debugMode\n\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\thash: (object, compilation) => {\n\t\t\tobject.hash = compilation.hash;\n\t\t},\n\t\tversion: object => {\n\t\t\tobject.version = require(\"../../package.json\").version;\n\t\t},\n\t\tenv: (object, compilation, context, { _env }) => {\n\t\t\tobject.env = _env;\n\t\t},\n\t\ttimings: (object, compilation) => {\n\t\t\tobject.time = compilation.endTime - compilation.startTime;\n\t\t},\n\t\tbuiltAt: (object, compilation) => {\n\t\t\tobject.builtAt = compilation.endTime;\n\t\t},\n\t\tpublicPath: (object, compilation) => {\n\t\t\tobject.publicPath = compilation.getPath(\n\t\t\t\tcompilation.outputOptions.publicPath\n\t\t\t);\n\t\t},\n\t\toutputPath: (object, compilation) => {\n\t\t\tobject.outputPath = compilation.outputOptions.path;\n\t\t},\n\t\tassets: (object, compilation, context, options, factory) => {\n\t\t\tconst { type } = context;\n\t\t\t/** @type {Map<string, Chunk[]>} */\n\t\t\tconst compilationFileToChunks = new Map();\n\t\t\t/** @type {Map<string, Chunk[]>} */\n\t\t\tconst compilationAuxiliaryFileToChunks = new Map();\n\t\t\tfor (const chunk of compilation.chunks) {\n\t\t\t\tfor (const file of chunk.files) {\n\t\t\t\t\tlet array = compilationFileToChunks.get(file);\n\t\t\t\t\tif (array === undefined) {\n\t\t\t\t\t\tarray = [];\n\t\t\t\t\t\tcompilationFileToChunks.set(file, array);\n\t\t\t\t\t}\n\t\t\t\t\tarray.push(chunk);\n\t\t\t\t}\n\t\t\t\tfor (const file of chunk.auxiliaryFiles) {\n\t\t\t\t\tlet array = compilationAuxiliaryFileToChunks.get(file);\n\t\t\t\t\tif (array === undefined) {\n\t\t\t\t\t\tarray = [];\n\t\t\t\t\t\tcompilationAuxiliaryFileToChunks.set(file, array);\n\t\t\t\t\t}\n\t\t\t\t\tarray.push(chunk);\n\t\t\t\t}\n\t\t\t}\n\t\t\t/** @type {Map<string, PreprocessedAsset>} */\n\t\t\tconst assetMap = new Map();\n\t\t\t/** @type {Set<PreprocessedAsset>} */\n\t\t\tconst assets = new Set();\n\t\t\tfor (const asset of compilation.getAssets()) {\n\t\t\t\t/** @type {PreprocessedAsset} */\n\t\t\t\tconst item = {\n\t\t\t\t\t...asset,\n\t\t\t\t\ttype: \"asset\",\n\t\t\t\t\trelated: undefined\n\t\t\t\t};\n\t\t\t\tassets.add(item);\n\t\t\t\tassetMap.set(asset.name, item);\n\t\t\t}\n\t\t\tfor (const item of assetMap.values()) {\n\t\t\t\tconst related = item.info.related;\n\t\t\t\tif (!related) continue;\n\t\t\t\tfor (const type of Object.keys(related)) {\n\t\t\t\t\tconst relatedEntry = related[type];\n\t\t\t\t\tconst deps = Array.isArray(relatedEntry)\n\t\t\t\t\t\t? relatedEntry\n\t\t\t\t\t\t: [relatedEntry];\n\t\t\t\t\tfor (const dep of deps) {\n\t\t\t\t\t\tconst depItem = assetMap.get(dep);\n\t\t\t\t\t\tif (!depItem) continue;\n\t\t\t\t\t\tassets.delete(depItem);\n\t\t\t\t\t\tdepItem.type = type;\n\t\t\t\t\t\titem.related = item.related || [];\n\t\t\t\t\t\titem.related.push(depItem);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tobject.assetsByChunkName = {};\n\t\t\tfor (const [file, chunks] of compilationFileToChunks) {\n\t\t\t\tfor (const chunk of chunks) {\n\t\t\t\t\tconst name = chunk.name;\n\t\t\t\t\tif (!name) continue;\n\t\t\t\t\tif (\n\t\t\t\t\t\t!Object.prototype.hasOwnProperty.call(\n\t\t\t\t\t\t\tobject.assetsByChunkName,\n\t\t\t\t\t\t\tname\n\t\t\t\t\t\t)\n\t\t\t\t\t) {\n\t\t\t\t\t\tobject.assetsByChunkName[name] = [];\n\t\t\t\t\t}\n\t\t\t\t\tobject.assetsByChunkName[name].push(file);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tconst groupedAssets = factory.create(\n\t\t\t\t`${type}.assets`,\n\t\t\t\tArray.from(assets),\n\t\t\t\t{\n\t\t\t\t\t...context,\n\t\t\t\t\tcompilationFileToChunks,\n\t\t\t\t\tcompilationAuxiliaryFileToChunks\n\t\t\t\t}\n\t\t\t);\n\t\t\tconst limited = spaceLimited(groupedAssets, options.assetsSpace);\n\t\t\tobject.assets = limited.children;\n\t\t\tobject.filteredAssets = limited.filteredChildren;\n\t\t},\n\t\tchunks: (object, compilation, context, options, factory) => {\n\t\t\tconst { type } = context;\n\t\t\tobject.chunks = factory.create(\n\t\t\t\t`${type}.chunks`,\n\t\t\t\tArray.from(compilation.chunks),\n\t\t\t\tcontext\n\t\t\t);\n\t\t},\n\t\tmodules: (object, compilation, context, options, factory) => {\n\t\t\tconst { type } = context;\n\t\t\tconst array = Array.from(compilation.modules);\n\t\t\tconst groupedModules = factory.create(`${type}.modules`, array, context);\n\t\t\tconst limited = spaceLimited(groupedModules, options.modulesSpace);\n\t\t\tobject.modules = limited.children;\n\t\t\tobject.filteredModules = limited.filteredChildren;\n\t\t},\n\t\tentrypoints: (\n\t\t\tobject,\n\t\t\tcompilation,\n\t\t\tcontext,\n\t\t\t{ entrypoints, chunkGroups, chunkGroupAuxiliary, chunkGroupChildren },\n\t\t\tfactory\n\t\t) => {\n\t\t\tconst { type } = context;\n\t\t\tconst array = Array.from(compilation.entrypoints, ([key, value]) => ({\n\t\t\t\tname: key,\n\t\t\t\tchunkGroup: value\n\t\t\t}));\n\t\t\tif (entrypoints === \"auto\" && !chunkGroups) {\n\t\t\t\tif (array.length > 5) return;\n\t\t\t\tif (\n\t\t\t\t\t!chunkGroupChildren &&\n\t\t\t\t\tarray.every(({ chunkGroup }) => {\n\t\t\t\t\t\tif (chunkGroup.chunks.length !== 1) return false;\n\t\t\t\t\t\tconst chunk = chunkGroup.chunks[0];\n\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\tchunk.files.size === 1 &&\n\t\t\t\t\t\t\t(!chunkGroupAuxiliary || chunk.auxiliaryFiles.size === 0)\n\t\t\t\t\t\t);\n\t\t\t\t\t})\n\t\t\t\t) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\t\t\tobject.entrypoints = factory.create(\n\t\t\t\t`${type}.entrypoints`,\n\t\t\t\tarray,\n\t\t\t\tcontext\n\t\t\t);\n\t\t},\n\t\tchunkGroups: (object, compilation, context, options, factory) => {\n\t\t\tconst { type } = context;\n\t\t\tconst array = Array.from(\n\t\t\t\tcompilation.namedChunkGroups,\n\t\t\t\t([key, value]) => ({\n\t\t\t\t\tname: key,\n\t\t\t\t\tchunkGroup: value\n\t\t\t\t})\n\t\t\t);\n\t\t\tobject.namedChunkGroups = factory.create(\n\t\t\t\t`${type}.namedChunkGroups`,\n\t\t\t\tarray,\n\t\t\t\tcontext\n\t\t\t);\n\t\t},\n\t\terrors: (object, compilation, context, options, factory) => {\n\t\t\tconst { type, cachedGetErrors } = context;\n\t\t\tobject.errors = factory.create(\n\t\t\t\t`${type}.errors`,\n\t\t\t\tcachedGetErrors(compilation),\n\t\t\t\tcontext\n\t\t\t);\n\t\t},\n\t\terrorsCount: (object, compilation, { cachedGetErrors }) => {\n\t\t\tobject.errorsCount = countWithChildren(compilation, c =>\n\t\t\t\tcachedGetErrors(c)\n\t\t\t);\n\t\t},\n\t\twarnings: (object, compilation, context, options, factory) => {\n\t\t\tconst { type, cachedGetWarnings } = context;\n\t\t\tobject.warnings = factory.create(\n\t\t\t\t`${type}.warnings`,\n\t\t\t\tcachedGetWarnings(compilation),\n\t\t\t\tcontext\n\t\t\t);\n\t\t},\n\t\twarningsCount: (\n\t\t\tobject,\n\t\t\tcompilation,\n\t\t\tcontext,\n\t\t\t{ warningsFilter },\n\t\t\tfactory\n\t\t) => {\n\t\t\tconst { type, cachedGetWarnings } = context;\n\t\t\tobject.warningsCount = countWithChildren(compilation, (c, childType) => {\n\t\t\t\tif (!warningsFilter && warningsFilter.length === 0)\n\t\t\t\t\treturn cachedGetWarnings(c);\n\t\t\t\treturn factory\n\t\t\t\t\t.create(`${type}${childType}.warnings`, cachedGetWarnings(c), context)\n\t\t\t\t\t.filter(warning => {\n\t\t\t\t\t\tconst warningString = Object.keys(warning)\n\t\t\t\t\t\t\t.map(key => `${warning[key]}`)\n\t\t\t\t\t\t\t.join(\"\\n\");\n\t\t\t\t\t\treturn !warningsFilter.some(filter =>\n\t\t\t\t\t\t\tfilter(warning, warningString)\n\t\t\t\t\t\t);\n\t\t\t\t\t});\n\t\t\t});\n\t\t},\n\t\terrorDetails: (\n\t\t\tobject,\n\t\t\tcompilation,\n\t\t\t{ cachedGetErrors, cachedGetWarnings },\n\t\t\t{ errorDetails, errors, warnings }\n\t\t) => {\n\t\t\tif (errorDetails === \"auto\") {\n\t\t\t\tif (warnings) {\n\t\t\t\t\tconst warnings = cachedGetWarnings(compilation);\n\t\t\t\t\tobject.filteredWarningDetailsCount = warnings\n\t\t\t\t\t\t.map(e => typeof e !== \"string\" && e.details)\n\t\t\t\t\t\t.filter(Boolean).length;\n\t\t\t\t}\n\t\t\t\tif (errors) {\n\t\t\t\t\tconst errors = cachedGetErrors(compilation);\n\t\t\t\t\tif (errors.length >= 3) {\n\t\t\t\t\t\tobject.filteredErrorDetailsCount = errors\n\t\t\t\t\t\t\t.map(e => typeof e !== \"string\" && e.details)\n\t\t\t\t\t\t\t.filter(Boolean).length;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\tchildren: (object, compilation, context, options, factory) => {\n\t\t\tconst { type } = context;\n\t\t\tobject.children = factory.create(\n\t\t\t\t`${type}.children`,\n\t\t\t\tcompilation.children,\n\t\t\t\tcontext\n\t\t\t);\n\t\t}\n\t},\n\tasset: {\n\t\t_: (object, asset, context, options, factory) => {\n\t\t\tconst { compilation } = context;\n\t\t\tobject.type = asset.type;\n\t\t\tobject.name = asset.name;\n\t\t\tobject.size = asset.source.size();\n\t\t\tobject.emitted = compilation.emittedAssets.has(asset.name);\n\t\t\tobject.comparedForEmit = compilation.comparedForEmitAssets.has(\n\t\t\t\tasset.name\n\t\t\t);\n\t\t\tconst cached = !object.emitted && !object.comparedForEmit;\n\t\t\tobject.cached = cached;\n\t\t\tobject.info = asset.info;\n\t\t\tif (!cached || options.cachedAssets) {\n\t\t\t\tObject.assign(\n\t\t\t\t\tobject,\n\t\t\t\t\tfactory.create(`${context.type}$visible`, asset, context)\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\t},\n\tasset$visible: {\n\t\t_: (\n\t\t\tobject,\n\t\t\tasset,\n\t\t\t{ compilation, compilationFileToChunks, compilationAuxiliaryFileToChunks }\n\t\t) => {\n\t\t\tconst chunks = compilationFileToChunks.get(asset.name) || [];\n\t\t\tconst auxiliaryChunks =\n\t\t\t\tcompilationAuxiliaryFileToChunks.get(asset.name) || [];\n\t\t\tobject.chunkNames = uniqueOrderedArray(\n\t\t\t\tchunks,\n\t\t\t\tc => (c.name ? [c.name] : []),\n\t\t\t\tcompareIds\n\t\t\t);\n\t\t\tobject.chunkIdHints = uniqueOrderedArray(\n\t\t\t\tchunks,\n\t\t\t\tc => Array.from(c.idNameHints),\n\t\t\t\tcompareIds\n\t\t\t);\n\t\t\tobject.auxiliaryChunkNames = uniqueOrderedArray(\n\t\t\t\tauxiliaryChunks,\n\t\t\t\tc => (c.name ? [c.name] : []),\n\t\t\t\tcompareIds\n\t\t\t);\n\t\t\tobject.auxiliaryChunkIdHints = uniqueOrderedArray(\n\t\t\t\tauxiliaryChunks,\n\t\t\t\tc => Array.from(c.idNameHints),\n\t\t\t\tcompareIds\n\t\t\t);\n\t\t\tobject.filteredRelated = asset.related ? asset.related.length : undefined;\n\t\t},\n\t\trelatedAssets: (object, asset, context, options, factory) => {\n\t\t\tconst { type } = context;\n\t\t\tobject.related = factory.create(\n\t\t\t\t`${type.slice(0, -8)}.related`,\n\t\t\t\tasset.related,\n\t\t\t\tcontext\n\t\t\t);\n\t\t\tobject.filteredRelated = asset.related\n\t\t\t\t? asset.related.length - object.related.length\n\t\t\t\t: undefined;\n\t\t},\n\t\tids: (\n\t\t\tobject,\n\t\t\tasset,\n\t\t\t{ compilationFileToChunks, compilationAuxiliaryFileToChunks }\n\t\t) => {\n\t\t\tconst chunks = compilationFileToChunks.get(asset.name) || [];\n\t\t\tconst auxiliaryChunks =\n\t\t\t\tcompilationAuxiliaryFileToChunks.get(asset.name) || [];\n\t\t\tobject.chunks = uniqueOrderedArray(chunks, c => c.ids, compareIds);\n\t\t\tobject.auxiliaryChunks = uniqueOrderedArray(\n\t\t\t\tauxiliaryChunks,\n\t\t\t\tc => c.ids,\n\t\t\t\tcompareIds\n\t\t\t);\n\t\t},\n\t\tperformance: (object, asset) => {\n\t\t\tobject.isOverSizeLimit = SizeLimitsPlugin.isOverSizeLimit(asset.source);\n\t\t}\n\t},\n\tchunkGroup: {\n\t\t_: (\n\t\t\tobject,\n\t\t\t{ name, chunkGroup },\n\t\t\t{ compilation, compilation: { moduleGraph, chunkGraph } },\n\t\t\t{ ids, chunkGroupAuxiliary, chunkGroupChildren, chunkGroupMaxAssets }\n\t\t) => {\n\t\t\tconst children =\n\t\t\t\tchunkGroupChildren &&\n\t\t\t\tchunkGroup.getChildrenByOrders(moduleGraph, chunkGraph);\n\t\t\t/**\n\t\t\t * @param {string} name Name\n\t\t\t * @returns {{ name: string, size: number }} Asset object\n\t\t\t */\n\t\t\tconst toAsset = name => {\n\t\t\t\tconst asset = compilation.getAsset(name);\n\t\t\t\treturn {\n\t\t\t\t\tname,\n\t\t\t\t\tsize: asset ? asset.info.size : -1\n\t\t\t\t};\n\t\t\t};\n\t\t\t/** @type {(total: number, asset: { size: number }) => number} */\n\t\t\tconst sizeReducer = (total, { size }) => total + size;\n\t\t\tconst assets = uniqueArray(chunkGroup.chunks, c => c.files).map(toAsset);\n\t\t\tconst auxiliaryAssets = uniqueOrderedArray(\n\t\t\t\tchunkGroup.chunks,\n\t\t\t\tc => c.auxiliaryFiles,\n\t\t\t\tcompareIds\n\t\t\t).map(toAsset);\n\t\t\tconst assetsSize = assets.reduce(sizeReducer, 0);\n\t\t\tconst auxiliaryAssetsSize = auxiliaryAssets.reduce(sizeReducer, 0);\n\t\t\t/** @type {KnownStatsChunkGroup} */\n\t\t\tconst statsChunkGroup = {\n\t\t\t\tname,\n\t\t\t\tchunks: ids ? chunkGroup.chunks.map(c => c.id) : undefined,\n\t\t\t\tassets: assets.length <= chunkGroupMaxAssets ? assets : undefined,\n\t\t\t\tfilteredAssets:\n\t\t\t\t\tassets.length <= chunkGroupMaxAssets ? 0 : assets.length,\n\t\t\t\tassetsSize,\n\t\t\t\tauxiliaryAssets:\n\t\t\t\t\tchunkGroupAuxiliary && auxiliaryAssets.length <= chunkGroupMaxAssets\n\t\t\t\t\t\t? auxiliaryAssets\n\t\t\t\t\t\t: undefined,\n\t\t\t\tfilteredAuxiliaryAssets:\n\t\t\t\t\tchunkGroupAuxiliary && auxiliaryAssets.length <= chunkGroupMaxAssets\n\t\t\t\t\t\t? 0\n\t\t\t\t\t\t: auxiliaryAssets.length,\n\t\t\t\tauxiliaryAssetsSize,\n\t\t\t\tchildren: children\n\t\t\t\t\t? mapObject(children, groups =>\n\t\t\t\t\t\t\tgroups.map(group => {\n\t\t\t\t\t\t\t\tconst assets = uniqueArray(group.chunks, c => c.files).map(\n\t\t\t\t\t\t\t\t\ttoAsset\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\tconst auxiliaryAssets = uniqueOrderedArray(\n\t\t\t\t\t\t\t\t\tgroup.chunks,\n\t\t\t\t\t\t\t\t\tc => c.auxiliaryFiles,\n\t\t\t\t\t\t\t\t\tcompareIds\n\t\t\t\t\t\t\t\t).map(toAsset);\n\n\t\t\t\t\t\t\t\t/** @type {KnownStatsChunkGroup} */\n\t\t\t\t\t\t\t\tconst childStatsChunkGroup = {\n\t\t\t\t\t\t\t\t\tname: group.name,\n\t\t\t\t\t\t\t\t\tchunks: ids ? group.chunks.map(c => c.id) : undefined,\n\t\t\t\t\t\t\t\t\tassets:\n\t\t\t\t\t\t\t\t\t\tassets.length <= chunkGroupMaxAssets ? assets : undefined,\n\t\t\t\t\t\t\t\t\tfilteredAssets:\n\t\t\t\t\t\t\t\t\t\tassets.length <= chunkGroupMaxAssets ? 0 : assets.length,\n\t\t\t\t\t\t\t\t\tauxiliaryAssets:\n\t\t\t\t\t\t\t\t\t\tchunkGroupAuxiliary &&\n\t\t\t\t\t\t\t\t\t\tauxiliaryAssets.length <= chunkGroupMaxAssets\n\t\t\t\t\t\t\t\t\t\t\t? auxiliaryAssets\n\t\t\t\t\t\t\t\t\t\t\t: undefined,\n\t\t\t\t\t\t\t\t\tfilteredAuxiliaryAssets:\n\t\t\t\t\t\t\t\t\t\tchunkGroupAuxiliary &&\n\t\t\t\t\t\t\t\t\t\tauxiliaryAssets.length <= chunkGroupMaxAssets\n\t\t\t\t\t\t\t\t\t\t\t? 0\n\t\t\t\t\t\t\t\t\t\t\t: auxiliaryAssets.length\n\t\t\t\t\t\t\t\t};\n\n\t\t\t\t\t\t\t\treturn childStatsChunkGroup;\n\t\t\t\t\t\t\t})\n\t\t\t\t\t  )\n\t\t\t\t\t: undefined,\n\t\t\t\tchildAssets: children\n\t\t\t\t\t? mapObject(children, groups => {\n\t\t\t\t\t\t\t/** @type {Set<string>} */\n\t\t\t\t\t\t\tconst set = new Set();\n\t\t\t\t\t\t\tfor (const group of groups) {\n\t\t\t\t\t\t\t\tfor (const chunk of group.chunks) {\n\t\t\t\t\t\t\t\t\tfor (const asset of chunk.files) {\n\t\t\t\t\t\t\t\t\t\tset.add(asset);\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\treturn Array.from(set);\n\t\t\t\t\t  })\n\t\t\t\t\t: undefined\n\t\t\t};\n\t\t\tObject.assign(object, statsChunkGroup);\n\t\t},\n\t\tperformance: (object, { chunkGroup }) => {\n\t\t\tobject.isOverSizeLimit = SizeLimitsPlugin.isOverSizeLimit(chunkGroup);\n\t\t}\n\t},\n\tmodule: {\n\t\t_: (object, module, context, options, factory) => {\n\t\t\tconst { compilation, type } = context;\n\t\t\tconst built = compilation.builtModules.has(module);\n\t\t\tconst codeGenerated = compilation.codeGeneratedModules.has(module);\n\t\t\tconst buildTimeExecuted =\n\t\t\t\tcompilation.buildTimeExecutedModules.has(module);\n\t\t\t/** @type {{[x: string]: number}} */\n\t\t\tconst sizes = {};\n\t\t\tfor (const sourceType of module.getSourceTypes()) {\n\t\t\t\tsizes[sourceType] = module.size(sourceType);\n\t\t\t}\n\t\t\t/** @type {KnownStatsModule} */\n\t\t\tconst statsModule = {\n\t\t\t\ttype: \"module\",\n\t\t\t\tmoduleType: module.type,\n\t\t\t\tlayer: module.layer,\n\t\t\t\tsize: module.size(),\n\t\t\t\tsizes,\n\t\t\t\tbuilt,\n\t\t\t\tcodeGenerated,\n\t\t\t\tbuildTimeExecuted,\n\t\t\t\tcached: !built && !codeGenerated\n\t\t\t};\n\t\t\tObject.assign(object, statsModule);\n\n\t\t\tif (built || codeGenerated || options.cachedModules) {\n\t\t\t\tObject.assign(\n\t\t\t\t\tobject,\n\t\t\t\t\tfactory.create(`${type}$visible`, module, context)\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\t},\n\tmodule$visible: {\n\t\t_: (object, module, context, { requestShortener }, factory) => {\n\t\t\tconst { compilation, type, rootModules } = context;\n\t\t\tconst { moduleGraph } = compilation;\n\t\t\t/** @type {Module[]} */\n\t\t\tconst path = [];\n\t\t\tconst issuer = moduleGraph.getIssuer(module);\n\t\t\tlet current = issuer;\n\t\t\twhile (current) {\n\t\t\t\tpath.push(current);\n\t\t\t\tcurrent = moduleGraph.getIssuer(current);\n\t\t\t}\n\t\t\tpath.reverse();\n\t\t\tconst profile = moduleGraph.getProfile(module);\n\t\t\tconst errors = module.getErrors();\n\t\t\tconst errorsCount = errors !== undefined ? countIterable(errors) : 0;\n\t\t\tconst warnings = module.getWarnings();\n\t\t\tconst warningsCount =\n\t\t\t\twarnings !== undefined ? countIterable(warnings) : 0;\n\t\t\t/** @type {{[x: string]: number}} */\n\t\t\tconst sizes = {};\n\t\t\tfor (const sourceType of module.getSourceTypes()) {\n\t\t\t\tsizes[sourceType] = module.size(sourceType);\n\t\t\t}\n\t\t\t/** @type {KnownStatsModule} */\n\t\t\tconst statsModule = {\n\t\t\t\tidentifier: module.identifier(),\n\t\t\t\tname: module.readableIdentifier(requestShortener),\n\t\t\t\tnameForCondition: module.nameForCondition(),\n\t\t\t\tindex: moduleGraph.getPreOrderIndex(module),\n\t\t\t\tpreOrderIndex: moduleGraph.getPreOrderIndex(module),\n\t\t\t\tindex2: moduleGraph.getPostOrderIndex(module),\n\t\t\t\tpostOrderIndex: moduleGraph.getPostOrderIndex(module),\n\t\t\t\tcacheable: module.buildInfo.cacheable,\n\t\t\t\toptional: module.isOptional(moduleGraph),\n\t\t\t\torphan:\n\t\t\t\t\t!type.endsWith(\"module.modules[].module$visible\") &&\n\t\t\t\t\tcompilation.chunkGraph.getNumberOfModuleChunks(module) === 0,\n\t\t\t\tdependent: rootModules ? !rootModules.has(module) : undefined,\n\t\t\t\tissuer: issuer && issuer.identifier(),\n\t\t\t\tissuerName: issuer && issuer.readableIdentifier(requestShortener),\n\t\t\t\tissuerPath:\n\t\t\t\t\tissuer &&\n\t\t\t\t\tfactory.create(`${type.slice(0, -8)}.issuerPath`, path, context),\n\t\t\t\tfailed: errorsCount > 0,\n\t\t\t\terrors: errorsCount,\n\t\t\t\twarnings: warningsCount\n\t\t\t};\n\t\t\tObject.assign(object, statsModule);\n\t\t\tif (profile) {\n\t\t\t\tobject.profile = factory.create(\n\t\t\t\t\t`${type.slice(0, -8)}.profile`,\n\t\t\t\t\tprofile,\n\t\t\t\t\tcontext\n\t\t\t\t);\n\t\t\t}\n\t\t},\n\t\tids: (object, module, { compilation: { chunkGraph, moduleGraph } }) => {\n\t\t\tobject.id = chunkGraph.getModuleId(module);\n\t\t\tconst issuer = moduleGraph.getIssuer(module);\n\t\t\tobject.issuerId = issuer && chunkGraph.getModuleId(issuer);\n\t\t\tobject.chunks = Array.from(\n\t\t\t\tchunkGraph.getOrderedModuleChunksIterable(module, compareChunksById),\n\t\t\t\tchunk => chunk.id\n\t\t\t);\n\t\t},\n\t\tmoduleAssets: (object, module) => {\n\t\t\tobject.assets = module.buildInfo.assets\n\t\t\t\t? Object.keys(module.buildInfo.assets)\n\t\t\t\t: [];\n\t\t},\n\t\treasons: (object, module, context, options, factory) => {\n\t\t\tconst {\n\t\t\t\ttype,\n\t\t\t\tcompilation: { moduleGraph }\n\t\t\t} = context;\n\t\t\tconst groupsReasons = factory.create(\n\t\t\t\t`${type.slice(0, -8)}.reasons`,\n\t\t\t\tArray.from(moduleGraph.getIncomingConnections(module)),\n\t\t\t\tcontext\n\t\t\t);\n\t\t\tconst limited = spaceLimited(groupsReasons, options.reasonsSpace);\n\t\t\tobject.reasons = limited.children;\n\t\t\tobject.filteredReasons = limited.filteredChildren;\n\t\t},\n\t\tusedExports: (\n\t\t\tobject,\n\t\t\tmodule,\n\t\t\t{ runtime, compilation: { moduleGraph } }\n\t\t) => {\n\t\t\tconst usedExports = moduleGraph.getUsedExports(module, runtime);\n\t\t\tif (usedExports === null) {\n\t\t\t\tobject.usedExports = null;\n\t\t\t} else if (typeof usedExports === \"boolean\") {\n\t\t\t\tobject.usedExports = usedExports;\n\t\t\t} else {\n\t\t\t\tobject.usedExports = Array.from(usedExports);\n\t\t\t}\n\t\t},\n\t\tprovidedExports: (object, module, { compilation: { moduleGraph } }) => {\n\t\t\tconst providedExports = moduleGraph.getProvidedExports(module);\n\t\t\tobject.providedExports = Array.isArray(providedExports)\n\t\t\t\t? providedExports\n\t\t\t\t: null;\n\t\t},\n\t\toptimizationBailout: (\n\t\t\tobject,\n\t\t\tmodule,\n\t\t\t{ compilation: { moduleGraph } },\n\t\t\t{ requestShortener }\n\t\t) => {\n\t\t\tobject.optimizationBailout = moduleGraph\n\t\t\t\t.getOptimizationBailout(module)\n\t\t\t\t.map(item => {\n\t\t\t\t\tif (typeof item === \"function\") return item(requestShortener);\n\t\t\t\t\treturn item;\n\t\t\t\t});\n\t\t},\n\t\tdepth: (object, module, { compilation: { moduleGraph } }) => {\n\t\t\tobject.depth = moduleGraph.getDepth(module);\n\t\t},\n\t\tnestedModules: (object, module, context, options, factory) => {\n\t\t\tconst { type } = context;\n\t\t\tconst innerModules = /** @type {Module & { modules?: Module[] }} */ (\n\t\t\t\tmodule\n\t\t\t).modules;\n\t\t\tif (Array.isArray(innerModules)) {\n\t\t\t\tconst groupedModules = factory.create(\n\t\t\t\t\t`${type.slice(0, -8)}.modules`,\n\t\t\t\t\tinnerModules,\n\t\t\t\t\tcontext\n\t\t\t\t);\n\t\t\t\tconst limited = spaceLimited(\n\t\t\t\t\tgroupedModules,\n\t\t\t\t\toptions.nestedModulesSpace\n\t\t\t\t);\n\t\t\t\tobject.modules = limited.children;\n\t\t\t\tobject.filteredModules = limited.filteredChildren;\n\t\t\t}\n\t\t},\n\t\tsource: (object, module) => {\n\t\t\tconst originalSource = module.originalSource();\n\t\t\tif (originalSource) {\n\t\t\t\tobject.source = originalSource.source();\n\t\t\t}\n\t\t}\n\t},\n\tprofile: {\n\t\t_: (object, profile) => {\n\t\t\t/** @type {KnownStatsProfile} */\n\t\t\tconst statsProfile = {\n\t\t\t\ttotal:\n\t\t\t\t\tprofile.factory +\n\t\t\t\t\tprofile.restoring +\n\t\t\t\t\tprofile.integration +\n\t\t\t\t\tprofile.building +\n\t\t\t\t\tprofile.storing,\n\t\t\t\tresolving: profile.factory,\n\t\t\t\trestoring: profile.restoring,\n\t\t\t\tbuilding: profile.building,\n\t\t\t\tintegration: profile.integration,\n\t\t\t\tstoring: profile.storing,\n\t\t\t\tadditionalResolving: profile.additionalFactories,\n\t\t\t\tadditionalIntegration: profile.additionalIntegration,\n\t\t\t\t// TODO remove this in webpack 6\n\t\t\t\tfactory: profile.factory,\n\t\t\t\t// TODO remove this in webpack 6\n\t\t\t\tdependencies: profile.additionalFactories\n\t\t\t};\n\t\t\tObject.assign(object, statsProfile);\n\t\t}\n\t},\n\tmoduleIssuer: {\n\t\t_: (object, module, context, { requestShortener }, factory) => {\n\t\t\tconst { compilation, type } = context;\n\t\t\tconst { moduleGraph } = compilation;\n\t\t\tconst profile = moduleGraph.getProfile(module);\n\t\t\t/** @type {KnownStatsModuleIssuer} */\n\t\t\tconst statsModuleIssuer = {\n\t\t\t\tidentifier: module.identifier(),\n\t\t\t\tname: module.readableIdentifier(requestShortener)\n\t\t\t};\n\t\t\tObject.assign(object, statsModuleIssuer);\n\t\t\tif (profile) {\n\t\t\t\tobject.profile = factory.create(`${type}.profile`, profile, context);\n\t\t\t}\n\t\t},\n\t\tids: (object, module, { compilation: { chunkGraph } }) => {\n\t\t\tobject.id = chunkGraph.getModuleId(module);\n\t\t}\n\t},\n\tmoduleReason: {\n\t\t_: (object, reason, { runtime }, { requestShortener }) => {\n\t\t\tconst dep = reason.dependency;\n\t\t\tconst moduleDep =\n\t\t\t\tdep && dep instanceof ModuleDependency ? dep : undefined;\n\t\t\t/** @type {KnownStatsModuleReason} */\n\t\t\tconst statsModuleReason = {\n\t\t\t\tmoduleIdentifier: reason.originModule\n\t\t\t\t\t? reason.originModule.identifier()\n\t\t\t\t\t: null,\n\t\t\t\tmodule: reason.originModule\n\t\t\t\t\t? reason.originModule.readableIdentifier(requestShortener)\n\t\t\t\t\t: null,\n\t\t\t\tmoduleName: reason.originModule\n\t\t\t\t\t? reason.originModule.readableIdentifier(requestShortener)\n\t\t\t\t\t: null,\n\t\t\t\tresolvedModuleIdentifier: reason.resolvedOriginModule\n\t\t\t\t\t? reason.resolvedOriginModule.identifier()\n\t\t\t\t\t: null,\n\t\t\t\tresolvedModule: reason.resolvedOriginModule\n\t\t\t\t\t? reason.resolvedOriginModule.readableIdentifier(requestShortener)\n\t\t\t\t\t: null,\n\t\t\t\ttype: reason.dependency ? reason.dependency.type : null,\n\t\t\t\tactive: reason.isActive(runtime),\n\t\t\t\texplanation: reason.explanation,\n\t\t\t\tuserRequest: (moduleDep && moduleDep.userRequest) || null\n\t\t\t};\n\t\t\tObject.assign(object, statsModuleReason);\n\t\t\tif (reason.dependency) {\n\t\t\t\tconst locInfo = formatLocation(reason.dependency.loc);\n\t\t\t\tif (locInfo) {\n\t\t\t\t\tobject.loc = locInfo;\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\tids: (object, reason, { compilation: { chunkGraph } }) => {\n\t\t\tobject.moduleId = reason.originModule\n\t\t\t\t? chunkGraph.getModuleId(reason.originModule)\n\t\t\t\t: null;\n\t\t\tobject.resolvedModuleId = reason.resolvedOriginModule\n\t\t\t\t? chunkGraph.getModuleId(reason.resolvedOriginModule)\n\t\t\t\t: null;\n\t\t}\n\t},\n\tchunk: {\n\t\t_: (object, chunk, { makePathsRelative, compilation: { chunkGraph } }) => {\n\t\t\tconst childIdByOrder = chunk.getChildIdsByOrders(chunkGraph);\n\n\t\t\t/** @type {KnownStatsChunk} */\n\t\t\tconst statsChunk = {\n\t\t\t\trendered: chunk.rendered,\n\t\t\t\tinitial: chunk.canBeInitial(),\n\t\t\t\tentry: chunk.hasRuntime(),\n\t\t\t\trecorded: AggressiveSplittingPlugin.wasChunkRecorded(chunk),\n\t\t\t\treason: chunk.chunkReason,\n\t\t\t\tsize: chunkGraph.getChunkModulesSize(chunk),\n\t\t\t\tsizes: chunkGraph.getChunkModulesSizes(chunk),\n\t\t\t\tnames: chunk.name ? [chunk.name] : [],\n\t\t\t\tidHints: Array.from(chunk.idNameHints),\n\t\t\t\truntime:\n\t\t\t\t\tchunk.runtime === undefined\n\t\t\t\t\t\t? undefined\n\t\t\t\t\t\t: typeof chunk.runtime === \"string\"\n\t\t\t\t\t\t? [makePathsRelative(chunk.runtime)]\n\t\t\t\t\t\t: Array.from(chunk.runtime.sort(), makePathsRelative),\n\t\t\t\tfiles: Array.from(chunk.files),\n\t\t\t\tauxiliaryFiles: Array.from(chunk.auxiliaryFiles).sort(compareIds),\n\t\t\t\thash: chunk.renderedHash,\n\t\t\t\tchildrenByOrder: childIdByOrder\n\t\t\t};\n\t\t\tObject.assign(object, statsChunk);\n\t\t},\n\t\tids: (object, chunk) => {\n\t\t\tobject.id = chunk.id;\n\t\t},\n\t\tchunkRelations: (object, chunk, { compilation: { chunkGraph } }) => {\n\t\t\t/** @type {Set<string|number>} */\n\t\t\tconst parents = new Set();\n\t\t\t/** @type {Set<string|number>} */\n\t\t\tconst children = new Set();\n\t\t\t/** @type {Set<string|number>} */\n\t\t\tconst siblings = new Set();\n\n\t\t\tfor (const chunkGroup of chunk.groupsIterable) {\n\t\t\t\tfor (const parentGroup of chunkGroup.parentsIterable) {\n\t\t\t\t\tfor (const chunk of parentGroup.chunks) {\n\t\t\t\t\t\tparents.add(chunk.id);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tfor (const childGroup of chunkGroup.childrenIterable) {\n\t\t\t\t\tfor (const chunk of childGroup.chunks) {\n\t\t\t\t\t\tchildren.add(chunk.id);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tfor (const sibling of chunkGroup.chunks) {\n\t\t\t\t\tif (sibling !== chunk) siblings.add(sibling.id);\n\t\t\t\t}\n\t\t\t}\n\t\t\tobject.siblings = Array.from(siblings).sort(compareIds);\n\t\t\tobject.parents = Array.from(parents).sort(compareIds);\n\t\t\tobject.children = Array.from(children).sort(compareIds);\n\t\t},\n\t\tchunkModules: (object, chunk, context, options, factory) => {\n\t\t\tconst {\n\t\t\t\ttype,\n\t\t\t\tcompilation: { chunkGraph }\n\t\t\t} = context;\n\t\t\tconst array = chunkGraph.getChunkModules(chunk);\n\t\t\tconst groupedModules = factory.create(`${type}.modules`, array, {\n\t\t\t\t...context,\n\t\t\t\truntime: chunk.runtime,\n\t\t\t\trootModules: new Set(chunkGraph.getChunkRootModules(chunk))\n\t\t\t});\n\t\t\tconst limited = spaceLimited(groupedModules, options.chunkModulesSpace);\n\t\t\tobject.modules = limited.children;\n\t\t\tobject.filteredModules = limited.filteredChildren;\n\t\t},\n\t\tchunkOrigins: (object, chunk, context, options, factory) => {\n\t\t\tconst {\n\t\t\t\ttype,\n\t\t\t\tcompilation: { chunkGraph }\n\t\t\t} = context;\n\t\t\t/** @type {Set<string>} */\n\t\t\tconst originsKeySet = new Set();\n\t\t\tconst origins = [];\n\t\t\tfor (const g of chunk.groupsIterable) {\n\t\t\t\torigins.push(...g.origins);\n\t\t\t}\n\t\t\tconst array = origins.filter(origin => {\n\t\t\t\tconst key = [\n\t\t\t\t\torigin.module ? chunkGraph.getModuleId(origin.module) : undefined,\n\t\t\t\t\tformatLocation(origin.loc),\n\t\t\t\t\torigin.request\n\t\t\t\t].join();\n\t\t\t\tif (originsKeySet.has(key)) return false;\n\t\t\t\toriginsKeySet.add(key);\n\t\t\t\treturn true;\n\t\t\t});\n\t\t\tobject.origins = factory.create(`${type}.origins`, array, context);\n\t\t}\n\t},\n\tchunkOrigin: {\n\t\t_: (object, origin, context, { requestShortener }) => {\n\t\t\t/** @type {KnownStatsChunkOrigin} */\n\t\t\tconst statsChunkOrigin = {\n\t\t\t\tmodule: origin.module ? origin.module.identifier() : \"\",\n\t\t\t\tmoduleIdentifier: origin.module ? origin.module.identifier() : \"\",\n\t\t\t\tmoduleName: origin.module\n\t\t\t\t\t? origin.module.readableIdentifier(requestShortener)\n\t\t\t\t\t: \"\",\n\t\t\t\tloc: formatLocation(origin.loc),\n\t\t\t\trequest: origin.request\n\t\t\t};\n\t\t\tObject.assign(object, statsChunkOrigin);\n\t\t},\n\t\tids: (object, origin, { compilation: { chunkGraph } }) => {\n\t\t\tobject.moduleId = origin.module\n\t\t\t\t? chunkGraph.getModuleId(origin.module)\n\t\t\t\t: undefined;\n\t\t}\n\t},\n\terror: EXTRACT_ERROR,\n\twarning: EXTRACT_ERROR,\n\tmoduleTraceItem: {\n\t\t_: (object, { origin, module }, context, { requestShortener }, factory) => {\n\t\t\tconst {\n\t\t\t\ttype,\n\t\t\t\tcompilation: { moduleGraph }\n\t\t\t} = context;\n\t\t\tobject.originIdentifier = origin.identifier();\n\t\t\tobject.originName = origin.readableIdentifier(requestShortener);\n\t\t\tobject.moduleIdentifier = module.identifier();\n\t\t\tobject.moduleName = module.readableIdentifier(requestShortener);\n\t\t\tconst dependencies = Array.from(\n\t\t\t\tmoduleGraph.getIncomingConnections(module)\n\t\t\t)\n\t\t\t\t.filter(c => c.resolvedOriginModule === origin && c.dependency)\n\t\t\t\t.map(c => c.dependency);\n\t\t\tobject.dependencies = factory.create(\n\t\t\t\t`${type}.dependencies`,\n\t\t\t\tArray.from(new Set(dependencies)),\n\t\t\t\tcontext\n\t\t\t);\n\t\t},\n\t\tids: (object, { origin, module }, { compilation: { chunkGraph } }) => {\n\t\t\tobject.originId = chunkGraph.getModuleId(origin);\n\t\t\tobject.moduleId = chunkGraph.getModuleId(module);\n\t\t}\n\t},\n\tmoduleTraceDependency: {\n\t\t_: (object, dependency) => {\n\t\t\tobject.loc = formatLocation(dependency.loc);\n\t\t}\n\t}\n};\n\n/** @type {Record<string, Record<string, (thing: any, context: StatsFactoryContext, options: NormalizedStatsOptions) => boolean | undefined>>} */\nconst FILTER = {\n\t\"module.reasons\": {\n\t\t\"!orphanModules\": (reason, { compilation: { chunkGraph } }) => {\n\t\t\tif (\n\t\t\t\treason.originModule &&\n\t\t\t\tchunkGraph.getNumberOfModuleChunks(reason.originModule) === 0\n\t\t\t) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n};\n\n/** @type {Record<string, Record<string, (thing: Object, context: StatsFactoryContext, options: NormalizedStatsOptions) => boolean | undefined>>} */\nconst FILTER_RESULTS = {\n\t\"compilation.warnings\": {\n\t\twarningsFilter: util.deprecate(\n\t\t\t(warning, context, { warningsFilter }) => {\n\t\t\t\tconst warningString = Object.keys(warning)\n\t\t\t\t\t.map(key => `${warning[key]}`)\n\t\t\t\t\t.join(\"\\n\");\n\t\t\t\treturn !warningsFilter.some(filter => filter(warning, warningString));\n\t\t\t},\n\t\t\t\"config.stats.warningsFilter is deprecated in favor of config.ignoreWarnings\",\n\t\t\t\"DEP_WEBPACK_STATS_WARNINGS_FILTER\"\n\t\t)\n\t}\n};\n\n/** @type {Record<string, (comparators: Function[], context: StatsFactoryContext) => void>} */\nconst MODULES_SORTER = {\n\t_: (comparators, { compilation: { moduleGraph } }) => {\n\t\tcomparators.push(\n\t\t\tcompareSelect(\n\t\t\t\t/**\n\t\t\t\t * @param {Module} m module\n\t\t\t\t * @returns {number} depth\n\t\t\t\t */\n\t\t\t\tm => moduleGraph.getDepth(m),\n\t\t\t\tcompareNumbers\n\t\t\t),\n\t\t\tcompareSelect(\n\t\t\t\t/**\n\t\t\t\t * @param {Module} m module\n\t\t\t\t * @returns {number} index\n\t\t\t\t */\n\t\t\t\tm => moduleGraph.getPreOrderIndex(m),\n\t\t\t\tcompareNumbers\n\t\t\t),\n\t\t\tcompareSelect(\n\t\t\t\t/**\n\t\t\t\t * @param {Module} m module\n\t\t\t\t * @returns {string} identifier\n\t\t\t\t */\n\t\t\t\tm => m.identifier(),\n\t\t\t\tcompareIds\n\t\t\t)\n\t\t);\n\t}\n};\n\n/** @type {Record<string, Record<string, (comparators: Function[], context: StatsFactoryContext) => void>>} */\nconst SORTERS = {\n\t\"compilation.chunks\": {\n\t\t_: comparators => {\n\t\t\tcomparators.push(compareSelect(c => c.id, compareIds));\n\t\t}\n\t},\n\t\"compilation.modules\": MODULES_SORTER,\n\t\"chunk.rootModules\": MODULES_SORTER,\n\t\"chunk.modules\": MODULES_SORTER,\n\t\"module.modules\": MODULES_SORTER,\n\t\"module.reasons\": {\n\t\t_: (comparators, { compilation: { chunkGraph } }) => {\n\t\t\tcomparators.push(\n\t\t\t\tcompareSelect(x => x.originModule, compareModulesByIdentifier)\n\t\t\t);\n\t\t\tcomparators.push(\n\t\t\t\tcompareSelect(x => x.resolvedOriginModule, compareModulesByIdentifier)\n\t\t\t);\n\t\t\tcomparators.push(\n\t\t\t\tcompareSelect(\n\t\t\t\t\tx => x.dependency,\n\t\t\t\t\tconcatComparators(\n\t\t\t\t\t\tcompareSelect(\n\t\t\t\t\t\t\t/**\n\t\t\t\t\t\t\t * @param {Dependency} x dependency\n\t\t\t\t\t\t\t * @returns {DependencyLocation} location\n\t\t\t\t\t\t\t */\n\t\t\t\t\t\t\tx => x.loc,\n\t\t\t\t\t\t\tcompareLocations\n\t\t\t\t\t\t),\n\t\t\t\t\t\tcompareSelect(x => x.type, compareIds)\n\t\t\t\t\t)\n\t\t\t\t)\n\t\t\t);\n\t\t}\n\t},\n\t\"chunk.origins\": {\n\t\t_: (comparators, { compilation: { chunkGraph } }) => {\n\t\t\tcomparators.push(\n\t\t\t\tcompareSelect(\n\t\t\t\t\torigin =>\n\t\t\t\t\t\torigin.module ? chunkGraph.getModuleId(origin.module) : undefined,\n\t\t\t\t\tcompareIds\n\t\t\t\t),\n\t\t\t\tcompareSelect(origin => formatLocation(origin.loc), compareIds),\n\t\t\t\tcompareSelect(origin => origin.request, compareIds)\n\t\t\t);\n\t\t}\n\t}\n};\n\nconst getItemSize = item => {\n\t// Each item takes 1 line\n\t// + the size of the children\n\t// + 1 extra line when it has children and filteredChildren\n\treturn !item.children\n\t\t? 1\n\t\t: item.filteredChildren\n\t\t? 2 + getTotalSize(item.children)\n\t\t: 1 + getTotalSize(item.children);\n};\n\nconst getTotalSize = children => {\n\tlet size = 0;\n\tfor (const child of children) {\n\t\tsize += getItemSize(child);\n\t}\n\treturn size;\n};\n\nconst getTotalItems = children => {\n\tlet count = 0;\n\tfor (const child of children) {\n\t\tif (!child.children && !child.filteredChildren) {\n\t\t\tcount++;\n\t\t} else {\n\t\t\tif (child.children) count += getTotalItems(child.children);\n\t\t\tif (child.filteredChildren) count += child.filteredChildren;\n\t\t}\n\t}\n\treturn count;\n};\n\nconst collapse = children => {\n\t// After collapse each child must take exactly one line\n\tconst newChildren = [];\n\tfor (const child of children) {\n\t\tif (child.children) {\n\t\t\tlet filteredChildren = child.filteredChildren || 0;\n\t\t\tfilteredChildren += getTotalItems(child.children);\n\t\t\tnewChildren.push({\n\t\t\t\t...child,\n\t\t\t\tchildren: undefined,\n\t\t\t\tfilteredChildren\n\t\t\t});\n\t\t} else {\n\t\t\tnewChildren.push(child);\n\t\t}\n\t}\n\treturn newChildren;\n};\n\nconst spaceLimited = (\n\titemsAndGroups,\n\tmax,\n\tfilteredChildrenLineReserved = false\n) => {\n\tif (max < 1) {\n\t\treturn {\n\t\t\tchildren: undefined,\n\t\t\tfilteredChildren: getTotalItems(itemsAndGroups)\n\t\t};\n\t}\n\t/** @type {any[] | undefined} */\n\tlet children = undefined;\n\t/** @type {number | undefined} */\n\tlet filteredChildren = undefined;\n\t// This are the groups, which take 1+ lines each\n\tconst groups = [];\n\t// The sizes of the groups are stored in groupSizes\n\tconst groupSizes = [];\n\t// This are the items, which take 1 line each\n\tconst items = [];\n\t// The total of group sizes\n\tlet groupsSize = 0;\n\n\tfor (const itemOrGroup of itemsAndGroups) {\n\t\t// is item\n\t\tif (!itemOrGroup.children && !itemOrGroup.filteredChildren) {\n\t\t\titems.push(itemOrGroup);\n\t\t} else {\n\t\t\tgroups.push(itemOrGroup);\n\t\t\tconst size = getItemSize(itemOrGroup);\n\t\t\tgroupSizes.push(size);\n\t\t\tgroupsSize += size;\n\t\t}\n\t}\n\n\tif (groupsSize + items.length <= max) {\n\t\t// The total size in the current state fits into the max\n\t\t// keep all\n\t\tchildren = groups.length > 0 ? groups.concat(items) : items;\n\t} else if (groups.length === 0) {\n\t\t// slice items to max\n\t\t// inner space marks that lines for filteredChildren already reserved\n\t\tconst limit = max - (filteredChildrenLineReserved ? 0 : 1);\n\t\tfilteredChildren = items.length - limit;\n\t\titems.length = limit;\n\t\tchildren = items;\n\t} else {\n\t\t// limit is the size when all groups are collapsed\n\t\tconst limit =\n\t\t\tgroups.length +\n\t\t\t(filteredChildrenLineReserved || items.length === 0 ? 0 : 1);\n\t\tif (limit < max) {\n\t\t\t// calculate how much we are over the size limit\n\t\t\t// this allows to approach the limit faster\n\t\t\tlet oversize;\n\t\t\t// If each group would take 1 line the total would be below the maximum\n\t\t\t// collapse some groups, keep items\n\t\t\twhile (\n\t\t\t\t(oversize =\n\t\t\t\t\tgroupsSize +\n\t\t\t\t\titems.length +\n\t\t\t\t\t(filteredChildren && !filteredChildrenLineReserved ? 1 : 0) -\n\t\t\t\t\tmax) > 0\n\t\t\t) {\n\t\t\t\t// Find the maximum group and process only this one\n\t\t\t\tconst maxGroupSize = Math.max(...groupSizes);\n\t\t\t\tif (maxGroupSize < items.length) {\n\t\t\t\t\tfilteredChildren = items.length;\n\t\t\t\t\titems.length = 0;\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tfor (let i = 0; i < groups.length; i++) {\n\t\t\t\t\tif (groupSizes[i] === maxGroupSize) {\n\t\t\t\t\t\tconst group = groups[i];\n\t\t\t\t\t\t// run this algorithm recursively and limit the size of the children to\n\t\t\t\t\t\t// current size - oversize / number of groups\n\t\t\t\t\t\t// So it should always end up being smaller\n\t\t\t\t\t\tconst headerSize = group.filteredChildren ? 2 : 1;\n\t\t\t\t\t\tconst limited = spaceLimited(\n\t\t\t\t\t\t\tgroup.children,\n\t\t\t\t\t\t\tmaxGroupSize -\n\t\t\t\t\t\t\t\t// we should use ceil to always feet in max\n\t\t\t\t\t\t\t\tMath.ceil(oversize / groups.length) -\n\t\t\t\t\t\t\t\t// we substitute size of group head\n\t\t\t\t\t\t\t\theaderSize,\n\t\t\t\t\t\t\theaderSize === 2\n\t\t\t\t\t\t);\n\t\t\t\t\t\tgroups[i] = {\n\t\t\t\t\t\t\t...group,\n\t\t\t\t\t\t\tchildren: limited.children,\n\t\t\t\t\t\t\tfilteredChildren: limited.filteredChildren\n\t\t\t\t\t\t\t\t? (group.filteredChildren || 0) + limited.filteredChildren\n\t\t\t\t\t\t\t\t: group.filteredChildren\n\t\t\t\t\t\t};\n\t\t\t\t\t\tconst newSize = getItemSize(groups[i]);\n\t\t\t\t\t\tgroupsSize -= maxGroupSize - newSize;\n\t\t\t\t\t\tgroupSizes[i] = newSize;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tchildren = groups.concat(items);\n\t\t} else if (limit === max) {\n\t\t\t// If we have only enough space to show one line per group and one line for the filtered items\n\t\t\t// collapse all groups and items\n\t\t\tchildren = collapse(groups);\n\t\t\tfilteredChildren = items.length;\n\t\t} else {\n\t\t\t// If we have no space\n\t\t\t// collapse complete group\n\t\t\tfilteredChildren = getTotalItems(itemsAndGroups);\n\t\t}\n\t}\n\n\treturn {\n\t\tchildren,\n\t\tfilteredChildren\n\t};\n};\n\nconst assetGroup = (children, assets) => {\n\tlet size = 0;\n\tfor (const asset of children) {\n\t\tsize += asset.size;\n\t}\n\treturn {\n\t\tsize\n\t};\n};\n\nconst moduleGroup = (children, modules) => {\n\tlet size = 0;\n\tconst sizes = {};\n\tfor (const module of children) {\n\t\tsize += module.size;\n\t\tfor (const key of Object.keys(module.sizes)) {\n\t\t\tsizes[key] = (sizes[key] || 0) + module.sizes[key];\n\t\t}\n\t}\n\treturn {\n\t\tsize,\n\t\tsizes\n\t};\n};\n\nconst reasonGroup = (children, reasons) => {\n\tlet active = false;\n\tfor (const reason of children) {\n\t\tactive = active || reason.active;\n\t}\n\treturn {\n\t\tactive\n\t};\n};\n\nconst GROUP_EXTENSION_REGEXP = /(\\.[^.]+?)(?:\\?|(?: \\+ \\d+ modules?)?$)/;\nconst GROUP_PATH_REGEXP = /(.+)[/\\\\][^/\\\\]+?(?:\\?|(?: \\+ \\d+ modules?)?$)/;\n\n/** @type {Record<string, (groupConfigs: GroupConfig[], context: StatsFactoryContext, options: NormalizedStatsOptions) => void>} */\nconst ASSETS_GROUPERS = {\n\t_: (groupConfigs, context, options) => {\n\t\tconst groupByFlag = (name, exclude) => {\n\t\t\tgroupConfigs.push({\n\t\t\t\tgetKeys: asset => {\n\t\t\t\t\treturn asset[name] ? [\"1\"] : undefined;\n\t\t\t\t},\n\t\t\t\tgetOptions: () => {\n\t\t\t\t\treturn {\n\t\t\t\t\t\tgroupChildren: !exclude,\n\t\t\t\t\t\tforce: exclude\n\t\t\t\t\t};\n\t\t\t\t},\n\t\t\t\tcreateGroup: (key, children, assets) => {\n\t\t\t\t\treturn exclude\n\t\t\t\t\t\t? {\n\t\t\t\t\t\t\t\ttype: \"assets by status\",\n\t\t\t\t\t\t\t\t[name]: !!key,\n\t\t\t\t\t\t\t\tfilteredChildren: assets.length,\n\t\t\t\t\t\t\t\t...assetGroup(children, assets)\n\t\t\t\t\t\t  }\n\t\t\t\t\t\t: {\n\t\t\t\t\t\t\t\ttype: \"assets by status\",\n\t\t\t\t\t\t\t\t[name]: !!key,\n\t\t\t\t\t\t\t\tchildren,\n\t\t\t\t\t\t\t\t...assetGroup(children, assets)\n\t\t\t\t\t\t  };\n\t\t\t\t}\n\t\t\t});\n\t\t};\n\t\tconst {\n\t\t\tgroupAssetsByEmitStatus,\n\t\t\tgroupAssetsByPath,\n\t\t\tgroupAssetsByExtension\n\t\t} = options;\n\t\tif (groupAssetsByEmitStatus) {\n\t\t\tgroupByFlag(\"emitted\");\n\t\t\tgroupByFlag(\"comparedForEmit\");\n\t\t\tgroupByFlag(\"isOverSizeLimit\");\n\t\t}\n\t\tif (groupAssetsByEmitStatus || !options.cachedAssets) {\n\t\t\tgroupByFlag(\"cached\", !options.cachedAssets);\n\t\t}\n\t\tif (groupAssetsByPath || groupAssetsByExtension) {\n\t\t\tgroupConfigs.push({\n\t\t\t\tgetKeys: asset => {\n\t\t\t\t\tconst extensionMatch =\n\t\t\t\t\t\tgroupAssetsByExtension && GROUP_EXTENSION_REGEXP.exec(asset.name);\n\t\t\t\t\tconst extension = extensionMatch ? extensionMatch[1] : \"\";\n\t\t\t\t\tconst pathMatch =\n\t\t\t\t\t\tgroupAssetsByPath && GROUP_PATH_REGEXP.exec(asset.name);\n\t\t\t\t\tconst path = pathMatch ? pathMatch[1].split(/[/\\\\]/) : [];\n\t\t\t\t\tconst keys = [];\n\t\t\t\t\tif (groupAssetsByPath) {\n\t\t\t\t\t\tkeys.push(\".\");\n\t\t\t\t\t\tif (extension)\n\t\t\t\t\t\t\tkeys.push(\n\t\t\t\t\t\t\t\tpath.length\n\t\t\t\t\t\t\t\t\t? `${path.join(\"/\")}/*${extension}`\n\t\t\t\t\t\t\t\t\t: `*${extension}`\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\twhile (path.length > 0) {\n\t\t\t\t\t\t\tkeys.push(path.join(\"/\") + \"/\");\n\t\t\t\t\t\t\tpath.pop();\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tif (extension) keys.push(`*${extension}`);\n\t\t\t\t\t}\n\t\t\t\t\treturn keys;\n\t\t\t\t},\n\t\t\t\tcreateGroup: (key, children, assets) => {\n\t\t\t\t\treturn {\n\t\t\t\t\t\ttype: groupAssetsByPath ? \"assets by path\" : \"assets by extension\",\n\t\t\t\t\t\tname: key,\n\t\t\t\t\t\tchildren,\n\t\t\t\t\t\t...assetGroup(children, assets)\n\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t},\n\tgroupAssetsByInfo: (groupConfigs, context, options) => {\n\t\tconst groupByAssetInfoFlag = name => {\n\t\t\tgroupConfigs.push({\n\t\t\t\tgetKeys: asset => {\n\t\t\t\t\treturn asset.info && asset.info[name] ? [\"1\"] : undefined;\n\t\t\t\t},\n\t\t\t\tcreateGroup: (key, children, assets) => {\n\t\t\t\t\treturn {\n\t\t\t\t\t\ttype: \"assets by info\",\n\t\t\t\t\t\tinfo: {\n\t\t\t\t\t\t\t[name]: !!key\n\t\t\t\t\t\t},\n\t\t\t\t\t\tchildren,\n\t\t\t\t\t\t...assetGroup(children, assets)\n\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t});\n\t\t};\n\t\tgroupByAssetInfoFlag(\"immutable\");\n\t\tgroupByAssetInfoFlag(\"development\");\n\t\tgroupByAssetInfoFlag(\"hotModuleReplacement\");\n\t},\n\tgroupAssetsByChunk: (groupConfigs, context, options) => {\n\t\tconst groupByNames = name => {\n\t\t\tgroupConfigs.push({\n\t\t\t\tgetKeys: asset => {\n\t\t\t\t\treturn asset[name];\n\t\t\t\t},\n\t\t\t\tcreateGroup: (key, children, assets) => {\n\t\t\t\t\treturn {\n\t\t\t\t\t\ttype: \"assets by chunk\",\n\t\t\t\t\t\t[name]: [key],\n\t\t\t\t\t\tchildren,\n\t\t\t\t\t\t...assetGroup(children, assets)\n\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t});\n\t\t};\n\t\tgroupByNames(\"chunkNames\");\n\t\tgroupByNames(\"auxiliaryChunkNames\");\n\t\tgroupByNames(\"chunkIdHints\");\n\t\tgroupByNames(\"auxiliaryChunkIdHints\");\n\t},\n\texcludeAssets: (groupConfigs, context, { excludeAssets }) => {\n\t\tgroupConfigs.push({\n\t\t\tgetKeys: asset => {\n\t\t\t\tconst ident = asset.name;\n\t\t\t\tconst excluded = excludeAssets.some(fn => fn(ident, asset));\n\t\t\t\tif (excluded) return [\"excluded\"];\n\t\t\t},\n\t\t\tgetOptions: () => ({\n\t\t\t\tgroupChildren: false,\n\t\t\t\tforce: true\n\t\t\t}),\n\t\t\tcreateGroup: (key, children, assets) => ({\n\t\t\t\ttype: \"hidden assets\",\n\t\t\t\tfilteredChildren: assets.length,\n\t\t\t\t...assetGroup(children, assets)\n\t\t\t})\n\t\t});\n\t}\n};\n\n/** @type {function(\"module\" | \"chunk\" | \"root-of-chunk\" | \"nested\"): Record<string, (groupConfigs: GroupConfig[], context: StatsFactoryContext, options: NormalizedStatsOptions) => void>} */\nconst MODULES_GROUPERS = type => ({\n\t_: (groupConfigs, context, options) => {\n\t\tconst groupByFlag = (name, type, exclude) => {\n\t\t\tgroupConfigs.push({\n\t\t\t\tgetKeys: module => {\n\t\t\t\t\treturn module[name] ? [\"1\"] : undefined;\n\t\t\t\t},\n\t\t\t\tgetOptions: () => {\n\t\t\t\t\treturn {\n\t\t\t\t\t\tgroupChildren: !exclude,\n\t\t\t\t\t\tforce: exclude\n\t\t\t\t\t};\n\t\t\t\t},\n\t\t\t\tcreateGroup: (key, children, modules) => {\n\t\t\t\t\treturn {\n\t\t\t\t\t\ttype,\n\t\t\t\t\t\t[name]: !!key,\n\t\t\t\t\t\t...(exclude ? { filteredChildren: modules.length } : { children }),\n\t\t\t\t\t\t...moduleGroup(children, modules)\n\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t});\n\t\t};\n\t\tconst {\n\t\t\tgroupModulesByCacheStatus,\n\t\t\tgroupModulesByLayer,\n\t\t\tgroupModulesByAttributes,\n\t\t\tgroupModulesByType,\n\t\t\tgroupModulesByPath,\n\t\t\tgroupModulesByExtension\n\t\t} = options;\n\t\tif (groupModulesByAttributes) {\n\t\t\tgroupByFlag(\"errors\", \"modules with errors\");\n\t\t\tgroupByFlag(\"warnings\", \"modules with warnings\");\n\t\t\tgroupByFlag(\"assets\", \"modules with assets\");\n\t\t\tgroupByFlag(\"optional\", \"optional modules\");\n\t\t}\n\t\tif (groupModulesByCacheStatus) {\n\t\t\tgroupByFlag(\"cacheable\", \"cacheable modules\");\n\t\t\tgroupByFlag(\"built\", \"built modules\");\n\t\t\tgroupByFlag(\"codeGenerated\", \"code generated modules\");\n\t\t}\n\t\tif (groupModulesByCacheStatus || !options.cachedModules) {\n\t\t\tgroupByFlag(\"cached\", \"cached modules\", !options.cachedModules);\n\t\t}\n\t\tif (groupModulesByAttributes || !options.orphanModules) {\n\t\t\tgroupByFlag(\"orphan\", \"orphan modules\", !options.orphanModules);\n\t\t}\n\t\tif (groupModulesByAttributes || !options.dependentModules) {\n\t\t\tgroupByFlag(\"dependent\", \"dependent modules\", !options.dependentModules);\n\t\t}\n\t\tif (groupModulesByType || !options.runtimeModules) {\n\t\t\tgroupConfigs.push({\n\t\t\t\tgetKeys: module => {\n\t\t\t\t\tif (!module.moduleType) return;\n\t\t\t\t\tif (groupModulesByType) {\n\t\t\t\t\t\treturn [module.moduleType.split(\"/\", 1)[0]];\n\t\t\t\t\t} else if (module.moduleType === \"runtime\") {\n\t\t\t\t\t\treturn [\"runtime\"];\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\tgetOptions: key => {\n\t\t\t\t\tconst exclude = key === \"runtime\" && !options.runtimeModules;\n\t\t\t\t\treturn {\n\t\t\t\t\t\tgroupChildren: !exclude,\n\t\t\t\t\t\tforce: exclude\n\t\t\t\t\t};\n\t\t\t\t},\n\t\t\t\tcreateGroup: (key, children, modules) => {\n\t\t\t\t\tconst exclude = key === \"runtime\" && !options.runtimeModules;\n\t\t\t\t\treturn {\n\t\t\t\t\t\ttype: `${key} modules`,\n\t\t\t\t\t\tmoduleType: key,\n\t\t\t\t\t\t...(exclude ? { filteredChildren: modules.length } : { children }),\n\t\t\t\t\t\t...moduleGroup(children, modules)\n\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t\tif (groupModulesByLayer) {\n\t\t\tgroupConfigs.push({\n\t\t\t\tgetKeys: module => {\n\t\t\t\t\treturn [module.layer];\n\t\t\t\t},\n\t\t\t\tcreateGroup: (key, children, modules) => {\n\t\t\t\t\treturn {\n\t\t\t\t\t\ttype: \"modules by layer\",\n\t\t\t\t\t\tlayer: key,\n\t\t\t\t\t\tchildren,\n\t\t\t\t\t\t...moduleGroup(children, modules)\n\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t\tif (groupModulesByPath || groupModulesByExtension) {\n\t\t\tgroupConfigs.push({\n\t\t\t\tgetKeys: module => {\n\t\t\t\t\tif (!module.name) return;\n\t\t\t\t\tconst resource = parseResource(module.name.split(\"!\").pop()).path;\n\t\t\t\t\tconst dataUrl = /^data:[^,;]+/.exec(resource);\n\t\t\t\t\tif (dataUrl) return [dataUrl[0]];\n\t\t\t\t\tconst extensionMatch =\n\t\t\t\t\t\tgroupModulesByExtension && GROUP_EXTENSION_REGEXP.exec(resource);\n\t\t\t\t\tconst extension = extensionMatch ? extensionMatch[1] : \"\";\n\t\t\t\t\tconst pathMatch =\n\t\t\t\t\t\tgroupModulesByPath && GROUP_PATH_REGEXP.exec(resource);\n\t\t\t\t\tconst path = pathMatch ? pathMatch[1].split(/[/\\\\]/) : [];\n\t\t\t\t\tconst keys = [];\n\t\t\t\t\tif (groupModulesByPath) {\n\t\t\t\t\t\tif (extension)\n\t\t\t\t\t\t\tkeys.push(\n\t\t\t\t\t\t\t\tpath.length\n\t\t\t\t\t\t\t\t\t? `${path.join(\"/\")}/*${extension}`\n\t\t\t\t\t\t\t\t\t: `*${extension}`\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\twhile (path.length > 0) {\n\t\t\t\t\t\t\tkeys.push(path.join(\"/\") + \"/\");\n\t\t\t\t\t\t\tpath.pop();\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tif (extension) keys.push(`*${extension}`);\n\t\t\t\t\t}\n\t\t\t\t\treturn keys;\n\t\t\t\t},\n\t\t\t\tcreateGroup: (key, children, modules) => {\n\t\t\t\t\tconst isDataUrl = key.startsWith(\"data:\");\n\t\t\t\t\treturn {\n\t\t\t\t\t\ttype: isDataUrl\n\t\t\t\t\t\t\t? \"modules by mime type\"\n\t\t\t\t\t\t\t: groupModulesByPath\n\t\t\t\t\t\t\t? \"modules by path\"\n\t\t\t\t\t\t\t: \"modules by extension\",\n\t\t\t\t\t\tname: isDataUrl ? key.slice(/* 'data:'.length */ 5) : key,\n\t\t\t\t\t\tchildren,\n\t\t\t\t\t\t...moduleGroup(children, modules)\n\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t},\n\texcludeModules: (groupConfigs, context, { excludeModules }) => {\n\t\tgroupConfigs.push({\n\t\t\tgetKeys: module => {\n\t\t\t\tconst name = module.name;\n\t\t\t\tif (name) {\n\t\t\t\t\tconst excluded = excludeModules.some(fn => fn(name, module, type));\n\t\t\t\t\tif (excluded) return [\"1\"];\n\t\t\t\t}\n\t\t\t},\n\t\t\tgetOptions: () => ({\n\t\t\t\tgroupChildren: false,\n\t\t\t\tforce: true\n\t\t\t}),\n\t\t\tcreateGroup: (key, children, modules) => ({\n\t\t\t\ttype: \"hidden modules\",\n\t\t\t\tfilteredChildren: children.length,\n\t\t\t\t...moduleGroup(children, modules)\n\t\t\t})\n\t\t});\n\t}\n});\n\n/** @type {Record<string, Record<string, (groupConfigs: GroupConfig[], context: StatsFactoryContext, options: NormalizedStatsOptions) => void>>} */\nconst RESULT_GROUPERS = {\n\t\"compilation.assets\": ASSETS_GROUPERS,\n\t\"asset.related\": ASSETS_GROUPERS,\n\t\"compilation.modules\": MODULES_GROUPERS(\"module\"),\n\t\"chunk.modules\": MODULES_GROUPERS(\"chunk\"),\n\t\"chunk.rootModules\": MODULES_GROUPERS(\"root-of-chunk\"),\n\t\"module.modules\": MODULES_GROUPERS(\"nested\"),\n\t\"module.reasons\": {\n\t\tgroupReasonsByOrigin: groupConfigs => {\n\t\t\tgroupConfigs.push({\n\t\t\t\tgetKeys: reason => {\n\t\t\t\t\treturn [reason.module];\n\t\t\t\t},\n\t\t\t\tcreateGroup: (key, children, reasons) => {\n\t\t\t\t\treturn {\n\t\t\t\t\t\ttype: \"from origin\",\n\t\t\t\t\t\tmodule: key,\n\t\t\t\t\t\tchildren,\n\t\t\t\t\t\t...reasonGroup(children, reasons)\n\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t}\n};\n\n// remove a prefixed \"!\" that can be specified to reverse sort order\nconst normalizeFieldKey = field => {\n\tif (field[0] === \"!\") {\n\t\treturn field.slice(1);\n\t}\n\treturn field;\n};\n\n// if a field is prefixed by a \"!\" reverse sort order\nconst sortOrderRegular = field => {\n\tif (field[0] === \"!\") {\n\t\treturn false;\n\t}\n\treturn true;\n};\n\n/**\n * @param {string} field field name\n * @returns {function(Object, Object): number} comparators\n */\nconst sortByField = field => {\n\tif (!field) {\n\t\t/**\n\t\t * @param {any} a first\n\t\t * @param {any} b second\n\t\t * @returns {-1|0|1} zero\n\t\t */\n\t\tconst noSort = (a, b) => 0;\n\t\treturn noSort;\n\t}\n\n\tconst fieldKey = normalizeFieldKey(field);\n\n\tlet sortFn = compareSelect(m => m[fieldKey], compareIds);\n\n\t// if a field is prefixed with a \"!\" the sort is reversed!\n\tconst sortIsRegular = sortOrderRegular(field);\n\n\tif (!sortIsRegular) {\n\t\tconst oldSortFn = sortFn;\n\t\tsortFn = (a, b) => oldSortFn(b, a);\n\t}\n\n\treturn sortFn;\n};\n\nconst ASSET_SORTERS = {\n\t/** @type {(comparators: Function[], context: StatsFactoryContext, options: NormalizedStatsOptions) => void} */\n\tassetsSort: (comparators, context, { assetsSort }) => {\n\t\tcomparators.push(sortByField(assetsSort));\n\t},\n\t_: comparators => {\n\t\tcomparators.push(compareSelect(a => a.name, compareIds));\n\t}\n};\n\n/** @type {Record<string, Record<string, (comparators: Function[], context: StatsFactoryContext, options: NormalizedStatsOptions) => void>>} */\nconst RESULT_SORTERS = {\n\t\"compilation.chunks\": {\n\t\tchunksSort: (comparators, context, { chunksSort }) => {\n\t\t\tcomparators.push(sortByField(chunksSort));\n\t\t}\n\t},\n\t\"compilation.modules\": {\n\t\tmodulesSort: (comparators, context, { modulesSort }) => {\n\t\t\tcomparators.push(sortByField(modulesSort));\n\t\t}\n\t},\n\t\"chunk.modules\": {\n\t\tchunkModulesSort: (comparators, context, { chunkModulesSort }) => {\n\t\t\tcomparators.push(sortByField(chunkModulesSort));\n\t\t}\n\t},\n\t\"module.modules\": {\n\t\tnestedModulesSort: (comparators, context, { nestedModulesSort }) => {\n\t\t\tcomparators.push(sortByField(nestedModulesSort));\n\t\t}\n\t},\n\t\"compilation.assets\": ASSET_SORTERS,\n\t\"asset.related\": ASSET_SORTERS\n};\n\n/**\n * @param {Record<string, Record<string, Function>>} config the config see above\n * @param {NormalizedStatsOptions} options stats options\n * @param {function(string, Function): void} fn handler function called for every active line in config\n * @returns {void}\n */\nconst iterateConfig = (config, options, fn) => {\n\tfor (const hookFor of Object.keys(config)) {\n\t\tconst subConfig = config[hookFor];\n\t\tfor (const option of Object.keys(subConfig)) {\n\t\t\tif (option !== \"_\") {\n\t\t\t\tif (option.startsWith(\"!\")) {\n\t\t\t\t\tif (options[option.slice(1)]) continue;\n\t\t\t\t} else {\n\t\t\t\t\tconst value = options[option];\n\t\t\t\t\tif (\n\t\t\t\t\t\tvalue === false ||\n\t\t\t\t\t\tvalue === undefined ||\n\t\t\t\t\t\t(Array.isArray(value) && value.length === 0)\n\t\t\t\t\t)\n\t\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t}\n\t\t\tfn(hookFor, subConfig[option]);\n\t\t}\n\t}\n};\n\n/** @type {Record<string, string>} */\nconst ITEM_NAMES = {\n\t\"compilation.children[]\": \"compilation\",\n\t\"compilation.modules[]\": \"module\",\n\t\"compilation.entrypoints[]\": \"chunkGroup\",\n\t\"compilation.namedChunkGroups[]\": \"chunkGroup\",\n\t\"compilation.errors[]\": \"error\",\n\t\"compilation.warnings[]\": \"warning\",\n\t\"chunk.modules[]\": \"module\",\n\t\"chunk.rootModules[]\": \"module\",\n\t\"chunk.origins[]\": \"chunkOrigin\",\n\t\"compilation.chunks[]\": \"chunk\",\n\t\"compilation.assets[]\": \"asset\",\n\t\"asset.related[]\": \"asset\",\n\t\"module.issuerPath[]\": \"moduleIssuer\",\n\t\"module.reasons[]\": \"moduleReason\",\n\t\"module.modules[]\": \"module\",\n\t\"module.children[]\": \"module\",\n\t\"moduleTrace[]\": \"moduleTraceItem\",\n\t\"moduleTraceItem.dependencies[]\": \"moduleTraceDependency\"\n};\n\n/**\n * @param {Object[]} items items to be merged\n * @returns {Object} an object\n */\nconst mergeToObject = items => {\n\tconst obj = Object.create(null);\n\tfor (const item of items) {\n\t\tobj[item.name] = item;\n\t}\n\treturn obj;\n};\n\n/** @type {Record<string, (items: Object[]) => any>} */\nconst MERGER = {\n\t\"compilation.entrypoints\": mergeToObject,\n\t\"compilation.namedChunkGroups\": mergeToObject\n};\n\nclass DefaultStatsFactoryPlugin {\n\t/**\n\t * Apply the plugin\n\t * @param {Compiler} compiler the compiler instance\n\t * @returns {void}\n\t */\n\tapply(compiler) {\n\t\tcompiler.hooks.compilation.tap(\"DefaultStatsFactoryPlugin\", compilation => {\n\t\t\tcompilation.hooks.statsFactory.tap(\n\t\t\t\t\"DefaultStatsFactoryPlugin\",\n\t\t\t\t(stats, options, context) => {\n\t\t\t\t\titerateConfig(SIMPLE_EXTRACTORS, options, (hookFor, fn) => {\n\t\t\t\t\t\tstats.hooks.extract\n\t\t\t\t\t\t\t.for(hookFor)\n\t\t\t\t\t\t\t.tap(\"DefaultStatsFactoryPlugin\", (obj, data, ctx) =>\n\t\t\t\t\t\t\t\tfn(obj, data, ctx, options, stats)\n\t\t\t\t\t\t\t);\n\t\t\t\t\t});\n\t\t\t\t\titerateConfig(FILTER, options, (hookFor, fn) => {\n\t\t\t\t\t\tstats.hooks.filter\n\t\t\t\t\t\t\t.for(hookFor)\n\t\t\t\t\t\t\t.tap(\"DefaultStatsFactoryPlugin\", (item, ctx, idx, i) =>\n\t\t\t\t\t\t\t\tfn(item, ctx, options, idx, i)\n\t\t\t\t\t\t\t);\n\t\t\t\t\t});\n\t\t\t\t\titerateConfig(FILTER_RESULTS, options, (hookFor, fn) => {\n\t\t\t\t\t\tstats.hooks.filterResults\n\t\t\t\t\t\t\t.for(hookFor)\n\t\t\t\t\t\t\t.tap(\"DefaultStatsFactoryPlugin\", (item, ctx, idx, i) =>\n\t\t\t\t\t\t\t\tfn(item, ctx, options, idx, i)\n\t\t\t\t\t\t\t);\n\t\t\t\t\t});\n\t\t\t\t\titerateConfig(SORTERS, options, (hookFor, fn) => {\n\t\t\t\t\t\tstats.hooks.sort\n\t\t\t\t\t\t\t.for(hookFor)\n\t\t\t\t\t\t\t.tap(\"DefaultStatsFactoryPlugin\", (comparators, ctx) =>\n\t\t\t\t\t\t\t\tfn(comparators, ctx, options)\n\t\t\t\t\t\t\t);\n\t\t\t\t\t});\n\t\t\t\t\titerateConfig(RESULT_SORTERS, options, (hookFor, fn) => {\n\t\t\t\t\t\tstats.hooks.sortResults\n\t\t\t\t\t\t\t.for(hookFor)\n\t\t\t\t\t\t\t.tap(\"DefaultStatsFactoryPlugin\", (comparators, ctx) =>\n\t\t\t\t\t\t\t\tfn(comparators, ctx, options)\n\t\t\t\t\t\t\t);\n\t\t\t\t\t});\n\t\t\t\t\titerateConfig(RESULT_GROUPERS, options, (hookFor, fn) => {\n\t\t\t\t\t\tstats.hooks.groupResults\n\t\t\t\t\t\t\t.for(hookFor)\n\t\t\t\t\t\t\t.tap(\"DefaultStatsFactoryPlugin\", (groupConfigs, ctx) =>\n\t\t\t\t\t\t\t\tfn(groupConfigs, ctx, options)\n\t\t\t\t\t\t\t);\n\t\t\t\t\t});\n\t\t\t\t\tfor (const key of Object.keys(ITEM_NAMES)) {\n\t\t\t\t\t\tconst itemName = ITEM_NAMES[key];\n\t\t\t\t\t\tstats.hooks.getItemName\n\t\t\t\t\t\t\t.for(key)\n\t\t\t\t\t\t\t.tap(\"DefaultStatsFactoryPlugin\", () => itemName);\n\t\t\t\t\t}\n\t\t\t\t\tfor (const key of Object.keys(MERGER)) {\n\t\t\t\t\t\tconst merger = MERGER[key];\n\t\t\t\t\t\tstats.hooks.merge.for(key).tap(\"DefaultStatsFactoryPlugin\", merger);\n\t\t\t\t\t}\n\t\t\t\t\tif (options.children) {\n\t\t\t\t\t\tif (Array.isArray(options.children)) {\n\t\t\t\t\t\t\tstats.hooks.getItemFactory\n\t\t\t\t\t\t\t\t.for(\"compilation.children[].compilation\")\n\t\t\t\t\t\t\t\t.tap(\"DefaultStatsFactoryPlugin\", (comp, { _index: idx }) => {\n\t\t\t\t\t\t\t\t\tif (idx < options.children.length) {\n\t\t\t\t\t\t\t\t\t\treturn compilation.createStatsFactory(\n\t\t\t\t\t\t\t\t\t\t\tcompilation.createStatsOptions(\n\t\t\t\t\t\t\t\t\t\t\t\toptions.children[idx],\n\t\t\t\t\t\t\t\t\t\t\t\tcontext\n\t\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t} else if (options.children !== true) {\n\t\t\t\t\t\t\tconst childFactory = compilation.createStatsFactory(\n\t\t\t\t\t\t\t\tcompilation.createStatsOptions(options.children, context)\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\tstats.hooks.getItemFactory\n\t\t\t\t\t\t\t\t.for(\"compilation.children[].compilation\")\n\t\t\t\t\t\t\t\t.tap(\"DefaultStatsFactoryPlugin\", () => {\n\t\t\t\t\t\t\t\t\treturn childFactory;\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t);\n\t\t});\n\t}\n}\nmodule.exports = DefaultStatsFactoryPlugin;\n"],"mappings":"AAAA;AACA;AACA;AACA;AAEA;;AAEA,MAAMA,IAAI,GAAGC,OAAO,CAAC,MAAD,CAApB;;AACA,MAAMC,gBAAgB,GAAGD,OAAO,CAAC,kCAAD,CAAhC;;AACA,MAAME,cAAc,GAAGF,OAAO,CAAC,mBAAD,CAA9B;;AACA,MAAM;EAAEG;AAAF,IAAcH,OAAO,CAAC,mBAAD,CAA3B;;AACA,MAAMI,yBAAyB,GAAGJ,OAAO,CAAC,uCAAD,CAAzC;;AACA,MAAMK,gBAAgB,GAAGL,OAAO,CAAC,iCAAD,CAAhC;;AACA,MAAM;EAAEM;AAAF,IAAoBN,OAAO,CAAC,yBAAD,CAAjC;;AACA,MAAM;EACLO,gBADK;EAELC,iBAFK;EAGLC,cAHK;EAILC,UAJK;EAKLC,iBALK;EAMLC,aANK;EAOLC;AAPK,IAQFb,OAAO,CAAC,qBAAD,CARX;;AASA,MAAM;EAAEc,iBAAF;EAAqBC;AAArB,IAAuCf,OAAO,CAAC,oBAAD,CAApD;AAEA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AAEA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AACA;AACA;AACA;AACA;;AAEA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,MAAMgB,WAAW,GAAG,CAACC,KAAD,EAAQC,QAAR,KAAqB;EACxC;EACA,MAAMC,GAAG,GAAG,IAAIC,GAAJ,EAAZ;;EACA,KAAK,MAAMC,IAAX,IAAmBJ,KAAnB,EAA0B;IACzB,KAAK,MAAMK,CAAX,IAAgBJ,QAAQ,CAACG,IAAD,CAAxB,EAAgC;MAC/BF,GAAG,CAACI,GAAJ,CAAQD,CAAR;IACA;EACD;;EACD,OAAOE,KAAK,CAACC,IAAN,CAAWN,GAAX,CAAP;AACA,CATD;AAWA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,MAAMO,kBAAkB,GAAG,CAACT,KAAD,EAAQC,QAAR,EAAkBS,UAAlB,KAAiC;EAC3D,OAAOX,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"},"metadata":{},"sourceType":"script"}