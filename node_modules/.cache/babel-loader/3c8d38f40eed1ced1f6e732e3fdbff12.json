{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n/** @typedef {import(\"webpack-sources\").Source} Source */\n\n/** @typedef {import(\"./ChunkGraph\")} ChunkGraph */\n\n/** @typedef {import(\"./CodeGenerationResults\")} CodeGenerationResults */\n\n/** @typedef {import(\"./Compilation\")} Compilation */\n\n/** @typedef {import(\"./ConcatenationScope\")} ConcatenationScope */\n\n/** @typedef {import(\"./DependencyTemplate\")} DependencyTemplate */\n\n/** @typedef {import(\"./DependencyTemplates\")} DependencyTemplates */\n\n/** @typedef {import(\"./Module\").ConcatenationBailoutReasonContext} ConcatenationBailoutReasonContext */\n\n/** @typedef {import(\"./ModuleGraph\")} ModuleGraph */\n\n/** @typedef {import(\"./NormalModule\")} NormalModule */\n\n/** @typedef {import(\"./RuntimeTemplate\")} RuntimeTemplate */\n\n/** @typedef {import(\"./util/Hash\")} Hash */\n\n/** @typedef {import(\"./util/runtime\").RuntimeSpec} RuntimeSpec */\n\n/**\n * @typedef {Object} GenerateContext\n * @property {DependencyTemplates} dependencyTemplates mapping from dependencies to templates\n * @property {RuntimeTemplate} runtimeTemplate the runtime template\n * @property {ModuleGraph} moduleGraph the module graph\n * @property {ChunkGraph} chunkGraph the chunk graph\n * @property {Set<string>} runtimeRequirements the requirements for runtime\n * @property {RuntimeSpec} runtime the runtime\n * @property {ConcatenationScope=} concatenationScope when in concatenated module, information about other concatenated modules\n * @property {CodeGenerationResults=} codeGenerationResults code generation results of other modules (need to have a codeGenerationDependency to use that)\n * @property {string} type which kind of code should be generated\n * @property {function(): Map<string, any>=} getData get access to the code generation data\n */\n\n/**\n * @typedef {Object} UpdateHashContext\n * @property {NormalModule} module the module\n * @property {ChunkGraph} chunkGraph\n * @property {RuntimeSpec} runtime\n * @property {RuntimeTemplate=} runtimeTemplate\n */\n\n/**\n *\n */\n\nclass Generator {\n  static byType(map) {\n    return new ByTypeGenerator(map);\n  }\n  /* istanbul ignore next */\n\n  /**\n   * @abstract\n   * @param {NormalModule} module fresh module\n   * @returns {Set<string>} available types (do not mutate)\n   */\n\n\n  getTypes(module) {\n    const AbstractMethodError = require(\"./AbstractMethodError\");\n\n    throw new AbstractMethodError();\n  }\n  /* istanbul ignore next */\n\n  /**\n   * @abstract\n   * @param {NormalModule} module the module\n   * @param {string=} type source type\n   * @returns {number} estimate size of the module\n   */\n\n\n  getSize(module, type) {\n    const AbstractMethodError = require(\"./AbstractMethodError\");\n\n    throw new AbstractMethodError();\n  }\n  /* istanbul ignore next */\n\n  /**\n   * @abstract\n   * @param {NormalModule} module module for which the code should be generated\n   * @param {GenerateContext} generateContext context for generate\n   * @returns {Source} generated code\n   */\n\n\n  generate(module, _ref) {\n    let {\n      dependencyTemplates,\n      runtimeTemplate,\n      moduleGraph,\n      type\n    } = _ref;\n\n    const AbstractMethodError = require(\"./AbstractMethodError\");\n\n    throw new AbstractMethodError();\n  }\n  /**\n   * @param {NormalModule} module module for which the bailout reason should be determined\n   * @param {ConcatenationBailoutReasonContext} context context\n   * @returns {string | undefined} reason why this module can't be concatenated, undefined when it can be concatenated\n   */\n\n\n  getConcatenationBailoutReason(module, context) {\n    return `Module Concatenation is not implemented for ${this.constructor.name}`;\n  }\n  /**\n   * @param {Hash} hash hash that will be modified\n   * @param {UpdateHashContext} updateHashContext context for updating hash\n   */\n\n\n  updateHash(hash, _ref2) {// no nothing\n\n    let {\n      module,\n      runtime\n    } = _ref2;\n  }\n\n}\n\nclass ByTypeGenerator extends Generator {\n  constructor(map) {\n    super();\n    this.map = map;\n    this._types = new Set(Object.keys(map));\n  }\n  /**\n   * @param {NormalModule} module fresh module\n   * @returns {Set<string>} available types (do not mutate)\n   */\n\n\n  getTypes(module) {\n    return this._types;\n  }\n  /**\n   * @param {NormalModule} module the module\n   * @param {string=} type source type\n   * @returns {number} estimate size of the module\n   */\n\n\n  getSize(module, type) {\n    const t = type || \"javascript\";\n    const generator = this.map[t];\n    return generator ? generator.getSize(module, t) : 0;\n  }\n  /**\n   * @param {NormalModule} module module for which the code should be generated\n   * @param {GenerateContext} generateContext context for generate\n   * @returns {Source} generated code\n   */\n\n\n  generate(module, generateContext) {\n    const type = generateContext.type;\n    const generator = this.map[type];\n\n    if (!generator) {\n      throw new Error(`Generator.byType: no generator specified for ${type}`);\n    }\n\n    return generator.generate(module, generateContext);\n  }\n\n}\n\nmodule.exports = Generator;","map":{"version":3,"names":["Generator","byType","map","ByTypeGenerator","getTypes","module","AbstractMethodError","require","getSize","type","generate","dependencyTemplates","runtimeTemplate","moduleGraph","getConcatenationBailoutReason","context","constructor","name","updateHash","hash","runtime","_types","Set","Object","keys","t","generator","generateContext","Error","exports"],"sources":["/Users/arpanbhandari/Documents/cod-ing/React/newsapp/node_modules/webpack/lib/Generator.js"],"sourcesContent":["/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\n\"use strict\";\n\n/** @typedef {import(\"webpack-sources\").Source} Source */\n/** @typedef {import(\"./ChunkGraph\")} ChunkGraph */\n/** @typedef {import(\"./CodeGenerationResults\")} CodeGenerationResults */\n/** @typedef {import(\"./Compilation\")} Compilation */\n/** @typedef {import(\"./ConcatenationScope\")} ConcatenationScope */\n/** @typedef {import(\"./DependencyTemplate\")} DependencyTemplate */\n/** @typedef {import(\"./DependencyTemplates\")} DependencyTemplates */\n/** @typedef {import(\"./Module\").ConcatenationBailoutReasonContext} ConcatenationBailoutReasonContext */\n/** @typedef {import(\"./ModuleGraph\")} ModuleGraph */\n/** @typedef {import(\"./NormalModule\")} NormalModule */\n/** @typedef {import(\"./RuntimeTemplate\")} RuntimeTemplate */\n/** @typedef {import(\"./util/Hash\")} Hash */\n/** @typedef {import(\"./util/runtime\").RuntimeSpec} RuntimeSpec */\n\n/**\n * @typedef {Object} GenerateContext\n * @property {DependencyTemplates} dependencyTemplates mapping from dependencies to templates\n * @property {RuntimeTemplate} runtimeTemplate the runtime template\n * @property {ModuleGraph} moduleGraph the module graph\n * @property {ChunkGraph} chunkGraph the chunk graph\n * @property {Set<string>} runtimeRequirements the requirements for runtime\n * @property {RuntimeSpec} runtime the runtime\n * @property {ConcatenationScope=} concatenationScope when in concatenated module, information about other concatenated modules\n * @property {CodeGenerationResults=} codeGenerationResults code generation results of other modules (need to have a codeGenerationDependency to use that)\n * @property {string} type which kind of code should be generated\n * @property {function(): Map<string, any>=} getData get access to the code generation data\n */\n\n/**\n * @typedef {Object} UpdateHashContext\n * @property {NormalModule} module the module\n * @property {ChunkGraph} chunkGraph\n * @property {RuntimeSpec} runtime\n * @property {RuntimeTemplate=} runtimeTemplate\n */\n\n/**\n *\n */\nclass Generator {\n\tstatic byType(map) {\n\t\treturn new ByTypeGenerator(map);\n\t}\n\n\t/* istanbul ignore next */\n\t/**\n\t * @abstract\n\t * @param {NormalModule} module fresh module\n\t * @returns {Set<string>} available types (do not mutate)\n\t */\n\tgetTypes(module) {\n\t\tconst AbstractMethodError = require(\"./AbstractMethodError\");\n\t\tthrow new AbstractMethodError();\n\t}\n\n\t/* istanbul ignore next */\n\t/**\n\t * @abstract\n\t * @param {NormalModule} module the module\n\t * @param {string=} type source type\n\t * @returns {number} estimate size of the module\n\t */\n\tgetSize(module, type) {\n\t\tconst AbstractMethodError = require(\"./AbstractMethodError\");\n\t\tthrow new AbstractMethodError();\n\t}\n\n\t/* istanbul ignore next */\n\t/**\n\t * @abstract\n\t * @param {NormalModule} module module for which the code should be generated\n\t * @param {GenerateContext} generateContext context for generate\n\t * @returns {Source} generated code\n\t */\n\tgenerate(\n\t\tmodule,\n\t\t{ dependencyTemplates, runtimeTemplate, moduleGraph, type }\n\t) {\n\t\tconst AbstractMethodError = require(\"./AbstractMethodError\");\n\t\tthrow new AbstractMethodError();\n\t}\n\n\t/**\n\t * @param {NormalModule} module module for which the bailout reason should be determined\n\t * @param {ConcatenationBailoutReasonContext} context context\n\t * @returns {string | undefined} reason why this module can't be concatenated, undefined when it can be concatenated\n\t */\n\tgetConcatenationBailoutReason(module, context) {\n\t\treturn `Module Concatenation is not implemented for ${this.constructor.name}`;\n\t}\n\n\t/**\n\t * @param {Hash} hash hash that will be modified\n\t * @param {UpdateHashContext} updateHashContext context for updating hash\n\t */\n\tupdateHash(hash, { module, runtime }) {\n\t\t// no nothing\n\t}\n}\n\nclass ByTypeGenerator extends Generator {\n\tconstructor(map) {\n\t\tsuper();\n\t\tthis.map = map;\n\t\tthis._types = new Set(Object.keys(map));\n\t}\n\n\t/**\n\t * @param {NormalModule} module fresh module\n\t * @returns {Set<string>} available types (do not mutate)\n\t */\n\tgetTypes(module) {\n\t\treturn this._types;\n\t}\n\n\t/**\n\t * @param {NormalModule} module the module\n\t * @param {string=} type source type\n\t * @returns {number} estimate size of the module\n\t */\n\tgetSize(module, type) {\n\t\tconst t = type || \"javascript\";\n\t\tconst generator = this.map[t];\n\t\treturn generator ? generator.getSize(module, t) : 0;\n\t}\n\n\t/**\n\t * @param {NormalModule} module module for which the code should be generated\n\t * @param {GenerateContext} generateContext context for generate\n\t * @returns {Source} generated code\n\t */\n\tgenerate(module, generateContext) {\n\t\tconst type = generateContext.type;\n\t\tconst generator = this.map[type];\n\t\tif (!generator) {\n\t\t\tthrow new Error(`Generator.byType: no generator specified for ${type}`);\n\t\t}\n\t\treturn generator.generate(module, generateContext);\n\t}\n}\n\nmodule.exports = Generator;\n"],"mappings":"AAAA;AACA;AACA;AACA;AAEA;AAEA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AACA,MAAMA,SAAN,CAAgB;EACF,OAANC,MAAM,CAACC,GAAD,EAAM;IAClB,OAAO,IAAIC,eAAJ,CAAoBD,GAApB,CAAP;EACA;EAED;;EACA;AACD;AACA;AACA;AACA;;;EACCE,QAAQ,CAACC,MAAD,EAAS;IAChB,MAAMC,mBAAmB,GAAGC,OAAO,CAAC,uBAAD,CAAnC;;IACA,MAAM,IAAID,mBAAJ,EAAN;EACA;EAED;;EACA;AACD;AACA;AACA;AACA;AACA;;;EACCE,OAAO,CAACH,MAAD,EAASI,IAAT,EAAe;IACrB,MAAMH,mBAAmB,GAAGC,OAAO,CAAC,uBAAD,CAAnC;;IACA,MAAM,IAAID,mBAAJ,EAAN;EACA;EAED;;EACA;AACD;AACA;AACA;AACA;AACA;;;EACCI,QAAQ,CACPL,MADO,QAGN;IAAA,IADD;MAAEM,mBAAF;MAAuBC,eAAvB;MAAwCC,WAAxC;MAAqDJ;IAArD,CACC;;IACD,MAAMH,mBAAmB,GAAGC,OAAO,CAAC,uBAAD,CAAnC;;IACA,MAAM,IAAID,mBAAJ,EAAN;EACA;EAED;AACD;AACA;AACA;AACA;;;EACCQ,6BAA6B,CAACT,MAAD,EAASU,OAAT,EAAkB;IAC9C,OAAQ,+CAA8C,KAAKC,WAAL,CAAiBC,IAAK,EAA5E;EACA;EAED;AACD;AACA;AACA;;;EACCC,UAAU,CAACC,IAAD,SAA4B,CACrC;;IADqC,IAArB;MAAEd,MAAF;MAAUe;IAAV,CAAqB;EAErC;;AA1Dc;;AA6DhB,MAAMjB,eAAN,SAA8BH,SAA9B,CAAwC;EACvCgB,WAAW,CAACd,GAAD,EAAM;IAChB;IACA,KAAKA,GAAL,GAAWA,GAAX;IACA,KAAKmB,MAAL,GAAc,IAAIC,GAAJ,CAAQC,MAAM,CAACC,IAAP,CAAYtB,GAAZ,CAAR,CAAd;EACA;EAED;AACD;AACA;AACA;;;EACCE,QAAQ,CAACC,MAAD,EAAS;IAChB,OAAO,KAAKgB,MAAZ;EACA;EAED;AACD;AACA;AACA;AACA;;;EACCb,OAAO,CAACH,MAAD,EAASI,IAAT,EAAe;IACrB,MAAMgB,CAAC,GAAGhB,IAAI,IAAI,YAAlB;IACA,MAAMiB,SAAS,GAAG,KAAKxB,GAAL,CAASuB,CAAT,CAAlB;IACA,OAAOC,SAAS,GAAGA,SAAS,CAAClB,OAAV,CAAkBH,MAAlB,EAA0BoB,CAA1B,CAAH,GAAkC,CAAlD;EACA;EAED;AACD;AACA;AACA;AACA;;;EACCf,QAAQ,CAACL,MAAD,EAASsB,eAAT,EAA0B;IACjC,MAAMlB,IAAI,GAAGkB,eAAe,CAAClB,IAA7B;IACA,MAAMiB,SAAS,GAAG,KAAKxB,GAAL,CAASO,IAAT,CAAlB;;IACA,IAAI,CAACiB,SAAL,EAAgB;MACf,MAAM,IAAIE,KAAJ,CAAW,gDAA+CnB,IAAK,EAA/D,CAAN;IACA;;IACD,OAAOiB,SAAS,CAAChB,QAAV,CAAmBL,MAAnB,EAA2BsB,eAA3B,CAAP;EACA;;AAtCsC;;AAyCxCtB,MAAM,CAACwB,OAAP,GAAiB7B,SAAjB"},"metadata":{},"sourceType":"script"}