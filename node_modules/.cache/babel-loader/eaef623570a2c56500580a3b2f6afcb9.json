{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nconst RuntimeGlobals = require(\"../RuntimeGlobals\");\n\nconst {\n  approve,\n  evaluateToIdentifier,\n  evaluateToString,\n  toConstantDependency\n} = require(\"../javascript/JavascriptParserHelpers\");\n\nconst AMDDefineDependency = require(\"./AMDDefineDependency\");\n\nconst AMDDefineDependencyParserPlugin = require(\"./AMDDefineDependencyParserPlugin\");\n\nconst AMDRequireArrayDependency = require(\"./AMDRequireArrayDependency\");\n\nconst AMDRequireContextDependency = require(\"./AMDRequireContextDependency\");\n\nconst AMDRequireDependenciesBlockParserPlugin = require(\"./AMDRequireDependenciesBlockParserPlugin\");\n\nconst AMDRequireDependency = require(\"./AMDRequireDependency\");\n\nconst AMDRequireItemDependency = require(\"./AMDRequireItemDependency\");\n\nconst {\n  AMDDefineRuntimeModule,\n  AMDOptionsRuntimeModule\n} = require(\"./AMDRuntimeModules\");\n\nconst ConstDependency = require(\"./ConstDependency\");\n\nconst LocalModuleDependency = require(\"./LocalModuleDependency\");\n\nconst UnsupportedDependency = require(\"./UnsupportedDependency\");\n/** @typedef {import(\"../../declarations/WebpackOptions\").ModuleOptionsNormalized} ModuleOptions */\n\n/** @typedef {import(\"../Compiler\")} Compiler */\n\n\nclass AMDPlugin {\n  /**\n   * @param {Record<string, any>} amdOptions the AMD options\n   */\n  constructor(amdOptions) {\n    this.amdOptions = amdOptions;\n  }\n  /**\n   * Apply the plugin\n   * @param {Compiler} compiler the compiler instance\n   * @returns {void}\n   */\n\n\n  apply(compiler) {\n    const amdOptions = this.amdOptions;\n    compiler.hooks.compilation.tap(\"AMDPlugin\", (compilation, _ref) => {\n      let {\n        contextModuleFactory,\n        normalModuleFactory\n      } = _ref;\n      compilation.dependencyTemplates.set(AMDRequireDependency, new AMDRequireDependency.Template());\n      compilation.dependencyFactories.set(AMDRequireItemDependency, normalModuleFactory);\n      compilation.dependencyTemplates.set(AMDRequireItemDependency, new AMDRequireItemDependency.Template());\n      compilation.dependencyTemplates.set(AMDRequireArrayDependency, new AMDRequireArrayDependency.Template());\n      compilation.dependencyFactories.set(AMDRequireContextDependency, contextModuleFactory);\n      compilation.dependencyTemplates.set(AMDRequireContextDependency, new AMDRequireContextDependency.Template());\n      compilation.dependencyTemplates.set(AMDDefineDependency, new AMDDefineDependency.Template());\n      compilation.dependencyTemplates.set(UnsupportedDependency, new UnsupportedDependency.Template());\n      compilation.dependencyTemplates.set(LocalModuleDependency, new LocalModuleDependency.Template());\n      compilation.hooks.runtimeRequirementInModule.for(RuntimeGlobals.amdDefine).tap(\"AMDPlugin\", (module, set) => {\n        set.add(RuntimeGlobals.require);\n      });\n      compilation.hooks.runtimeRequirementInModule.for(RuntimeGlobals.amdOptions).tap(\"AMDPlugin\", (module, set) => {\n        set.add(RuntimeGlobals.requireScope);\n      });\n      compilation.hooks.runtimeRequirementInTree.for(RuntimeGlobals.amdDefine).tap(\"AMDPlugin\", (chunk, set) => {\n        compilation.addRuntimeModule(chunk, new AMDDefineRuntimeModule());\n      });\n      compilation.hooks.runtimeRequirementInTree.for(RuntimeGlobals.amdOptions).tap(\"AMDPlugin\", (chunk, set) => {\n        compilation.addRuntimeModule(chunk, new AMDOptionsRuntimeModule(amdOptions));\n      });\n\n      const handler = (parser, parserOptions) => {\n        if (parserOptions.amd !== undefined && !parserOptions.amd) return;\n\n        const tapOptionsHooks = (optionExpr, rootName, getMembers) => {\n          parser.hooks.expression.for(optionExpr).tap(\"AMDPlugin\", toConstantDependency(parser, RuntimeGlobals.amdOptions, [RuntimeGlobals.amdOptions]));\n          parser.hooks.evaluateIdentifier.for(optionExpr).tap(\"AMDPlugin\", evaluateToIdentifier(optionExpr, rootName, getMembers, true));\n          parser.hooks.evaluateTypeof.for(optionExpr).tap(\"AMDPlugin\", evaluateToString(\"object\"));\n          parser.hooks.typeof.for(optionExpr).tap(\"AMDPlugin\", toConstantDependency(parser, JSON.stringify(\"object\")));\n        };\n\n        new AMDRequireDependenciesBlockParserPlugin(parserOptions).apply(parser);\n        new AMDDefineDependencyParserPlugin(parserOptions).apply(parser);\n        tapOptionsHooks(\"define.amd\", \"define\", () => \"amd\");\n        tapOptionsHooks(\"require.amd\", \"require\", () => [\"amd\"]);\n        tapOptionsHooks(\"__webpack_amd_options__\", \"__webpack_amd_options__\", () => []);\n        parser.hooks.expression.for(\"define\").tap(\"AMDPlugin\", expr => {\n          const dep = new ConstDependency(RuntimeGlobals.amdDefine, expr.range, [RuntimeGlobals.amdDefine]);\n          dep.loc = expr.loc;\n          parser.state.module.addPresentationalDependency(dep);\n          return true;\n        });\n        parser.hooks.typeof.for(\"define\").tap(\"AMDPlugin\", toConstantDependency(parser, JSON.stringify(\"function\")));\n        parser.hooks.evaluateTypeof.for(\"define\").tap(\"AMDPlugin\", evaluateToString(\"function\"));\n        parser.hooks.canRename.for(\"define\").tap(\"AMDPlugin\", approve);\n        parser.hooks.rename.for(\"define\").tap(\"AMDPlugin\", expr => {\n          const dep = new ConstDependency(RuntimeGlobals.amdDefine, expr.range, [RuntimeGlobals.amdDefine]);\n          dep.loc = expr.loc;\n          parser.state.module.addPresentationalDependency(dep);\n          return false;\n        });\n        parser.hooks.typeof.for(\"require\").tap(\"AMDPlugin\", toConstantDependency(parser, JSON.stringify(\"function\")));\n        parser.hooks.evaluateTypeof.for(\"require\").tap(\"AMDPlugin\", evaluateToString(\"function\"));\n      };\n\n      normalModuleFactory.hooks.parser.for(\"javascript/auto\").tap(\"AMDPlugin\", handler);\n      normalModuleFactory.hooks.parser.for(\"javascript/dynamic\").tap(\"AMDPlugin\", handler);\n    });\n  }\n\n}\n\nmodule.exports = AMDPlugin;","map":{"version":3,"names":["RuntimeGlobals","require","approve","evaluateToIdentifier","evaluateToString","toConstantDependency","AMDDefineDependency","AMDDefineDependencyParserPlugin","AMDRequireArrayDependency","AMDRequireContextDependency","AMDRequireDependenciesBlockParserPlugin","AMDRequireDependency","AMDRequireItemDependency","AMDDefineRuntimeModule","AMDOptionsRuntimeModule","ConstDependency","LocalModuleDependency","UnsupportedDependency","AMDPlugin","constructor","amdOptions","apply","compiler","hooks","compilation","tap","contextModuleFactory","normalModuleFactory","dependencyTemplates","set","Template","dependencyFactories","runtimeRequirementInModule","for","amdDefine","module","add","requireScope","runtimeRequirementInTree","chunk","addRuntimeModule","handler","parser","parserOptions","amd","undefined","tapOptionsHooks","optionExpr","rootName","getMembers","expression","evaluateIdentifier","evaluateTypeof","typeof","JSON","stringify","expr","dep","range","loc","state","addPresentationalDependency","canRename","rename","exports"],"sources":["/Users/arpanbhandari/Documents/cod-ing/React/newsapp/node_modules/webpack/lib/dependencies/AMDPlugin.js"],"sourcesContent":["/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\n\"use strict\";\n\nconst RuntimeGlobals = require(\"../RuntimeGlobals\");\nconst {\n\tapprove,\n\tevaluateToIdentifier,\n\tevaluateToString,\n\ttoConstantDependency\n} = require(\"../javascript/JavascriptParserHelpers\");\n\nconst AMDDefineDependency = require(\"./AMDDefineDependency\");\nconst AMDDefineDependencyParserPlugin = require(\"./AMDDefineDependencyParserPlugin\");\nconst AMDRequireArrayDependency = require(\"./AMDRequireArrayDependency\");\nconst AMDRequireContextDependency = require(\"./AMDRequireContextDependency\");\nconst AMDRequireDependenciesBlockParserPlugin = require(\"./AMDRequireDependenciesBlockParserPlugin\");\nconst AMDRequireDependency = require(\"./AMDRequireDependency\");\nconst AMDRequireItemDependency = require(\"./AMDRequireItemDependency\");\nconst {\n\tAMDDefineRuntimeModule,\n\tAMDOptionsRuntimeModule\n} = require(\"./AMDRuntimeModules\");\nconst ConstDependency = require(\"./ConstDependency\");\nconst LocalModuleDependency = require(\"./LocalModuleDependency\");\nconst UnsupportedDependency = require(\"./UnsupportedDependency\");\n\n/** @typedef {import(\"../../declarations/WebpackOptions\").ModuleOptionsNormalized} ModuleOptions */\n/** @typedef {import(\"../Compiler\")} Compiler */\n\nclass AMDPlugin {\n\t/**\n\t * @param {Record<string, any>} amdOptions the AMD options\n\t */\n\tconstructor(amdOptions) {\n\t\tthis.amdOptions = amdOptions;\n\t}\n\n\t/**\n\t * Apply the plugin\n\t * @param {Compiler} compiler the compiler instance\n\t * @returns {void}\n\t */\n\tapply(compiler) {\n\t\tconst amdOptions = this.amdOptions;\n\t\tcompiler.hooks.compilation.tap(\n\t\t\t\"AMDPlugin\",\n\t\t\t(compilation, { contextModuleFactory, normalModuleFactory }) => {\n\t\t\t\tcompilation.dependencyTemplates.set(\n\t\t\t\t\tAMDRequireDependency,\n\t\t\t\t\tnew AMDRequireDependency.Template()\n\t\t\t\t);\n\n\t\t\t\tcompilation.dependencyFactories.set(\n\t\t\t\t\tAMDRequireItemDependency,\n\t\t\t\t\tnormalModuleFactory\n\t\t\t\t);\n\t\t\t\tcompilation.dependencyTemplates.set(\n\t\t\t\t\tAMDRequireItemDependency,\n\t\t\t\t\tnew AMDRequireItemDependency.Template()\n\t\t\t\t);\n\n\t\t\t\tcompilation.dependencyTemplates.set(\n\t\t\t\t\tAMDRequireArrayDependency,\n\t\t\t\t\tnew AMDRequireArrayDependency.Template()\n\t\t\t\t);\n\n\t\t\t\tcompilation.dependencyFactories.set(\n\t\t\t\t\tAMDRequireContextDependency,\n\t\t\t\t\tcontextModuleFactory\n\t\t\t\t);\n\t\t\t\tcompilation.dependencyTemplates.set(\n\t\t\t\t\tAMDRequireContextDependency,\n\t\t\t\t\tnew AMDRequireContextDependency.Template()\n\t\t\t\t);\n\n\t\t\t\tcompilation.dependencyTemplates.set(\n\t\t\t\t\tAMDDefineDependency,\n\t\t\t\t\tnew AMDDefineDependency.Template()\n\t\t\t\t);\n\n\t\t\t\tcompilation.dependencyTemplates.set(\n\t\t\t\t\tUnsupportedDependency,\n\t\t\t\t\tnew UnsupportedDependency.Template()\n\t\t\t\t);\n\n\t\t\t\tcompilation.dependencyTemplates.set(\n\t\t\t\t\tLocalModuleDependency,\n\t\t\t\t\tnew LocalModuleDependency.Template()\n\t\t\t\t);\n\n\t\t\t\tcompilation.hooks.runtimeRequirementInModule\n\t\t\t\t\t.for(RuntimeGlobals.amdDefine)\n\t\t\t\t\t.tap(\"AMDPlugin\", (module, set) => {\n\t\t\t\t\t\tset.add(RuntimeGlobals.require);\n\t\t\t\t\t});\n\n\t\t\t\tcompilation.hooks.runtimeRequirementInModule\n\t\t\t\t\t.for(RuntimeGlobals.amdOptions)\n\t\t\t\t\t.tap(\"AMDPlugin\", (module, set) => {\n\t\t\t\t\t\tset.add(RuntimeGlobals.requireScope);\n\t\t\t\t\t});\n\n\t\t\t\tcompilation.hooks.runtimeRequirementInTree\n\t\t\t\t\t.for(RuntimeGlobals.amdDefine)\n\t\t\t\t\t.tap(\"AMDPlugin\", (chunk, set) => {\n\t\t\t\t\t\tcompilation.addRuntimeModule(chunk, new AMDDefineRuntimeModule());\n\t\t\t\t\t});\n\n\t\t\t\tcompilation.hooks.runtimeRequirementInTree\n\t\t\t\t\t.for(RuntimeGlobals.amdOptions)\n\t\t\t\t\t.tap(\"AMDPlugin\", (chunk, set) => {\n\t\t\t\t\t\tcompilation.addRuntimeModule(\n\t\t\t\t\t\t\tchunk,\n\t\t\t\t\t\t\tnew AMDOptionsRuntimeModule(amdOptions)\n\t\t\t\t\t\t);\n\t\t\t\t\t});\n\n\t\t\t\tconst handler = (parser, parserOptions) => {\n\t\t\t\t\tif (parserOptions.amd !== undefined && !parserOptions.amd) return;\n\n\t\t\t\t\tconst tapOptionsHooks = (optionExpr, rootName, getMembers) => {\n\t\t\t\t\t\tparser.hooks.expression\n\t\t\t\t\t\t\t.for(optionExpr)\n\t\t\t\t\t\t\t.tap(\n\t\t\t\t\t\t\t\t\"AMDPlugin\",\n\t\t\t\t\t\t\t\ttoConstantDependency(parser, RuntimeGlobals.amdOptions, [\n\t\t\t\t\t\t\t\t\tRuntimeGlobals.amdOptions\n\t\t\t\t\t\t\t\t])\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\tparser.hooks.evaluateIdentifier\n\t\t\t\t\t\t\t.for(optionExpr)\n\t\t\t\t\t\t\t.tap(\n\t\t\t\t\t\t\t\t\"AMDPlugin\",\n\t\t\t\t\t\t\t\tevaluateToIdentifier(optionExpr, rootName, getMembers, true)\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\tparser.hooks.evaluateTypeof\n\t\t\t\t\t\t\t.for(optionExpr)\n\t\t\t\t\t\t\t.tap(\"AMDPlugin\", evaluateToString(\"object\"));\n\t\t\t\t\t\tparser.hooks.typeof\n\t\t\t\t\t\t\t.for(optionExpr)\n\t\t\t\t\t\t\t.tap(\n\t\t\t\t\t\t\t\t\"AMDPlugin\",\n\t\t\t\t\t\t\t\ttoConstantDependency(parser, JSON.stringify(\"object\"))\n\t\t\t\t\t\t\t);\n\t\t\t\t\t};\n\n\t\t\t\t\tnew AMDRequireDependenciesBlockParserPlugin(parserOptions).apply(\n\t\t\t\t\t\tparser\n\t\t\t\t\t);\n\t\t\t\t\tnew AMDDefineDependencyParserPlugin(parserOptions).apply(parser);\n\n\t\t\t\t\ttapOptionsHooks(\"define.amd\", \"define\", () => \"amd\");\n\t\t\t\t\ttapOptionsHooks(\"require.amd\", \"require\", () => [\"amd\"]);\n\t\t\t\t\ttapOptionsHooks(\n\t\t\t\t\t\t\"__webpack_amd_options__\",\n\t\t\t\t\t\t\"__webpack_amd_options__\",\n\t\t\t\t\t\t() => []\n\t\t\t\t\t);\n\n\t\t\t\t\tparser.hooks.expression.for(\"define\").tap(\"AMDPlugin\", expr => {\n\t\t\t\t\t\tconst dep = new ConstDependency(\n\t\t\t\t\t\t\tRuntimeGlobals.amdDefine,\n\t\t\t\t\t\t\texpr.range,\n\t\t\t\t\t\t\t[RuntimeGlobals.amdDefine]\n\t\t\t\t\t\t);\n\t\t\t\t\t\tdep.loc = expr.loc;\n\t\t\t\t\t\tparser.state.module.addPresentationalDependency(dep);\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t});\n\t\t\t\t\tparser.hooks.typeof\n\t\t\t\t\t\t.for(\"define\")\n\t\t\t\t\t\t.tap(\n\t\t\t\t\t\t\t\"AMDPlugin\",\n\t\t\t\t\t\t\ttoConstantDependency(parser, JSON.stringify(\"function\"))\n\t\t\t\t\t\t);\n\t\t\t\t\tparser.hooks.evaluateTypeof\n\t\t\t\t\t\t.for(\"define\")\n\t\t\t\t\t\t.tap(\"AMDPlugin\", evaluateToString(\"function\"));\n\t\t\t\t\tparser.hooks.canRename.for(\"define\").tap(\"AMDPlugin\", approve);\n\t\t\t\t\tparser.hooks.rename.for(\"define\").tap(\"AMDPlugin\", expr => {\n\t\t\t\t\t\tconst dep = new ConstDependency(\n\t\t\t\t\t\t\tRuntimeGlobals.amdDefine,\n\t\t\t\t\t\t\texpr.range,\n\t\t\t\t\t\t\t[RuntimeGlobals.amdDefine]\n\t\t\t\t\t\t);\n\t\t\t\t\t\tdep.loc = expr.loc;\n\t\t\t\t\t\tparser.state.module.addPresentationalDependency(dep);\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t});\n\t\t\t\t\tparser.hooks.typeof\n\t\t\t\t\t\t.for(\"require\")\n\t\t\t\t\t\t.tap(\n\t\t\t\t\t\t\t\"AMDPlugin\",\n\t\t\t\t\t\t\ttoConstantDependency(parser, JSON.stringify(\"function\"))\n\t\t\t\t\t\t);\n\t\t\t\t\tparser.hooks.evaluateTypeof\n\t\t\t\t\t\t.for(\"require\")\n\t\t\t\t\t\t.tap(\"AMDPlugin\", evaluateToString(\"function\"));\n\t\t\t\t};\n\n\t\t\t\tnormalModuleFactory.hooks.parser\n\t\t\t\t\t.for(\"javascript/auto\")\n\t\t\t\t\t.tap(\"AMDPlugin\", handler);\n\t\t\t\tnormalModuleFactory.hooks.parser\n\t\t\t\t\t.for(\"javascript/dynamic\")\n\t\t\t\t\t.tap(\"AMDPlugin\", handler);\n\t\t\t}\n\t\t);\n\t}\n}\n\nmodule.exports = AMDPlugin;\n"],"mappings":"AAAA;AACA;AACA;AACA;AAEA;;AAEA,MAAMA,cAAc,GAAGC,OAAO,CAAC,mBAAD,CAA9B;;AACA,MAAM;EACLC,OADK;EAELC,oBAFK;EAGLC,gBAHK;EAILC;AAJK,IAKFJ,OAAO,CAAC,uCAAD,CALX;;AAOA,MAAMK,mBAAmB,GAAGL,OAAO,CAAC,uBAAD,CAAnC;;AACA,MAAMM,+BAA+B,GAAGN,OAAO,CAAC,mCAAD,CAA/C;;AACA,MAAMO,yBAAyB,GAAGP,OAAO,CAAC,6BAAD,CAAzC;;AACA,MAAMQ,2BAA2B,GAAGR,OAAO,CAAC,+BAAD,CAA3C;;AACA,MAAMS,uCAAuC,GAAGT,OAAO,CAAC,2CAAD,CAAvD;;AACA,MAAMU,oBAAoB,GAAGV,OAAO,CAAC,wBAAD,CAApC;;AACA,MAAMW,wBAAwB,GAAGX,OAAO,CAAC,4BAAD,CAAxC;;AACA,MAAM;EACLY,sBADK;EAELC;AAFK,IAGFb,OAAO,CAAC,qBAAD,CAHX;;AAIA,MAAMc,eAAe,GAAGd,OAAO,CAAC,mBAAD,CAA/B;;AACA,MAAMe,qBAAqB,GAAGf,OAAO,CAAC,yBAAD,CAArC;;AACA,MAAMgB,qBAAqB,GAAGhB,OAAO,CAAC,yBAAD,CAArC;AAEA;;AACA;;;AAEA,MAAMiB,SAAN,CAAgB;EACf;AACD;AACA;EACCC,WAAW,CAACC,UAAD,EAAa;IACvB,KAAKA,UAAL,GAAkBA,UAAlB;EACA;EAED;AACD;AACA;AACA;AACA;;;EACCC,KAAK,CAACC,QAAD,EAAW;IACf,MAAMF,UAAU,GAAG,KAAKA,UAAxB;IACAE,QAAQ,CAACC,KAAT,CAAeC,WAAf,CAA2BC,GAA3B,CACC,WADD,EAEC,CAACD,WAAD,WAAgE;MAAA,IAAlD;QAAEE,oBAAF;QAAwBC;MAAxB,CAAkD;MAC/DH,WAAW,CAACI,mBAAZ,CAAgCC,GAAhC,CACClB,oBADD,EAEC,IAAIA,oBAAoB,CAACmB,QAAzB,EAFD;MAKAN,WAAW,CAACO,mBAAZ,CAAgCF,GAAhC,CACCjB,wBADD,EAECe,mBAFD;MAIAH,WAAW,CAACI,mBAAZ,CAAgCC,GAAhC,CACCjB,wBADD,EAEC,IAAIA,wBAAwB,CAACkB,QAA7B,EAFD;MAKAN,WAAW,CAACI,mBAAZ,CAAgCC,GAAhC,CACCrB,yBADD,EAEC,IAAIA,yBAAyB,CAACsB,QAA9B,EAFD;MAKAN,WAAW,CAACO,mBAAZ,CAAgCF,GAAhC,CACCpB,2BADD,EAECiB,oBAFD;MAIAF,WAAW,CAACI,mBAAZ,CAAgCC,GAAhC,CACCpB,2BADD,EAEC,IAAIA,2BAA2B,CAACqB,QAAhC,EAFD;MAKAN,WAAW,CAACI,mBAAZ,CAAgCC,GAAhC,CACCvB,mBADD,EAEC,IAAIA,mBAAmB,CAACwB,QAAxB,EAFD;MAKAN,WAAW,CAACI,mBAAZ,CAAgCC,GAAhC,CACCZ,qBADD,EAEC,IAAIA,qBAAqB,CAACa,QAA1B,EAFD;MAKAN,WAAW,CAACI,mBAAZ,CAAgCC,GAAhC,CACCb,qBADD,EAEC,IAAIA,qBAAqB,CAACc,QAA1B,EAFD;MAKAN,WAAW,CAACD,KAAZ,CAAkBS,0BAAlB,CACEC,GADF,CACMjC,cAAc,CAACkC,SADrB,EAEET,GAFF,CAEM,WAFN,EAEmB,CAACU,MAAD,EAASN,GAAT,KAAiB;QAClCA,GAAG,CAACO,GAAJ,CAAQpC,cAAc,CAACC,OAAvB;MACA,CAJF;MAMAuB,WAAW,CAACD,KAAZ,CAAkBS,0BAAlB,CACEC,GADF,CACMjC,cAAc,CAACoB,UADrB,EAEEK,GAFF,CAEM,WAFN,EAEmB,CAACU,MAAD,EAASN,GAAT,KAAiB;QAClCA,GAAG,CAACO,GAAJ,CAAQpC,cAAc,CAACqC,YAAvB;MACA,CAJF;MAMAb,WAAW,CAACD,KAAZ,CAAkBe,wBAAlB,CACEL,GADF,CACMjC,cAAc,CAACkC,SADrB,EAEET,GAFF,CAEM,WAFN,EAEmB,CAACc,KAAD,EAAQV,GAAR,KAAgB;QACjCL,WAAW,CAACgB,gBAAZ,CAA6BD,KAA7B,EAAoC,IAAI1B,sBAAJ,EAApC;MACA,CAJF;MAMAW,WAAW,CAACD,KAAZ,CAAkBe,wBAAlB,CACEL,GADF,CACMjC,cAAc,CAACoB,UADrB,EAEEK,GAFF,CAEM,WAFN,EAEmB,CAACc,KAAD,EAAQV,GAAR,KAAgB;QACjCL,WAAW,CAACgB,gBAAZ,CACCD,KADD,EAEC,IAAIzB,uBAAJ,CAA4BM,UAA5B,CAFD;MAIA,CAPF;;MASA,MAAMqB,OAAO,GAAG,CAACC,MAAD,EAASC,aAAT,KAA2B;QAC1C,IAAIA,aAAa,CAACC,GAAd,KAAsBC,SAAtB,IAAmC,CAACF,aAAa,CAACC,GAAtD,EAA2D;;QAE3D,MAAME,eAAe,GAAG,CAACC,UAAD,EAAaC,QAAb,EAAuBC,UAAvB,KAAsC;UAC7DP,MAAM,CAACnB,KAAP,CAAa2B,UAAb,CACEjB,GADF,CACMc,UADN,EAEEtB,GAFF,CAGE,WAHF,EAIEpB,oBAAoB,CAACqC,MAAD,EAAS1C,cAAc,CAACoB,UAAxB,EAAoC,CACvDpB,cAAc,CAACoB,UADwC,CAApC,CAJtB;UAQAsB,MAAM,CAACnB,KAAP,CAAa4B,kBAAb,CACElB,GADF,CACMc,UADN,EAEEtB,GAFF,CAGE,WAHF,EAIEtB,oBAAoB,CAAC4C,UAAD,EAAaC,QAAb,EAAuBC,UAAvB,EAAmC,IAAnC,CAJtB;UAMAP,MAAM,CAACnB,KAAP,CAAa6B,cAAb,CACEnB,GADF,CACMc,UADN,EAEEtB,GAFF,CAEM,WAFN,EAEmBrB,gBAAgB,CAAC,QAAD,CAFnC;UAGAsC,MAAM,CAACnB,KAAP,CAAa8B,MAAb,CACEpB,GADF,CACMc,UADN,EAEEtB,GAFF,CAGE,WAHF,EAIEpB,oBAAoB,CAACqC,MAAD,EAASY,IAAI,CAACC,SAAL,CAAe,QAAf,CAAT,CAJtB;QAMA,CAxBD;;QA0BA,IAAI7C,uCAAJ,CAA4CiC,aAA5C,EAA2DtB,KAA3D,CACCqB,MADD;QAGA,IAAInC,+BAAJ,CAAoCoC,aAApC,EAAmDtB,KAAnD,CAAyDqB,MAAzD;QAEAI,eAAe,CAAC,YAAD,EAAe,QAAf,EAAyB,MAAM,KAA/B,CAAf;QACAA,eAAe,CAAC,aAAD,EAAgB,SAAhB,EAA2B,MAAM,CAAC,KAAD,CAAjC,CAAf;QACAA,eAAe,CACd,yBADc,EAEd,yBAFc,EAGd,MAAM,EAHQ,CAAf;QAMAJ,MAAM,CAACnB,KAAP,CAAa2B,UAAb,CAAwBjB,GAAxB,CAA4B,QAA5B,EAAsCR,GAAtC,CAA0C,WAA1C,EAAuD+B,IAAI,IAAI;UAC9D,MAAMC,GAAG,GAAG,IAAI1C,eAAJ,CACXf,cAAc,CAACkC,SADJ,EAEXsB,IAAI,CAACE,KAFM,EAGX,CAAC1D,cAAc,CAACkC,SAAhB,CAHW,CAAZ;UAKAuB,GAAG,CAACE,GAAJ,GAAUH,IAAI,CAACG,GAAf;UACAjB,MAAM,CAACkB,KAAP,CAAazB,MAAb,CAAoB0B,2BAApB,CAAgDJ,GAAhD;UACA,OAAO,IAAP;QACA,CATD;QAUAf,MAAM,CAACnB,KAAP,CAAa8B,MAAb,CACEpB,GADF,CACM,QADN,EAEER,GAFF,CAGE,WAHF,EAIEpB,oBAAoB,CAACqC,MAAD,EAASY,IAAI,CAACC,SAAL,CAAe,UAAf,CAAT,CAJtB;QAMAb,MAAM,CAACnB,KAAP,CAAa6B,cAAb,CACEnB,GADF,CACM,QADN,EAEER,GAFF,CAEM,WAFN,EAEmBrB,gBAAgB,CAAC,UAAD,CAFnC;QAGAsC,MAAM,CAACnB,KAAP,CAAauC,SAAb,CAAuB7B,GAAvB,CAA2B,QAA3B,EAAqCR,GAArC,CAAyC,WAAzC,EAAsDvB,OAAtD;QACAwC,MAAM,CAACnB,KAAP,CAAawC,MAAb,CAAoB9B,GAApB,CAAwB,QAAxB,EAAkCR,GAAlC,CAAsC,WAAtC,EAAmD+B,IAAI,IAAI;UAC1D,MAAMC,GAAG,GAAG,IAAI1C,eAAJ,CACXf,cAAc,CAACkC,SADJ,EAEXsB,IAAI,CAACE,KAFM,EAGX,CAAC1D,cAAc,CAACkC,SAAhB,CAHW,CAAZ;UAKAuB,GAAG,CAACE,GAAJ,GAAUH,IAAI,CAACG,GAAf;UACAjB,MAAM,CAACkB,KAAP,CAAazB,MAAb,CAAoB0B,2BAApB,CAAgDJ,GAAhD;UACA,OAAO,KAAP;QACA,CATD;QAUAf,MAAM,CAACnB,KAAP,CAAa8B,MAAb,CACEpB,GADF,CACM,SADN,EAEER,GAFF,CAGE,WAHF,EAIEpB,oBAAoB,CAACqC,MAAD,EAASY,IAAI,CAACC,SAAL,CAAe,UAAf,CAAT,CAJtB;QAMAb,MAAM,CAACnB,KAAP,CAAa6B,cAAb,CACEnB,GADF,CACM,SADN,EAEER,GAFF,CAEM,WAFN,EAEmBrB,gBAAgB,CAAC,UAAD,CAFnC;MAGA,CAjFD;;MAmFAuB,mBAAmB,CAACJ,KAApB,CAA0BmB,MAA1B,CACET,GADF,CACM,iBADN,EAEER,GAFF,CAEM,WAFN,EAEmBgB,OAFnB;MAGAd,mBAAmB,CAACJ,KAApB,CAA0BmB,MAA1B,CACET,GADF,CACM,oBADN,EAEER,GAFF,CAEM,WAFN,EAEmBgB,OAFnB;IAGA,CAlKF;EAoKA;;AAnLc;;AAsLhBN,MAAM,CAAC6B,OAAP,GAAiB9C,SAAjB"},"metadata":{},"sourceType":"script"}