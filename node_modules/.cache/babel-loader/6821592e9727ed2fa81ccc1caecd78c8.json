{"ast":null,"code":"import { useRef, useEffect, forwardRef, useState, useImperativeHandle, createElement } from 'react';\n\nconst noop = () => {};\n\nfunction useInterval(callback, delay, immediate) {\n  const savedCallback = useRef(noop);\n  useEffect(() => {\n    savedCallback.current = callback;\n  });\n  useEffect(() => {\n    if (!immediate) return;\n    if (delay === null || delay === false) return;\n    savedCallback.current();\n  }, [immediate]);\n  useEffect(() => {\n    if (delay === null || delay === false) return undefined;\n\n    const tick = () => savedCallback.current();\n\n    const id = setInterval(tick, delay);\n    return () => clearInterval(id);\n  }, [delay]);\n}\n\nfunction randomInt(min, max) {\n  return Math.floor(Math.random() * (max - min + 1) + min);\n}\n\nconst LoadingBar = forwardRef((_ref, ref) => {\n  let {\n    progress,\n    height: _height = 2,\n    className: _className = '',\n    color: _color = 'red',\n    background: _background = 'transparent',\n    onLoaderFinished,\n    transitionTime: _transitionTime = 300,\n    loaderSpeed: _loaderSpeed = 500,\n    waitingTime: _waitingTime = 1000,\n    shadow: _shadow = true,\n    containerStyle: _containerStyle = {},\n    style: _style = {},\n    shadowStyle: shadowStyleProp = {},\n    containerClassName: _containerClassName = ''\n  } = _ref;\n  const isMounted = useRef(false);\n  const [localProgress, localProgressSet] = useState(0);\n  const [pressedContinuous, setPressedContinuous] = useState({\n    active: false,\n    startingValue: 20,\n    refreshRate: 1000\n  });\n  const [usingProps, setUsingProps] = useState(false);\n  const [pressedStaticStart, setStaticStartPressed] = useState({\n    active: false,\n    value: 20\n  });\n  const initialLoaderStyle = {\n    height: '100%',\n    background: _color,\n    transition: `all ${_loaderSpeed}ms ease`,\n    width: '0%'\n  };\n  const loaderContainerStyle = {\n    position: 'fixed',\n    top: 0,\n    left: 0,\n    height: _height,\n    background: _background,\n    zIndex: 99999999999,\n    width: 100 + '%'\n  };\n  const initialShadowStyles = {\n    boxShadow: `0 0 10px ${_color}, 0 0 10px ${_color}`,\n    width: '5%',\n    opacity: 1,\n    position: 'absolute',\n    height: '100%',\n    transition: `all ${_loaderSpeed}ms ease`,\n    transform: 'rotate(3deg) translate(0px, -4px)',\n    left: '-10rem'\n  };\n  const [loaderStyle, loaderStyleSet] = useState(initialLoaderStyle);\n  const [shadowStyle, shadowStyleSet] = useState(initialShadowStyles);\n  useEffect(() => {\n    isMounted.current = true;\n    return () => {\n      isMounted.current = false;\n    };\n  }, []);\n  useImperativeHandle(ref, () => ({\n    continuousStart(startingValue) {\n      let refreshRate = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1000;\n      if (pressedStaticStart.active) return;\n\n      if (usingProps) {\n        console.warn(\"react-top-loading-bar: You can't use both controlling by props and ref methods to control the bar!\");\n        return;\n      }\n\n      const val = startingValue || randomInt(10, 20);\n      setPressedContinuous({\n        active: true,\n        refreshRate,\n        startingValue\n      });\n      localProgressSet(val);\n      checkIfFull(val);\n    },\n\n    staticStart(startingValue) {\n      if (pressedContinuous.active) return;\n\n      if (usingProps) {\n        console.warn(\"react-top-loading-bar: You can't use both controlling by props and ref methods to control the bar!\");\n        return;\n      }\n\n      const val = startingValue || randomInt(30, 50);\n      setStaticStartPressed({\n        active: true,\n        value: val\n      });\n      localProgressSet(val);\n      checkIfFull(val);\n    },\n\n    complete() {\n      if (usingProps) {\n        console.warn(\"react-top-loading-bar: You can't use both controlling by props and ref methods to control the bar!\");\n        return;\n      }\n\n      localProgressSet(100);\n      checkIfFull(100);\n    }\n\n  }));\n  useEffect(() => {\n    loaderStyleSet({ ...loaderStyle,\n      background: _color\n    });\n    shadowStyleSet({ ...shadowStyle,\n      boxShadow: `0 0 10px ${_color}, 0 0 5px ${_color}`\n    });\n  }, [_color]);\n  useEffect(() => {\n    if (ref) {\n      if (ref && progress !== undefined) {\n        console.warn('react-top-loading-bar: You can\\'t use both controlling by props and ref methods to control the bar! Please use only props or only ref methods! Ref methods will override props if \"ref\" property is available.');\n        return;\n      }\n\n      checkIfFull(localProgress);\n      setUsingProps(false);\n    } else {\n      if (progress) checkIfFull(progress);\n      setUsingProps(true);\n    }\n  }, [progress]);\n\n  const checkIfFull = _progress => {\n    if (_progress >= 100) {\n      loaderStyleSet({ ...loaderStyle,\n        width: '100%'\n      });\n\n      if (_shadow) {\n        shadowStyleSet({ ...shadowStyle,\n          left: _progress - 10 + '%'\n        });\n      }\n\n      setTimeout(() => {\n        if (!isMounted.current) {\n          return;\n        }\n\n        loaderStyleSet({ ...loaderStyle,\n          opacity: 0,\n          width: '100%',\n          transition: `all ${_transitionTime}ms ease-out`,\n          color: _color\n        });\n        setTimeout(() => {\n          if (!isMounted.current) {\n            return;\n          }\n\n          if (pressedContinuous.active) {\n            setPressedContinuous({ ...pressedContinuous,\n              active: false\n            });\n            localProgressSet(0);\n            checkIfFull(0);\n          }\n\n          if (pressedStaticStart.active) {\n            setStaticStartPressed({ ...pressedStaticStart,\n              active: false\n            });\n            localProgressSet(0);\n            checkIfFull(0);\n          }\n\n          if (onLoaderFinished) onLoaderFinished();\n          localProgressSet(0);\n          checkIfFull(0);\n        }, _transitionTime);\n      }, _waitingTime);\n    } else {\n      loaderStyleSet(_loaderStyle => {\n        return { ..._loaderStyle,\n          width: _progress + '%',\n          opacity: 1,\n          transition: _progress > 0 ? `all ${_loaderSpeed}ms ease` : ''\n        };\n      });\n\n      if (_shadow) {\n        shadowStyleSet({ ...shadowStyle,\n          left: _progress - 5.5 + '%',\n          transition: _progress > 0 ? `all ${_loaderSpeed}ms ease` : ''\n        });\n      }\n    }\n  };\n\n  useInterval(() => {\n    const random = randomInt(10, 20);\n\n    if (localProgress + random < 90) {\n      localProgressSet(localProgress + random);\n      checkIfFull(localProgress + random);\n    }\n  }, pressedContinuous.active ? pressedContinuous.refreshRate : null);\n  return createElement(\"div\", {\n    className: _containerClassName,\n    style: { ...loaderContainerStyle,\n      ..._containerStyle\n    }\n  }, createElement(\"div\", {\n    className: _className,\n    style: { ...loaderStyle,\n      ..._style\n    }\n  }, _shadow ? createElement(\"div\", {\n    style: { ...shadowStyle,\n      ...shadowStyleProp\n    }\n  }) : null));\n});\nexport default LoadingBar;","map":{"version":3,"mappings":"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","names":["noop","useInterval","callback","delay","immediate","savedCallback","useRef","useEffect","current","undefined","tick","id","setInterval","clearInterval","randomInt","min","max","Math","floor","random","LoadingBar","forwardRef","ref","progress","height","className","color","background","onLoaderFinished","transitionTime","loaderSpeed","waitingTime","shadow","containerStyle","style","shadowStyle","shadowStyleProp","containerClassName","isMounted","localProgress","localProgressSet","useState","pressedContinuous","setPressedContinuous","active","startingValue","refreshRate","usingProps","setUsingProps","pressedStaticStart","setStaticStartPressed","value","initialLoaderStyle","transition","width","loaderContainerStyle","position","top","left","zIndex","initialShadowStyles","boxShadow","opacity","transform","loaderStyle","loaderStyleSet","shadowStyleSet","useImperativeHandle","continuousStart","console","warn","val","checkIfFull","staticStart","complete","_progress","setTimeout","_loaderStyle","React"],"sources":["/Users/arpanbhandari/Documents/cod-ing/React/newsapp/node_modules/react-top-loading-bar/src/useInterval.ts","/Users/arpanbhandari/Documents/cod-ing/React/newsapp/node_modules/react-top-loading-bar/src/utils.ts","/Users/arpanbhandari/Documents/cod-ing/React/newsapp/node_modules/react-top-loading-bar/src/index.tsx"],"sourcesContent":["import { useEffect, useRef } from 'react'\n\n/** keep typescript happy */\nconst noop = () => {}\n\nexport function useInterval(\n  callback: () => void,\n  delay: number | null | false,\n  immediate?: boolean\n) {\n  const savedCallback = useRef(noop)\n\n  // Remember the latest callback.\n  useEffect(() => {\n    savedCallback.current = callback\n  })\n\n  // Execute callback if immediate is set.\n  useEffect(() => {\n    if (!immediate) return\n    if (delay === null || delay === false) return\n    savedCallback.current()\n  }, [immediate])\n\n  // Set up the interval.\n  useEffect(() => {\n    if (delay === null || delay === false) return undefined\n    const tick = () => savedCallback.current()\n    const id = setInterval(tick, delay)\n    return () => clearInterval(id)\n  }, [delay])\n}\n\nexport default useInterval\n","export function randomInt(min: number, max: number): number {\n  // @ts-ignore\n  return Math.floor(Math.random() * (max - min + 1) + min)\n}\n","import * as React from 'react'\nimport {\n  CSSProperties,\n  useEffect,\n  useState,\n  forwardRef,\n  useImperativeHandle,\n  useRef,\n} from 'react'\nimport { useInterval } from './useInterval'\nimport { randomInt } from './utils'\n\ntype IProps = {\n  progress?: number\n  color?: string\n  shadow?: boolean\n  background?: string\n  height?: number\n  onLoaderFinished?: () => void\n  className?: string\n  containerClassName?: string\n  loaderSpeed?: number\n  transitionTime?: number\n  waitingTime?: number\n  style?: CSSProperties\n  containerStyle?: CSSProperties\n  shadowStyle?: CSSProperties\n}\n\nexport type LoadingBarRef = {\n  continuousStart: (startingValue: number, refreshRate: number) => void\n  staticStart: (startingValue: number) => void\n  complete: () => void;\n}\n\nconst LoadingBar = forwardRef<LoadingBarRef, IProps>(\n  (\n    {\n      progress,\n      height = 2,\n      className = '',\n      color = 'red',\n      background = 'transparent',\n      onLoaderFinished,\n      transitionTime = 300,\n      loaderSpeed = 500,\n      waitingTime = 1000,\n      shadow = true,\n      containerStyle = {},\n      style = {},\n      shadowStyle: shadowStyleProp = {},\n      containerClassName = ''\n    },\n    ref\n  ) => {\n    const isMounted = useRef(false);\n    const [localProgress, localProgressSet] = useState<number>(0)\n    const [pressedContinuous, setPressedContinuous] = useState<{\n      active: boolean\n      startingValue: number\n      refreshRate: number\n    }>({ active: false, startingValue: 20, refreshRate: 1000 })\n    const [usingProps, setUsingProps] = useState(false)\n\n    const [pressedStaticStart, setStaticStartPressed] = useState<{\n      active: boolean\n      value: number\n    }>({ active: false, value: 20 })\n\n    const initialLoaderStyle: CSSProperties = {\n      height: '100%',\n      background: color,\n      transition: `all ${loaderSpeed}ms ease`,\n      width: '0%',\n    }\n\n    const loaderContainerStyle: CSSProperties = {\n      position: 'fixed',\n      top: 0,\n      left: 0,\n      height,\n      background,\n      zIndex: 99999999999,\n      width: 100 + '%',\n    }\n\n    const initialShadowStyles: CSSProperties = {\n      boxShadow: `0 0 10px ${color}, 0 0 10px ${color}`,\n      width: '5%',\n      opacity: 1,\n      position: 'absolute',\n      height: '100%',\n      transition: `all ${loaderSpeed}ms ease`,\n      transform: 'rotate(3deg) translate(0px, -4px)',\n      left: '-10rem',\n    }\n\n    const [loaderStyle, loaderStyleSet] = useState<CSSProperties>(\n      initialLoaderStyle\n    )\n    const [shadowStyle, shadowStyleSet] = useState<CSSProperties>(\n      initialShadowStyles\n    )\n\n    useEffect(() => {\n      isMounted.current = true;\n      return () => {\n        isMounted.current = false;\n      }\n    }, []);\n\n    useImperativeHandle(ref, () => ({\n      continuousStart(startingValue: number, refreshRate: number = 1000) {\n        if (pressedStaticStart.active) return\n        if (usingProps) {\n          console.warn(\n            \"react-top-loading-bar: You can't use both controlling by props and ref methods to control the bar!\"\n          )\n          return\n        }\n\n        const val = startingValue || randomInt(10, 20)\n        setPressedContinuous({\n          active: true,\n          refreshRate,\n          startingValue,\n        })\n        localProgressSet(val)\n        checkIfFull(val)\n      },\n      staticStart(startingValue: number) {\n        if (pressedContinuous.active) return\n        if (usingProps) {\n          console.warn(\n            \"react-top-loading-bar: You can't use both controlling by props and ref methods to control the bar!\"\n          )\n          return\n        }\n\n        const val = startingValue || randomInt(30, 50)\n        setStaticStartPressed({\n          active: true,\n          value: val,\n        })\n        localProgressSet(val)\n        checkIfFull(val)\n      },\n      complete() {\n        if (usingProps) {\n          console.warn(\n            \"react-top-loading-bar: You can't use both controlling by props and ref methods to control the bar!\"\n          )\n          return\n        }\n        localProgressSet(100)\n        checkIfFull(100)\n      },\n    }))\n\n    useEffect(() => {\n      loaderStyleSet({\n        ...loaderStyle,\n        background: color,\n      })\n\n      shadowStyleSet({\n        ...shadowStyle,\n        boxShadow: `0 0 10px ${color}, 0 0 5px ${color}`,\n      })\n    }, [color])\n\n    useEffect(() => {\n      if (ref) {\n        if (ref && progress !== undefined) {\n          console.warn(\n            'react-top-loading-bar: You can\\'t use both controlling by props and ref methods to control the bar! Please use only props or only ref methods! Ref methods will override props if \"ref\" property is available.'\n          )\n          return\n        }\n        checkIfFull(localProgress)\n        setUsingProps(false)\n      } else {\n        if (progress) checkIfFull(progress)\n\n        setUsingProps(true)\n      }\n    }, [progress])\n\n    const checkIfFull = (_progress: number) => {\n      if (_progress >= 100) {\n        // now it should wait a little bit\n        loaderStyleSet({\n          ...loaderStyle,\n          width: '100%',\n        })\n        if (shadow) {\n          shadowStyleSet({\n            ...shadowStyle,\n            left: _progress - 10 + '%',\n          })\n        }\n\n        setTimeout(() => {\n          if (!isMounted.current) {\n            return;\n          }\n          // now it can fade out\n          loaderStyleSet({\n            ...loaderStyle,\n            opacity: 0,\n            width: '100%',\n            transition: `all ${transitionTime}ms ease-out`,\n            color: color,\n          })\n\n          setTimeout(() => {\n            if (!isMounted.current) {\n              return;\n            }\n            // here we wait for it to fade\n            if (pressedContinuous.active) {\n              // if we have continous loader just ending, we kill it and reset it\n              setPressedContinuous({\n                ...pressedContinuous,\n                active: false,\n              })\n              localProgressSet(0)\n              checkIfFull(0)\n            }\n\n            if (pressedStaticStart.active) {\n              setStaticStartPressed({\n                ...pressedStaticStart,\n                active: false,\n              })\n              localProgressSet(0)\n              checkIfFull(0)\n            }\n\n            if (onLoaderFinished) onLoaderFinished()\n            localProgressSet(0)\n            checkIfFull(0)\n          }, transitionTime)\n        }, waitingTime)\n      } else {\n        loaderStyleSet((_loaderStyle) => {\n          return {\n            ..._loaderStyle,\n            width: _progress + '%',\n            opacity: 1,\n            transition: _progress > 0 ? `all ${loaderSpeed}ms ease` : '',\n          }\n        })\n\n        if (shadow) {\n          shadowStyleSet({\n            ...shadowStyle,\n            left: _progress - 5.5 + '%',\n            transition: _progress > 0 ? `all ${loaderSpeed}ms ease` : '',\n          })\n        }\n      }\n    }\n\n    useInterval(\n      () => {\n        const random = randomInt(10, 20)\n\n        if (localProgress + random < 90) {\n          localProgressSet(localProgress + random)\n          checkIfFull(localProgress + random)\n        }\n      },\n      pressedContinuous.active ? pressedContinuous.refreshRate : null\n    )\n\n    return (\n      <div className={containerClassName} style={{...loaderContainerStyle, ...containerStyle}}>\n        <div className={className} style={{...loaderStyle, ...style}}>\n          {shadow ? <div style={{...shadowStyle, ...shadowStyleProp}} /> : null}\n        </div>\n      </div>\n    )\n  }\n)\n\nexport {\n  IProps,\n}\n\nexport default LoadingBar\n"]},"metadata":{},"sourceType":"module"}