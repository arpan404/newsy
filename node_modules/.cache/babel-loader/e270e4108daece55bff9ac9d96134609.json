{"ast":null,"code":"\"use strict\";\n/** @typedef {import(\"@jridgewell/trace-mapping\").SourceMapInput} SourceMapInput */\n\n/** @typedef {import(\"terser\").FormatOptions} TerserFormatOptions */\n\n/** @typedef {import(\"terser\").MinifyOptions} TerserOptions */\n\n/** @typedef {import(\"terser\").ECMA} TerserECMA */\n\n/** @typedef {import(\"./index.js\").ExtractCommentsOptions} ExtractCommentsOptions */\n\n/** @typedef {import(\"./index.js\").ExtractCommentsFunction} ExtractCommentsFunction */\n\n/** @typedef {import(\"./index.js\").ExtractCommentsCondition} ExtractCommentsCondition */\n\n/** @typedef {import(\"./index.js\").Input} Input */\n\n/** @typedef {import(\"./index.js\").MinimizedResult} MinimizedResult */\n\n/** @typedef {import(\"./index.js\").PredefinedOptions} PredefinedOptions */\n\n/** @typedef {import(\"./index.js\").CustomOptions} CustomOptions */\n\n/**\n * @typedef {Array<string>} ExtractedComments\n */\n\nconst notSettled = Symbol(`not-settled`);\n/**\n * @template T\n * @typedef {() => Promise<T>} Task\n */\n\n/**\n * Run tasks with limited concurency.\n * @template T\n * @param {number} limit - Limit of tasks that run at once.\n * @param {Task<T>[]} tasks - List of tasks to run.\n * @returns {Promise<T[]>} A promise that fulfills to an array of the results\n */\n\nfunction throttleAll(limit, tasks) {\n  if (!Number.isInteger(limit) || limit < 1) {\n    throw new TypeError(`Expected \\`limit\\` to be a finite number > 0, got \\`${limit}\\` (${typeof limit})`);\n  }\n\n  if (!Array.isArray(tasks) || !tasks.every(task => typeof task === `function`)) {\n    throw new TypeError(`Expected \\`tasks\\` to be a list of functions returning a promise`);\n  }\n\n  return new Promise((resolve, reject) => {\n    const result = Array(tasks.length).fill(notSettled);\n    const entries = tasks.entries();\n\n    const next = () => {\n      const {\n        done,\n        value\n      } = entries.next();\n\n      if (done) {\n        const isLast = !result.includes(notSettled);\n        if (isLast) resolve(\n        /** @type{T[]} **/\n        result);\n        return;\n      }\n\n      const [index, task] = value;\n      /**\n       * @param {T} x\n       */\n\n      const onFulfilled = x => {\n        result[index] = x;\n        next();\n      };\n\n      task().then(onFulfilled, reject);\n    };\n\n    Array(limit).fill(0).forEach(next);\n  });\n}\n/* istanbul ignore next */\n\n/**\n * @param {Input} input\n * @param {SourceMapInput | undefined} sourceMap\n * @param {PredefinedOptions & CustomOptions} minimizerOptions\n * @param {ExtractCommentsOptions | undefined} extractComments\n * @return {Promise<MinimizedResult>}\n */\n\n\nasync function terserMinify(input, sourceMap, minimizerOptions, extractComments) {\n  /**\n   * @param {any} value\n   * @returns {boolean}\n   */\n  const isObject = value => {\n    const type = typeof value;\n    return value != null && (type === \"object\" || type === \"function\");\n  };\n  /**\n   * @param {TerserOptions & { sourceMap: undefined } & ({ output: TerserFormatOptions & { beautify: boolean } } | { format: TerserFormatOptions & { beautify: boolean } })} terserOptions\n   * @param {ExtractedComments} extractedComments\n   * @returns {ExtractCommentsFunction}\n   */\n\n\n  const buildComments = (terserOptions, extractedComments) => {\n    /** @type {{ [index: string]: ExtractCommentsCondition }} */\n    const condition = {};\n    let comments;\n\n    if (terserOptions.format) {\n      ({\n        comments\n      } = terserOptions.format);\n    } else if (terserOptions.output) {\n      ({\n        comments\n      } = terserOptions.output);\n    }\n\n    condition.preserve = typeof comments !== \"undefined\" ? comments : false;\n\n    if (typeof extractComments === \"boolean\" && extractComments) {\n      condition.extract = \"some\";\n    } else if (typeof extractComments === \"string\" || extractComments instanceof RegExp) {\n      condition.extract = extractComments;\n    } else if (typeof extractComments === \"function\") {\n      condition.extract = extractComments;\n    } else if (extractComments && isObject(extractComments)) {\n      condition.extract = typeof extractComments.condition === \"boolean\" && extractComments.condition ? \"some\" : typeof extractComments.condition !== \"undefined\" ? extractComments.condition : \"some\";\n    } else {\n      // No extract\n      // Preserve using \"commentsOpts\" or \"some\"\n      condition.preserve = typeof comments !== \"undefined\" ? comments : \"some\";\n      condition.extract = false;\n    } // Ensure that both conditions are functions\n\n\n    [\"preserve\", \"extract\"].forEach(key => {\n      /** @type {undefined | string} */\n      let regexStr;\n      /** @type {undefined | RegExp} */\n\n      let regex;\n\n      switch (typeof condition[key]) {\n        case \"boolean\":\n          condition[key] = condition[key] ? () => true : () => false;\n          break;\n\n        case \"function\":\n          break;\n\n        case \"string\":\n          if (condition[key] === \"all\") {\n            condition[key] = () => true;\n\n            break;\n          }\n\n          if (condition[key] === \"some\") {\n            condition[key] =\n            /** @type {ExtractCommentsFunction} */\n            (astNode, comment) => (comment.type === \"comment2\" || comment.type === \"comment1\") && /@preserve|@lic|@cc_on|^\\**!/i.test(comment.value);\n\n            break;\n          }\n\n          regexStr =\n          /** @type {string} */\n          condition[key];\n\n          condition[key] =\n          /** @type {ExtractCommentsFunction} */\n          (astNode, comment) => new RegExp(\n          /** @type {string} */\n          regexStr).test(comment.value);\n\n          break;\n\n        default:\n          regex =\n          /** @type {RegExp} */\n          condition[key];\n\n          condition[key] =\n          /** @type {ExtractCommentsFunction} */\n          (astNode, comment) =>\n          /** @type {RegExp} */\n          regex.test(comment.value);\n\n      }\n    }); // Redefine the comments function to extract and preserve\n    // comments according to the two conditions\n\n    return (astNode, comment) => {\n      if (\n      /** @type {{ extract: ExtractCommentsFunction }} */\n      condition.extract(astNode, comment)) {\n        const commentText = comment.type === \"comment2\" ? `/*${comment.value}*/` : `//${comment.value}`; // Don't include duplicate comments\n\n        if (!extractedComments.includes(commentText)) {\n          extractedComments.push(commentText);\n        }\n      }\n\n      return (\n        /** @type {{ preserve: ExtractCommentsFunction }} */\n        condition.preserve(astNode, comment)\n      );\n    };\n  };\n  /**\n   * @param {PredefinedOptions & TerserOptions} [terserOptions={}]\n   * @returns {TerserOptions & { sourceMap: undefined } & ({ output: TerserFormatOptions & { beautify: boolean } } | { format: TerserFormatOptions & { beautify: boolean } })}\n   */\n\n\n  const buildTerserOptions = function () {\n    let terserOptions = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    // Need deep copy objects to avoid https://github.com/terser/terser/issues/366\n    return { ...terserOptions,\n      compress: typeof terserOptions.compress === \"boolean\" ? terserOptions.compress : { ...terserOptions.compress\n      },\n      // ecma: terserOptions.ecma,\n      // ie8: terserOptions.ie8,\n      // keep_classnames: terserOptions.keep_classnames,\n      // keep_fnames: terserOptions.keep_fnames,\n      mangle: terserOptions.mangle == null ? true : typeof terserOptions.mangle === \"boolean\" ? terserOptions.mangle : { ...terserOptions.mangle\n      },\n      // module: terserOptions.module,\n      // nameCache: { ...terserOptions.toplevel },\n      // the `output` option is deprecated\n      ...(terserOptions.format ? {\n        format: {\n          beautify: false,\n          ...terserOptions.format\n        }\n      } : {\n        output: {\n          beautify: false,\n          ...terserOptions.output\n        }\n      }),\n      parse: { ...terserOptions.parse\n      },\n      // safari10: terserOptions.safari10,\n      // Ignoring sourceMap from options\n      // eslint-disable-next-line no-undefined\n      sourceMap: undefined // toplevel: terserOptions.toplevel\n\n    };\n  }; // eslint-disable-next-line global-require\n\n\n  const {\n    minify\n  } = require(\"terser\"); // Copy `terser` options\n\n\n  const terserOptions = buildTerserOptions(minimizerOptions); // Let terser generate a SourceMap\n\n  if (sourceMap) {\n    // @ts-ignore\n    terserOptions.sourceMap = {\n      asObject: true\n    };\n  }\n  /** @type {ExtractedComments} */\n\n\n  const extractedComments = [];\n\n  if (terserOptions.output) {\n    terserOptions.output.comments = buildComments(terserOptions, extractedComments);\n  } else if (terserOptions.format) {\n    terserOptions.format.comments = buildComments(terserOptions, extractedComments);\n  }\n\n  const [[filename, code]] = Object.entries(input);\n  const result = await minify({\n    [filename]: code\n  }, terserOptions);\n  return {\n    code:\n    /** @type {string} **/\n    result.code,\n    // @ts-ignore\n    // eslint-disable-next-line no-undefined\n    map: result.map ?\n    /** @type {SourceMapInput} **/\n    result.map : undefined,\n    extractedComments\n  };\n}\n/**\n * @returns {string | undefined}\n */\n\n\nterserMinify.getMinimizerVersion = () => {\n  let packageJson;\n\n  try {\n    // eslint-disable-next-line global-require\n    packageJson = require(\"terser/package.json\");\n  } catch (error) {// Ignore\n  }\n\n  return packageJson && packageJson.version;\n};\n/* istanbul ignore next */\n\n/**\n * @param {Input} input\n * @param {SourceMapInput | undefined} sourceMap\n * @param {PredefinedOptions & CustomOptions} minimizerOptions\n * @param {ExtractCommentsOptions | undefined} extractComments\n * @return {Promise<MinimizedResult>}\n */\n\n\nasync function uglifyJsMinify(input, sourceMap, minimizerOptions, extractComments) {\n  /**\n   * @param {any} value\n   * @returns {boolean}\n   */\n  const isObject = value => {\n    const type = typeof value;\n    return value != null && (type === \"object\" || type === \"function\");\n  };\n  /**\n   * @param {import(\"uglify-js\").MinifyOptions & { sourceMap: undefined } & { output: import(\"uglify-js\").OutputOptions & { beautify: boolean }}} uglifyJsOptions\n   * @param {ExtractedComments} extractedComments\n   * @returns {ExtractCommentsFunction}\n   */\n\n\n  const buildComments = (uglifyJsOptions, extractedComments) => {\n    /** @type {{ [index: string]: ExtractCommentsCondition }} */\n    const condition = {};\n    const {\n      comments\n    } = uglifyJsOptions.output;\n    condition.preserve = typeof comments !== \"undefined\" ? comments : false;\n\n    if (typeof extractComments === \"boolean\" && extractComments) {\n      condition.extract = \"some\";\n    } else if (typeof extractComments === \"string\" || extractComments instanceof RegExp) {\n      condition.extract = extractComments;\n    } else if (typeof extractComments === \"function\") {\n      condition.extract = extractComments;\n    } else if (extractComments && isObject(extractComments)) {\n      condition.extract = typeof extractComments.condition === \"boolean\" && extractComments.condition ? \"some\" : typeof extractComments.condition !== \"undefined\" ? extractComments.condition : \"some\";\n    } else {\n      // No extract\n      // Preserve using \"commentsOpts\" or \"some\"\n      condition.preserve = typeof comments !== \"undefined\" ? comments : \"some\";\n      condition.extract = false;\n    } // Ensure that both conditions are functions\n\n\n    [\"preserve\", \"extract\"].forEach(key => {\n      /** @type {undefined | string} */\n      let regexStr;\n      /** @type {undefined | RegExp} */\n\n      let regex;\n\n      switch (typeof condition[key]) {\n        case \"boolean\":\n          condition[key] = condition[key] ? () => true : () => false;\n          break;\n\n        case \"function\":\n          break;\n\n        case \"string\":\n          if (condition[key] === \"all\") {\n            condition[key] = () => true;\n\n            break;\n          }\n\n          if (condition[key] === \"some\") {\n            condition[key] =\n            /** @type {ExtractCommentsFunction} */\n            (astNode, comment) => (comment.type === \"comment2\" || comment.type === \"comment1\") && /@preserve|@lic|@cc_on|^\\**!/i.test(comment.value);\n\n            break;\n          }\n\n          regexStr =\n          /** @type {string} */\n          condition[key];\n\n          condition[key] =\n          /** @type {ExtractCommentsFunction} */\n          (astNode, comment) => new RegExp(\n          /** @type {string} */\n          regexStr).test(comment.value);\n\n          break;\n\n        default:\n          regex =\n          /** @type {RegExp} */\n          condition[key];\n\n          condition[key] =\n          /** @type {ExtractCommentsFunction} */\n          (astNode, comment) =>\n          /** @type {RegExp} */\n          regex.test(comment.value);\n\n      }\n    }); // Redefine the comments function to extract and preserve\n    // comments according to the two conditions\n\n    return (astNode, comment) => {\n      if (\n      /** @type {{ extract: ExtractCommentsFunction }} */\n      condition.extract(astNode, comment)) {\n        const commentText = comment.type === \"comment2\" ? `/*${comment.value}*/` : `//${comment.value}`; // Don't include duplicate comments\n\n        if (!extractedComments.includes(commentText)) {\n          extractedComments.push(commentText);\n        }\n      }\n\n      return (\n        /** @type {{ preserve: ExtractCommentsFunction }} */\n        condition.preserve(astNode, comment)\n      );\n    };\n  };\n  /**\n   * @param {PredefinedOptions & import(\"uglify-js\").MinifyOptions} [uglifyJsOptions={}]\n   * @returns {import(\"uglify-js\").MinifyOptions & { sourceMap: undefined } & { output: import(\"uglify-js\").OutputOptions & { beautify: boolean }}}\n   */\n\n\n  const buildUglifyJsOptions = function () {\n    let uglifyJsOptions = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    // eslint-disable-next-line no-param-reassign\n    delete minimizerOptions.ecma; // eslint-disable-next-line no-param-reassign\n\n    delete minimizerOptions.module; // Need deep copy objects to avoid https://github.com/terser/terser/issues/366\n\n    return { ...uglifyJsOptions,\n      // warnings: uglifyJsOptions.warnings,\n      parse: { ...uglifyJsOptions.parse\n      },\n      compress: typeof uglifyJsOptions.compress === \"boolean\" ? uglifyJsOptions.compress : { ...uglifyJsOptions.compress\n      },\n      mangle: uglifyJsOptions.mangle == null ? true : typeof uglifyJsOptions.mangle === \"boolean\" ? uglifyJsOptions.mangle : { ...uglifyJsOptions.mangle\n      },\n      output: {\n        beautify: false,\n        ...uglifyJsOptions.output\n      },\n      // Ignoring sourceMap from options\n      // eslint-disable-next-line no-undefined\n      sourceMap: undefined // toplevel: uglifyJsOptions.toplevel\n      // nameCache: { ...uglifyJsOptions.toplevel },\n      // ie8: uglifyJsOptions.ie8,\n      // keep_fnames: uglifyJsOptions.keep_fnames,\n\n    };\n  }; // eslint-disable-next-line global-require, import/no-extraneous-dependencies\n\n\n  const {\n    minify\n  } = require(\"uglify-js\"); // Copy `uglify-js` options\n\n\n  const uglifyJsOptions = buildUglifyJsOptions(minimizerOptions); // Let terser generate a SourceMap\n\n  if (sourceMap) {\n    // @ts-ignore\n    uglifyJsOptions.sourceMap = true;\n  }\n  /** @type {ExtractedComments} */\n\n\n  const extractedComments = []; // @ts-ignore\n\n  uglifyJsOptions.output.comments = buildComments(uglifyJsOptions, extractedComments);\n  const [[filename, code]] = Object.entries(input);\n  const result = await minify({\n    [filename]: code\n  }, uglifyJsOptions);\n  return {\n    code: result.code,\n    // eslint-disable-next-line no-undefined\n    map: result.map ? JSON.parse(result.map) : undefined,\n    errors: result.error ? [result.error] : [],\n    warnings: result.warnings || [],\n    extractedComments\n  };\n}\n/**\n * @returns {string | undefined}\n */\n\n\nuglifyJsMinify.getMinimizerVersion = () => {\n  let packageJson;\n\n  try {\n    // eslint-disable-next-line global-require, import/no-extraneous-dependencies\n    packageJson = require(\"uglify-js/package.json\");\n  } catch (error) {// Ignore\n  }\n\n  return packageJson && packageJson.version;\n};\n/* istanbul ignore next */\n\n/**\n * @param {Input} input\n * @param {SourceMapInput | undefined} sourceMap\n * @param {PredefinedOptions & CustomOptions} minimizerOptions\n * @return {Promise<MinimizedResult>}\n */\n\n\nasync function swcMinify(input, sourceMap, minimizerOptions) {\n  /**\n   * @param {PredefinedOptions & import(\"@swc/core\").JsMinifyOptions} [swcOptions={}]\n   * @returns {import(\"@swc/core\").JsMinifyOptions & { sourceMap: undefined }}\n   */\n  const buildSwcOptions = function () {\n    let swcOptions = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    // Need deep copy objects to avoid https://github.com/terser/terser/issues/366\n    return { ...swcOptions,\n      compress: typeof swcOptions.compress === \"boolean\" ? swcOptions.compress : { ...swcOptions.compress\n      },\n      mangle: swcOptions.mangle == null ? true : typeof swcOptions.mangle === \"boolean\" ? swcOptions.mangle : { ...swcOptions.mangle\n      },\n      // ecma: swcOptions.ecma,\n      // keep_classnames: swcOptions.keep_classnames,\n      // keep_fnames: swcOptions.keep_fnames,\n      // module: swcOptions.module,\n      // safari10: swcOptions.safari10,\n      // toplevel: swcOptions.toplevel\n      // eslint-disable-next-line no-undefined\n      sourceMap: undefined\n    };\n  }; // eslint-disable-next-line import/no-extraneous-dependencies, global-require\n\n\n  const swc = require(\"@swc/core\"); // Copy `swc` options\n\n\n  const swcOptions = buildSwcOptions(minimizerOptions); // Let `swc` generate a SourceMap\n\n  if (sourceMap) {\n    // @ts-ignore\n    swcOptions.sourceMap = true;\n  }\n\n  const [[filename, code]] = Object.entries(input);\n  const result = await swc.minify(code, swcOptions);\n  let map;\n\n  if (result.map) {\n    map = JSON.parse(result.map); // TODO workaround for swc because `filename` is not preset as in `swc` signature as for `terser`\n\n    map.sources = [filename];\n    delete map.sourcesContent;\n  }\n\n  return {\n    code: result.code,\n    map\n  };\n}\n/**\n * @returns {string | undefined}\n */\n\n\nswcMinify.getMinimizerVersion = () => {\n  let packageJson;\n\n  try {\n    // eslint-disable-next-line global-require, import/no-extraneous-dependencies\n    packageJson = require(\"@swc/core/package.json\");\n  } catch (error) {// Ignore\n  }\n\n  return packageJson && packageJson.version;\n};\n/* istanbul ignore next */\n\n/**\n * @param {Input} input\n * @param {SourceMapInput | undefined} sourceMap\n * @param {PredefinedOptions & CustomOptions} minimizerOptions\n * @return {Promise<MinimizedResult>}\n */\n\n\nasync function esbuildMinify(input, sourceMap, minimizerOptions) {\n  /**\n   * @param {PredefinedOptions & import(\"esbuild\").TransformOptions} [esbuildOptions={}]\n   * @returns {import(\"esbuild\").TransformOptions}\n   */\n  const buildEsbuildOptions = function () {\n    let esbuildOptions = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    // eslint-disable-next-line no-param-reassign\n    delete esbuildOptions.ecma;\n\n    if (esbuildOptions.module) {\n      // eslint-disable-next-line no-param-reassign\n      esbuildOptions.format = \"esm\";\n    } // eslint-disable-next-line no-param-reassign\n\n\n    delete esbuildOptions.module; // Need deep copy objects to avoid https://github.com/terser/terser/issues/366\n\n    return {\n      minify: true,\n      legalComments: \"inline\",\n      ...esbuildOptions,\n      sourcemap: false\n    };\n  }; // eslint-disable-next-line import/no-extraneous-dependencies, global-require\n\n\n  const esbuild = require(\"esbuild\"); // Copy `esbuild` options\n\n\n  const esbuildOptions = buildEsbuildOptions(minimizerOptions); // Let `esbuild` generate a SourceMap\n\n  if (sourceMap) {\n    esbuildOptions.sourcemap = true;\n    esbuildOptions.sourcesContent = false;\n  }\n\n  const [[filename, code]] = Object.entries(input);\n  esbuildOptions.sourcefile = filename;\n  const result = await esbuild.transform(code, esbuildOptions);\n  return {\n    code: result.code,\n    // eslint-disable-next-line no-undefined\n    map: result.map ? JSON.parse(result.map) : undefined,\n    warnings: result.warnings.length > 0 ? result.warnings.map(item => {\n      return {\n        name: \"Warning\",\n        source: item.location && item.location.file,\n        line: item.location && item.location.line,\n        column: item.location && item.location.column,\n        plugin: item.pluginName,\n        message: `${item.text}${item.detail ? `\\nDetails:\\n${item.detail}` : \"\"}${item.notes.length > 0 ? `\\n\\nNotes:\\n${item.notes.map(note => `${note.location ? `[${note.location.file}:${note.location.line}:${note.location.column}] ` : \"\"}${note.text}${note.location ? `\\nSuggestion: ${note.location.suggestion}` : \"\"}${note.location ? `\\nLine text:\\n${note.location.lineText}\\n` : \"\"}`).join(\"\\n\")}` : \"\"}`\n      };\n    }) : []\n  };\n}\n/**\n * @returns {string | undefined}\n */\n\n\nesbuildMinify.getMinimizerVersion = () => {\n  let packageJson;\n\n  try {\n    // eslint-disable-next-line global-require, import/no-extraneous-dependencies\n    packageJson = require(\"esbuild/package.json\");\n  } catch (error) {// Ignore\n  }\n\n  return packageJson && packageJson.version;\n};\n\nmodule.exports = {\n  throttleAll,\n  terserMinify,\n  uglifyJsMinify,\n  swcMinify,\n  esbuildMinify\n};","map":{"version":3,"names":["notSettled","Symbol","throttleAll","limit","tasks","Number","isInteger","TypeError","Array","isArray","every","task","Promise","resolve","reject","result","length","fill","entries","next","done","value","isLast","includes","index","onFulfilled","x","then","forEach","terserMinify","input","sourceMap","minimizerOptions","extractComments","isObject","type","buildComments","terserOptions","extractedComments","condition","comments","format","output","preserve","extract","RegExp","key","regexStr","regex","astNode","comment","test","commentText","push","buildTerserOptions","compress","mangle","beautify","parse","undefined","minify","require","asObject","filename","code","Object","map","getMinimizerVersion","packageJson","error","version","uglifyJsMinify","uglifyJsOptions","buildUglifyJsOptions","ecma","module","JSON","errors","warnings","swcMinify","buildSwcOptions","swcOptions","swc","sources","sourcesContent","esbuildMinify","buildEsbuildOptions","esbuildOptions","legalComments","sourcemap","esbuild","sourcefile","transform","item","name","source","location","file","line","column","plugin","pluginName","message","text","detail","notes","note","suggestion","lineText","join","exports"],"sources":["/Users/arpanbhandari/Documents/cod-ing/React/newsapp/node_modules/terser-webpack-plugin/dist/utils.js"],"sourcesContent":["\"use strict\";\n\n/** @typedef {import(\"@jridgewell/trace-mapping\").SourceMapInput} SourceMapInput */\n\n/** @typedef {import(\"terser\").FormatOptions} TerserFormatOptions */\n\n/** @typedef {import(\"terser\").MinifyOptions} TerserOptions */\n\n/** @typedef {import(\"terser\").ECMA} TerserECMA */\n\n/** @typedef {import(\"./index.js\").ExtractCommentsOptions} ExtractCommentsOptions */\n\n/** @typedef {import(\"./index.js\").ExtractCommentsFunction} ExtractCommentsFunction */\n\n/** @typedef {import(\"./index.js\").ExtractCommentsCondition} ExtractCommentsCondition */\n\n/** @typedef {import(\"./index.js\").Input} Input */\n\n/** @typedef {import(\"./index.js\").MinimizedResult} MinimizedResult */\n\n/** @typedef {import(\"./index.js\").PredefinedOptions} PredefinedOptions */\n\n/** @typedef {import(\"./index.js\").CustomOptions} CustomOptions */\n\n/**\n * @typedef {Array<string>} ExtractedComments\n */\nconst notSettled = Symbol(`not-settled`);\n/**\n * @template T\n * @typedef {() => Promise<T>} Task\n */\n\n/**\n * Run tasks with limited concurency.\n * @template T\n * @param {number} limit - Limit of tasks that run at once.\n * @param {Task<T>[]} tasks - List of tasks to run.\n * @returns {Promise<T[]>} A promise that fulfills to an array of the results\n */\n\nfunction throttleAll(limit, tasks) {\n  if (!Number.isInteger(limit) || limit < 1) {\n    throw new TypeError(`Expected \\`limit\\` to be a finite number > 0, got \\`${limit}\\` (${typeof limit})`);\n  }\n\n  if (!Array.isArray(tasks) || !tasks.every(task => typeof task === `function`)) {\n    throw new TypeError(`Expected \\`tasks\\` to be a list of functions returning a promise`);\n  }\n\n  return new Promise((resolve, reject) => {\n    const result = Array(tasks.length).fill(notSettled);\n    const entries = tasks.entries();\n\n    const next = () => {\n      const {\n        done,\n        value\n      } = entries.next();\n\n      if (done) {\n        const isLast = !result.includes(notSettled);\n        if (isLast) resolve(\n        /** @type{T[]} **/\n        result);\n        return;\n      }\n\n      const [index, task] = value;\n      /**\n       * @param {T} x\n       */\n\n      const onFulfilled = x => {\n        result[index] = x;\n        next();\n      };\n\n      task().then(onFulfilled, reject);\n    };\n\n    Array(limit).fill(0).forEach(next);\n  });\n}\n/* istanbul ignore next */\n\n/**\n * @param {Input} input\n * @param {SourceMapInput | undefined} sourceMap\n * @param {PredefinedOptions & CustomOptions} minimizerOptions\n * @param {ExtractCommentsOptions | undefined} extractComments\n * @return {Promise<MinimizedResult>}\n */\n\n\nasync function terserMinify(input, sourceMap, minimizerOptions, extractComments) {\n  /**\n   * @param {any} value\n   * @returns {boolean}\n   */\n  const isObject = value => {\n    const type = typeof value;\n    return value != null && (type === \"object\" || type === \"function\");\n  };\n  /**\n   * @param {TerserOptions & { sourceMap: undefined } & ({ output: TerserFormatOptions & { beautify: boolean } } | { format: TerserFormatOptions & { beautify: boolean } })} terserOptions\n   * @param {ExtractedComments} extractedComments\n   * @returns {ExtractCommentsFunction}\n   */\n\n\n  const buildComments = (terserOptions, extractedComments) => {\n    /** @type {{ [index: string]: ExtractCommentsCondition }} */\n    const condition = {};\n    let comments;\n\n    if (terserOptions.format) {\n      ({\n        comments\n      } = terserOptions.format);\n    } else if (terserOptions.output) {\n      ({\n        comments\n      } = terserOptions.output);\n    }\n\n    condition.preserve = typeof comments !== \"undefined\" ? comments : false;\n\n    if (typeof extractComments === \"boolean\" && extractComments) {\n      condition.extract = \"some\";\n    } else if (typeof extractComments === \"string\" || extractComments instanceof RegExp) {\n      condition.extract = extractComments;\n    } else if (typeof extractComments === \"function\") {\n      condition.extract = extractComments;\n    } else if (extractComments && isObject(extractComments)) {\n      condition.extract = typeof extractComments.condition === \"boolean\" && extractComments.condition ? \"some\" : typeof extractComments.condition !== \"undefined\" ? extractComments.condition : \"some\";\n    } else {\n      // No extract\n      // Preserve using \"commentsOpts\" or \"some\"\n      condition.preserve = typeof comments !== \"undefined\" ? comments : \"some\";\n      condition.extract = false;\n    } // Ensure that both conditions are functions\n\n\n    [\"preserve\", \"extract\"].forEach(key => {\n      /** @type {undefined | string} */\n      let regexStr;\n      /** @type {undefined | RegExp} */\n\n      let regex;\n\n      switch (typeof condition[key]) {\n        case \"boolean\":\n          condition[key] = condition[key] ? () => true : () => false;\n          break;\n\n        case \"function\":\n          break;\n\n        case \"string\":\n          if (condition[key] === \"all\") {\n            condition[key] = () => true;\n\n            break;\n          }\n\n          if (condition[key] === \"some\") {\n            condition[key] =\n            /** @type {ExtractCommentsFunction} */\n            (astNode, comment) => (comment.type === \"comment2\" || comment.type === \"comment1\") && /@preserve|@lic|@cc_on|^\\**!/i.test(comment.value);\n\n            break;\n          }\n\n          regexStr =\n          /** @type {string} */\n          condition[key];\n\n          condition[key] =\n          /** @type {ExtractCommentsFunction} */\n          (astNode, comment) => new RegExp(\n          /** @type {string} */\n          regexStr).test(comment.value);\n\n          break;\n\n        default:\n          regex =\n          /** @type {RegExp} */\n          condition[key];\n\n          condition[key] =\n          /** @type {ExtractCommentsFunction} */\n          (astNode, comment) =>\n          /** @type {RegExp} */\n          regex.test(comment.value);\n\n      }\n    }); // Redefine the comments function to extract and preserve\n    // comments according to the two conditions\n\n    return (astNode, comment) => {\n      if (\n      /** @type {{ extract: ExtractCommentsFunction }} */\n      condition.extract(astNode, comment)) {\n        const commentText = comment.type === \"comment2\" ? `/*${comment.value}*/` : `//${comment.value}`; // Don't include duplicate comments\n\n        if (!extractedComments.includes(commentText)) {\n          extractedComments.push(commentText);\n        }\n      }\n\n      return (\n        /** @type {{ preserve: ExtractCommentsFunction }} */\n        condition.preserve(astNode, comment)\n      );\n    };\n  };\n  /**\n   * @param {PredefinedOptions & TerserOptions} [terserOptions={}]\n   * @returns {TerserOptions & { sourceMap: undefined } & ({ output: TerserFormatOptions & { beautify: boolean } } | { format: TerserFormatOptions & { beautify: boolean } })}\n   */\n\n\n  const buildTerserOptions = (terserOptions = {}) => {\n    // Need deep copy objects to avoid https://github.com/terser/terser/issues/366\n    return { ...terserOptions,\n      compress: typeof terserOptions.compress === \"boolean\" ? terserOptions.compress : { ...terserOptions.compress\n      },\n      // ecma: terserOptions.ecma,\n      // ie8: terserOptions.ie8,\n      // keep_classnames: terserOptions.keep_classnames,\n      // keep_fnames: terserOptions.keep_fnames,\n      mangle: terserOptions.mangle == null ? true : typeof terserOptions.mangle === \"boolean\" ? terserOptions.mangle : { ...terserOptions.mangle\n      },\n      // module: terserOptions.module,\n      // nameCache: { ...terserOptions.toplevel },\n      // the `output` option is deprecated\n      ...(terserOptions.format ? {\n        format: {\n          beautify: false,\n          ...terserOptions.format\n        }\n      } : {\n        output: {\n          beautify: false,\n          ...terserOptions.output\n        }\n      }),\n      parse: { ...terserOptions.parse\n      },\n      // safari10: terserOptions.safari10,\n      // Ignoring sourceMap from options\n      // eslint-disable-next-line no-undefined\n      sourceMap: undefined // toplevel: terserOptions.toplevel\n\n    };\n  }; // eslint-disable-next-line global-require\n\n\n  const {\n    minify\n  } = require(\"terser\"); // Copy `terser` options\n\n\n  const terserOptions = buildTerserOptions(minimizerOptions); // Let terser generate a SourceMap\n\n  if (sourceMap) {\n    // @ts-ignore\n    terserOptions.sourceMap = {\n      asObject: true\n    };\n  }\n  /** @type {ExtractedComments} */\n\n\n  const extractedComments = [];\n\n  if (terserOptions.output) {\n    terserOptions.output.comments = buildComments(terserOptions, extractedComments);\n  } else if (terserOptions.format) {\n    terserOptions.format.comments = buildComments(terserOptions, extractedComments);\n  }\n\n  const [[filename, code]] = Object.entries(input);\n  const result = await minify({\n    [filename]: code\n  }, terserOptions);\n  return {\n    code:\n    /** @type {string} **/\n    result.code,\n    // @ts-ignore\n    // eslint-disable-next-line no-undefined\n    map: result.map ?\n    /** @type {SourceMapInput} **/\n    result.map : undefined,\n    extractedComments\n  };\n}\n/**\n * @returns {string | undefined}\n */\n\n\nterserMinify.getMinimizerVersion = () => {\n  let packageJson;\n\n  try {\n    // eslint-disable-next-line global-require\n    packageJson = require(\"terser/package.json\");\n  } catch (error) {// Ignore\n  }\n\n  return packageJson && packageJson.version;\n};\n/* istanbul ignore next */\n\n/**\n * @param {Input} input\n * @param {SourceMapInput | undefined} sourceMap\n * @param {PredefinedOptions & CustomOptions} minimizerOptions\n * @param {ExtractCommentsOptions | undefined} extractComments\n * @return {Promise<MinimizedResult>}\n */\n\n\nasync function uglifyJsMinify(input, sourceMap, minimizerOptions, extractComments) {\n  /**\n   * @param {any} value\n   * @returns {boolean}\n   */\n  const isObject = value => {\n    const type = typeof value;\n    return value != null && (type === \"object\" || type === \"function\");\n  };\n  /**\n   * @param {import(\"uglify-js\").MinifyOptions & { sourceMap: undefined } & { output: import(\"uglify-js\").OutputOptions & { beautify: boolean }}} uglifyJsOptions\n   * @param {ExtractedComments} extractedComments\n   * @returns {ExtractCommentsFunction}\n   */\n\n\n  const buildComments = (uglifyJsOptions, extractedComments) => {\n    /** @type {{ [index: string]: ExtractCommentsCondition }} */\n    const condition = {};\n    const {\n      comments\n    } = uglifyJsOptions.output;\n    condition.preserve = typeof comments !== \"undefined\" ? comments : false;\n\n    if (typeof extractComments === \"boolean\" && extractComments) {\n      condition.extract = \"some\";\n    } else if (typeof extractComments === \"string\" || extractComments instanceof RegExp) {\n      condition.extract = extractComments;\n    } else if (typeof extractComments === \"function\") {\n      condition.extract = extractComments;\n    } else if (extractComments && isObject(extractComments)) {\n      condition.extract = typeof extractComments.condition === \"boolean\" && extractComments.condition ? \"some\" : typeof extractComments.condition !== \"undefined\" ? extractComments.condition : \"some\";\n    } else {\n      // No extract\n      // Preserve using \"commentsOpts\" or \"some\"\n      condition.preserve = typeof comments !== \"undefined\" ? comments : \"some\";\n      condition.extract = false;\n    } // Ensure that both conditions are functions\n\n\n    [\"preserve\", \"extract\"].forEach(key => {\n      /** @type {undefined | string} */\n      let regexStr;\n      /** @type {undefined | RegExp} */\n\n      let regex;\n\n      switch (typeof condition[key]) {\n        case \"boolean\":\n          condition[key] = condition[key] ? () => true : () => false;\n          break;\n\n        case \"function\":\n          break;\n\n        case \"string\":\n          if (condition[key] === \"all\") {\n            condition[key] = () => true;\n\n            break;\n          }\n\n          if (condition[key] === \"some\") {\n            condition[key] =\n            /** @type {ExtractCommentsFunction} */\n            (astNode, comment) => (comment.type === \"comment2\" || comment.type === \"comment1\") && /@preserve|@lic|@cc_on|^\\**!/i.test(comment.value);\n\n            break;\n          }\n\n          regexStr =\n          /** @type {string} */\n          condition[key];\n\n          condition[key] =\n          /** @type {ExtractCommentsFunction} */\n          (astNode, comment) => new RegExp(\n          /** @type {string} */\n          regexStr).test(comment.value);\n\n          break;\n\n        default:\n          regex =\n          /** @type {RegExp} */\n          condition[key];\n\n          condition[key] =\n          /** @type {ExtractCommentsFunction} */\n          (astNode, comment) =>\n          /** @type {RegExp} */\n          regex.test(comment.value);\n\n      }\n    }); // Redefine the comments function to extract and preserve\n    // comments according to the two conditions\n\n    return (astNode, comment) => {\n      if (\n      /** @type {{ extract: ExtractCommentsFunction }} */\n      condition.extract(astNode, comment)) {\n        const commentText = comment.type === \"comment2\" ? `/*${comment.value}*/` : `//${comment.value}`; // Don't include duplicate comments\n\n        if (!extractedComments.includes(commentText)) {\n          extractedComments.push(commentText);\n        }\n      }\n\n      return (\n        /** @type {{ preserve: ExtractCommentsFunction }} */\n        condition.preserve(astNode, comment)\n      );\n    };\n  };\n  /**\n   * @param {PredefinedOptions & import(\"uglify-js\").MinifyOptions} [uglifyJsOptions={}]\n   * @returns {import(\"uglify-js\").MinifyOptions & { sourceMap: undefined } & { output: import(\"uglify-js\").OutputOptions & { beautify: boolean }}}\n   */\n\n\n  const buildUglifyJsOptions = (uglifyJsOptions = {}) => {\n    // eslint-disable-next-line no-param-reassign\n    delete minimizerOptions.ecma; // eslint-disable-next-line no-param-reassign\n\n    delete minimizerOptions.module; // Need deep copy objects to avoid https://github.com/terser/terser/issues/366\n\n    return { ...uglifyJsOptions,\n      // warnings: uglifyJsOptions.warnings,\n      parse: { ...uglifyJsOptions.parse\n      },\n      compress: typeof uglifyJsOptions.compress === \"boolean\" ? uglifyJsOptions.compress : { ...uglifyJsOptions.compress\n      },\n      mangle: uglifyJsOptions.mangle == null ? true : typeof uglifyJsOptions.mangle === \"boolean\" ? uglifyJsOptions.mangle : { ...uglifyJsOptions.mangle\n      },\n      output: {\n        beautify: false,\n        ...uglifyJsOptions.output\n      },\n      // Ignoring sourceMap from options\n      // eslint-disable-next-line no-undefined\n      sourceMap: undefined // toplevel: uglifyJsOptions.toplevel\n      // nameCache: { ...uglifyJsOptions.toplevel },\n      // ie8: uglifyJsOptions.ie8,\n      // keep_fnames: uglifyJsOptions.keep_fnames,\n\n    };\n  }; // eslint-disable-next-line global-require, import/no-extraneous-dependencies\n\n\n  const {\n    minify\n  } = require(\"uglify-js\"); // Copy `uglify-js` options\n\n\n  const uglifyJsOptions = buildUglifyJsOptions(minimizerOptions); // Let terser generate a SourceMap\n\n  if (sourceMap) {\n    // @ts-ignore\n    uglifyJsOptions.sourceMap = true;\n  }\n  /** @type {ExtractedComments} */\n\n\n  const extractedComments = []; // @ts-ignore\n\n  uglifyJsOptions.output.comments = buildComments(uglifyJsOptions, extractedComments);\n  const [[filename, code]] = Object.entries(input);\n  const result = await minify({\n    [filename]: code\n  }, uglifyJsOptions);\n  return {\n    code: result.code,\n    // eslint-disable-next-line no-undefined\n    map: result.map ? JSON.parse(result.map) : undefined,\n    errors: result.error ? [result.error] : [],\n    warnings: result.warnings || [],\n    extractedComments\n  };\n}\n/**\n * @returns {string | undefined}\n */\n\n\nuglifyJsMinify.getMinimizerVersion = () => {\n  let packageJson;\n\n  try {\n    // eslint-disable-next-line global-require, import/no-extraneous-dependencies\n    packageJson = require(\"uglify-js/package.json\");\n  } catch (error) {// Ignore\n  }\n\n  return packageJson && packageJson.version;\n};\n/* istanbul ignore next */\n\n/**\n * @param {Input} input\n * @param {SourceMapInput | undefined} sourceMap\n * @param {PredefinedOptions & CustomOptions} minimizerOptions\n * @return {Promise<MinimizedResult>}\n */\n\n\nasync function swcMinify(input, sourceMap, minimizerOptions) {\n  /**\n   * @param {PredefinedOptions & import(\"@swc/core\").JsMinifyOptions} [swcOptions={}]\n   * @returns {import(\"@swc/core\").JsMinifyOptions & { sourceMap: undefined }}\n   */\n  const buildSwcOptions = (swcOptions = {}) => {\n    // Need deep copy objects to avoid https://github.com/terser/terser/issues/366\n    return { ...swcOptions,\n      compress: typeof swcOptions.compress === \"boolean\" ? swcOptions.compress : { ...swcOptions.compress\n      },\n      mangle: swcOptions.mangle == null ? true : typeof swcOptions.mangle === \"boolean\" ? swcOptions.mangle : { ...swcOptions.mangle\n      },\n      // ecma: swcOptions.ecma,\n      // keep_classnames: swcOptions.keep_classnames,\n      // keep_fnames: swcOptions.keep_fnames,\n      // module: swcOptions.module,\n      // safari10: swcOptions.safari10,\n      // toplevel: swcOptions.toplevel\n      // eslint-disable-next-line no-undefined\n      sourceMap: undefined\n    };\n  }; // eslint-disable-next-line import/no-extraneous-dependencies, global-require\n\n\n  const swc = require(\"@swc/core\"); // Copy `swc` options\n\n\n  const swcOptions = buildSwcOptions(minimizerOptions); // Let `swc` generate a SourceMap\n\n  if (sourceMap) {\n    // @ts-ignore\n    swcOptions.sourceMap = true;\n  }\n\n  const [[filename, code]] = Object.entries(input);\n  const result = await swc.minify(code, swcOptions);\n  let map;\n\n  if (result.map) {\n    map = JSON.parse(result.map); // TODO workaround for swc because `filename` is not preset as in `swc` signature as for `terser`\n\n    map.sources = [filename];\n    delete map.sourcesContent;\n  }\n\n  return {\n    code: result.code,\n    map\n  };\n}\n/**\n * @returns {string | undefined}\n */\n\n\nswcMinify.getMinimizerVersion = () => {\n  let packageJson;\n\n  try {\n    // eslint-disable-next-line global-require, import/no-extraneous-dependencies\n    packageJson = require(\"@swc/core/package.json\");\n  } catch (error) {// Ignore\n  }\n\n  return packageJson && packageJson.version;\n};\n/* istanbul ignore next */\n\n/**\n * @param {Input} input\n * @param {SourceMapInput | undefined} sourceMap\n * @param {PredefinedOptions & CustomOptions} minimizerOptions\n * @return {Promise<MinimizedResult>}\n */\n\n\nasync function esbuildMinify(input, sourceMap, minimizerOptions) {\n  /**\n   * @param {PredefinedOptions & import(\"esbuild\").TransformOptions} [esbuildOptions={}]\n   * @returns {import(\"esbuild\").TransformOptions}\n   */\n  const buildEsbuildOptions = (esbuildOptions = {}) => {\n    // eslint-disable-next-line no-param-reassign\n    delete esbuildOptions.ecma;\n\n    if (esbuildOptions.module) {\n      // eslint-disable-next-line no-param-reassign\n      esbuildOptions.format = \"esm\";\n    } // eslint-disable-next-line no-param-reassign\n\n\n    delete esbuildOptions.module; // Need deep copy objects to avoid https://github.com/terser/terser/issues/366\n\n    return {\n      minify: true,\n      legalComments: \"inline\",\n      ...esbuildOptions,\n      sourcemap: false\n    };\n  }; // eslint-disable-next-line import/no-extraneous-dependencies, global-require\n\n\n  const esbuild = require(\"esbuild\"); // Copy `esbuild` options\n\n\n  const esbuildOptions = buildEsbuildOptions(minimizerOptions); // Let `esbuild` generate a SourceMap\n\n  if (sourceMap) {\n    esbuildOptions.sourcemap = true;\n    esbuildOptions.sourcesContent = false;\n  }\n\n  const [[filename, code]] = Object.entries(input);\n  esbuildOptions.sourcefile = filename;\n  const result = await esbuild.transform(code, esbuildOptions);\n  return {\n    code: result.code,\n    // eslint-disable-next-line no-undefined\n    map: result.map ? JSON.parse(result.map) : undefined,\n    warnings: result.warnings.length > 0 ? result.warnings.map(item => {\n      return {\n        name: \"Warning\",\n        source: item.location && item.location.file,\n        line: item.location && item.location.line,\n        column: item.location && item.location.column,\n        plugin: item.pluginName,\n        message: `${item.text}${item.detail ? `\\nDetails:\\n${item.detail}` : \"\"}${item.notes.length > 0 ? `\\n\\nNotes:\\n${item.notes.map(note => `${note.location ? `[${note.location.file}:${note.location.line}:${note.location.column}] ` : \"\"}${note.text}${note.location ? `\\nSuggestion: ${note.location.suggestion}` : \"\"}${note.location ? `\\nLine text:\\n${note.location.lineText}\\n` : \"\"}`).join(\"\\n\")}` : \"\"}`\n      };\n    }) : []\n  };\n}\n/**\n * @returns {string | undefined}\n */\n\n\nesbuildMinify.getMinimizerVersion = () => {\n  let packageJson;\n\n  try {\n    // eslint-disable-next-line global-require, import/no-extraneous-dependencies\n    packageJson = require(\"esbuild/package.json\");\n  } catch (error) {// Ignore\n  }\n\n  return packageJson && packageJson.version;\n};\n\nmodule.exports = {\n  throttleAll,\n  terserMinify,\n  uglifyJsMinify,\n  swcMinify,\n  esbuildMinify\n};"],"mappings":"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"},"metadata":{},"sourceType":"script"}