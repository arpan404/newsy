{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nconst {\n  create: createResolver\n} = require(\"enhanced-resolve\");\n\nconst nodeModule = require(\"module\");\n\nconst asyncLib = require(\"neo-async\");\n\nconst AsyncQueue = require(\"./util/AsyncQueue\");\n\nconst StackedCacheMap = require(\"./util/StackedCacheMap\");\n\nconst createHash = require(\"./util/createHash\");\n\nconst {\n  join,\n  dirname,\n  relative,\n  lstatReadlinkAbsolute\n} = require(\"./util/fs\");\n\nconst makeSerializable = require(\"./util/makeSerializable\");\n\nconst processAsyncTree = require(\"./util/processAsyncTree\");\n/** @typedef {import(\"./WebpackError\")} WebpackError */\n\n/** @typedef {import(\"./logging/Logger\").Logger} Logger */\n\n/** @typedef {typeof import(\"./util/Hash\")} Hash */\n\n/** @typedef {import(\"./util/fs\").IStats} IStats */\n\n/** @typedef {import(\"./util/fs\").InputFileSystem} InputFileSystem */\n\n\nconst supportsEsm = +process.versions.modules >= 83;\nconst builtinModules = new Set(nodeModule.builtinModules);\nlet FS_ACCURACY = 2000;\nconst EMPTY_SET = new Set();\nconst RBDT_RESOLVE_CJS = 0;\nconst RBDT_RESOLVE_ESM = 1;\nconst RBDT_RESOLVE_DIRECTORY = 2;\nconst RBDT_RESOLVE_CJS_FILE = 3;\nconst RBDT_RESOLVE_CJS_FILE_AS_CHILD = 4;\nconst RBDT_RESOLVE_ESM_FILE = 5;\nconst RBDT_DIRECTORY = 6;\nconst RBDT_FILE = 7;\nconst RBDT_DIRECTORY_DEPENDENCIES = 8;\nconst RBDT_FILE_DEPENDENCIES = 9;\nconst INVALID = Symbol(\"invalid\");\n/**\n * @typedef {Object} FileSystemInfoEntry\n * @property {number} safeTime\n * @property {number=} timestamp\n */\n\n/**\n * @typedef {Object} ResolvedContextFileSystemInfoEntry\n * @property {number} safeTime\n * @property {string=} timestampHash\n */\n\n/**\n * @typedef {Object} ContextFileSystemInfoEntry\n * @property {number} safeTime\n * @property {string=} timestampHash\n * @property {ResolvedContextFileSystemInfoEntry=} resolved\n * @property {Set<string>=} symlinks\n */\n\n/**\n * @typedef {Object} TimestampAndHash\n * @property {number} safeTime\n * @property {number=} timestamp\n * @property {string} hash\n */\n\n/**\n * @typedef {Object} ResolvedContextTimestampAndHash\n * @property {number} safeTime\n * @property {string=} timestampHash\n * @property {string} hash\n */\n\n/**\n * @typedef {Object} ContextTimestampAndHash\n * @property {number} safeTime\n * @property {string=} timestampHash\n * @property {string} hash\n * @property {ResolvedContextTimestampAndHash=} resolved\n * @property {Set<string>=} symlinks\n */\n\n/**\n * @typedef {Object} ContextHash\n * @property {string} hash\n * @property {string=} resolved\n * @property {Set<string>=} symlinks\n */\n\n/**\n * @typedef {Object} SnapshotOptimizationEntry\n * @property {Snapshot} snapshot\n * @property {number} shared\n * @property {Set<string>} snapshotContent\n * @property {Set<SnapshotOptimizationEntry>} children\n */\n\n/**\n * @typedef {Object} ResolveBuildDependenciesResult\n * @property {Set<string>} files list of files\n * @property {Set<string>} directories list of directories\n * @property {Set<string>} missing list of missing entries\n * @property {Map<string, string | false>} resolveResults stored resolve results\n * @property {Object} resolveDependencies dependencies of the resolving\n * @property {Set<string>} resolveDependencies.files list of files\n * @property {Set<string>} resolveDependencies.directories list of directories\n * @property {Set<string>} resolveDependencies.missing list of missing entries\n */\n\nconst DONE_ITERATOR_RESULT = new Set().keys().next(); // cspell:word tshs\n// Tsh = Timestamp + Hash\n// Tshs = Timestamp + Hash combinations\n\nclass SnapshotIterator {\n  constructor(next) {\n    this.next = next;\n  }\n\n}\n\nclass SnapshotIterable {\n  constructor(snapshot, getMaps) {\n    this.snapshot = snapshot;\n    this.getMaps = getMaps;\n  }\n\n  [Symbol.iterator]() {\n    let state = 0;\n    /** @type {IterableIterator<string>} */\n\n    let it;\n    /** @type {(Snapshot) => (Map<string, any> | Set<string>)[]} */\n\n    let getMaps;\n    /** @type {(Map<string, any> | Set<string>)[]} */\n\n    let maps;\n    /** @type {Snapshot} */\n\n    let snapshot;\n    let queue;\n    return new SnapshotIterator(() => {\n      for (;;) {\n        switch (state) {\n          case 0:\n            snapshot = this.snapshot;\n            getMaps = this.getMaps;\n            maps = getMaps(snapshot);\n            state = 1;\n\n          /* falls through */\n\n          case 1:\n            if (maps.length > 0) {\n              const map = maps.pop();\n\n              if (map !== undefined) {\n                it = map.keys();\n                state = 2;\n              } else {\n                break;\n              }\n            } else {\n              state = 3;\n              break;\n            }\n\n          /* falls through */\n\n          case 2:\n            {\n              const result = it.next();\n              if (!result.done) return result;\n              state = 1;\n              break;\n            }\n\n          case 3:\n            {\n              const children = snapshot.children;\n\n              if (children !== undefined) {\n                if (children.size === 1) {\n                  // shortcut for a single child\n                  // avoids allocation of queue\n                  for (const child of children) snapshot = child;\n\n                  maps = getMaps(snapshot);\n                  state = 1;\n                  break;\n                }\n\n                if (queue === undefined) queue = [];\n\n                for (const child of children) {\n                  queue.push(child);\n                }\n              }\n\n              if (queue !== undefined && queue.length > 0) {\n                snapshot = queue.pop();\n                maps = getMaps(snapshot);\n                state = 1;\n                break;\n              } else {\n                state = 4;\n              }\n            }\n\n          /* falls through */\n\n          case 4:\n            return DONE_ITERATOR_RESULT;\n        }\n      }\n    });\n  }\n\n}\n\nclass Snapshot {\n  constructor() {\n    this._flags = 0;\n    /** @type {number | undefined} */\n\n    this.startTime = undefined;\n    /** @type {Map<string, FileSystemInfoEntry | null> | undefined} */\n\n    this.fileTimestamps = undefined;\n    /** @type {Map<string, string | null> | undefined} */\n\n    this.fileHashes = undefined;\n    /** @type {Map<string, TimestampAndHash | string | null> | undefined} */\n\n    this.fileTshs = undefined;\n    /** @type {Map<string, ResolvedContextFileSystemInfoEntry | null> | undefined} */\n\n    this.contextTimestamps = undefined;\n    /** @type {Map<string, string | null> | undefined} */\n\n    this.contextHashes = undefined;\n    /** @type {Map<string, ResolvedContextTimestampAndHash | null> | undefined} */\n\n    this.contextTshs = undefined;\n    /** @type {Map<string, boolean> | undefined} */\n\n    this.missingExistence = undefined;\n    /** @type {Map<string, string> | undefined} */\n\n    this.managedItemInfo = undefined;\n    /** @type {Set<string> | undefined} */\n\n    this.managedFiles = undefined;\n    /** @type {Set<string> | undefined} */\n\n    this.managedContexts = undefined;\n    /** @type {Set<string> | undefined} */\n\n    this.managedMissing = undefined;\n    /** @type {Set<Snapshot> | undefined} */\n\n    this.children = undefined;\n  }\n\n  hasStartTime() {\n    return (this._flags & 1) !== 0;\n  }\n\n  setStartTime(value) {\n    this._flags = this._flags | 1;\n    this.startTime = value;\n  }\n\n  setMergedStartTime(value, snapshot) {\n    if (value) {\n      if (snapshot.hasStartTime()) {\n        this.setStartTime(Math.min(value, snapshot.startTime));\n      } else {\n        this.setStartTime(value);\n      }\n    } else {\n      if (snapshot.hasStartTime()) this.setStartTime(snapshot.startTime);\n    }\n  }\n\n  hasFileTimestamps() {\n    return (this._flags & 2) !== 0;\n  }\n\n  setFileTimestamps(value) {\n    this._flags = this._flags | 2;\n    this.fileTimestamps = value;\n  }\n\n  hasFileHashes() {\n    return (this._flags & 4) !== 0;\n  }\n\n  setFileHashes(value) {\n    this._flags = this._flags | 4;\n    this.fileHashes = value;\n  }\n\n  hasFileTshs() {\n    return (this._flags & 8) !== 0;\n  }\n\n  setFileTshs(value) {\n    this._flags = this._flags | 8;\n    this.fileTshs = value;\n  }\n\n  hasContextTimestamps() {\n    return (this._flags & 0x10) !== 0;\n  }\n\n  setContextTimestamps(value) {\n    this._flags = this._flags | 0x10;\n    this.contextTimestamps = value;\n  }\n\n  hasContextHashes() {\n    return (this._flags & 0x20) !== 0;\n  }\n\n  setContextHashes(value) {\n    this._flags = this._flags | 0x20;\n    this.contextHashes = value;\n  }\n\n  hasContextTshs() {\n    return (this._flags & 0x40) !== 0;\n  }\n\n  setContextTshs(value) {\n    this._flags = this._flags | 0x40;\n    this.contextTshs = value;\n  }\n\n  hasMissingExistence() {\n    return (this._flags & 0x80) !== 0;\n  }\n\n  setMissingExistence(value) {\n    this._flags = this._flags | 0x80;\n    this.missingExistence = value;\n  }\n\n  hasManagedItemInfo() {\n    return (this._flags & 0x100) !== 0;\n  }\n\n  setManagedItemInfo(value) {\n    this._flags = this._flags | 0x100;\n    this.managedItemInfo = value;\n  }\n\n  hasManagedFiles() {\n    return (this._flags & 0x200) !== 0;\n  }\n\n  setManagedFiles(value) {\n    this._flags = this._flags | 0x200;\n    this.managedFiles = value;\n  }\n\n  hasManagedContexts() {\n    return (this._flags & 0x400) !== 0;\n  }\n\n  setManagedContexts(value) {\n    this._flags = this._flags | 0x400;\n    this.managedContexts = value;\n  }\n\n  hasManagedMissing() {\n    return (this._flags & 0x800) !== 0;\n  }\n\n  setManagedMissing(value) {\n    this._flags = this._flags | 0x800;\n    this.managedMissing = value;\n  }\n\n  hasChildren() {\n    return (this._flags & 0x1000) !== 0;\n  }\n\n  setChildren(value) {\n    this._flags = this._flags | 0x1000;\n    this.children = value;\n  }\n\n  addChild(child) {\n    if (!this.hasChildren()) {\n      this.setChildren(new Set());\n    }\n\n    this.children.add(child);\n  }\n\n  serialize(_ref) {\n    let {\n      write\n    } = _ref;\n    write(this._flags);\n    if (this.hasStartTime()) write(this.startTime);\n    if (this.hasFileTimestamps()) write(this.fileTimestamps);\n    if (this.hasFileHashes()) write(this.fileHashes);\n    if (this.hasFileTshs()) write(this.fileTshs);\n    if (this.hasContextTimestamps()) write(this.contextTimestamps);\n    if (this.hasContextHashes()) write(this.contextHashes);\n    if (this.hasContextTshs()) write(this.contextTshs);\n    if (this.hasMissingExistence()) write(this.missingExistence);\n    if (this.hasManagedItemInfo()) write(this.managedItemInfo);\n    if (this.hasManagedFiles()) write(this.managedFiles);\n    if (this.hasManagedContexts()) write(this.managedContexts);\n    if (this.hasManagedMissing()) write(this.managedMissing);\n    if (this.hasChildren()) write(this.children);\n  }\n\n  deserialize(_ref2) {\n    let {\n      read\n    } = _ref2;\n    this._flags = read();\n    if (this.hasStartTime()) this.startTime = read();\n    if (this.hasFileTimestamps()) this.fileTimestamps = read();\n    if (this.hasFileHashes()) this.fileHashes = read();\n    if (this.hasFileTshs()) this.fileTshs = read();\n    if (this.hasContextTimestamps()) this.contextTimestamps = read();\n    if (this.hasContextHashes()) this.contextHashes = read();\n    if (this.hasContextTshs()) this.contextTshs = read();\n    if (this.hasMissingExistence()) this.missingExistence = read();\n    if (this.hasManagedItemInfo()) this.managedItemInfo = read();\n    if (this.hasManagedFiles()) this.managedFiles = read();\n    if (this.hasManagedContexts()) this.managedContexts = read();\n    if (this.hasManagedMissing()) this.managedMissing = read();\n    if (this.hasChildren()) this.children = read();\n  }\n  /**\n   * @param {function(Snapshot): (ReadonlyMap<string, any> | ReadonlySet<string>)[]} getMaps first\n   * @returns {Iterable<string>} iterable\n   */\n\n\n  _createIterable(getMaps) {\n    return new SnapshotIterable(this, getMaps);\n  }\n  /**\n   * @returns {Iterable<string>} iterable\n   */\n\n\n  getFileIterable() {\n    return this._createIterable(s => [s.fileTimestamps, s.fileHashes, s.fileTshs, s.managedFiles]);\n  }\n  /**\n   * @returns {Iterable<string>} iterable\n   */\n\n\n  getContextIterable() {\n    return this._createIterable(s => [s.contextTimestamps, s.contextHashes, s.contextTshs, s.managedContexts]);\n  }\n  /**\n   * @returns {Iterable<string>} iterable\n   */\n\n\n  getMissingIterable() {\n    return this._createIterable(s => [s.missingExistence, s.managedMissing]);\n  }\n\n}\n\nmakeSerializable(Snapshot, \"webpack/lib/FileSystemInfo\", \"Snapshot\");\nconst MIN_COMMON_SNAPSHOT_SIZE = 3;\n/**\n * @template T\n */\n\nclass SnapshotOptimization {\n  /**\n   * @param {function(Snapshot): boolean} has has value\n   * @param {function(Snapshot): Map<string, T> | Set<string>} get get value\n   * @param {function(Snapshot, Map<string, T> | Set<string>): void} set set value\n   * @param {boolean=} useStartTime use the start time of snapshots\n   * @param {boolean=} isSet value is an Set instead of a Map\n   */\n  constructor(has, get, set) {\n    let useStartTime = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : true;\n    let isSet = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;\n    this._has = has;\n    this._get = get;\n    this._set = set;\n    this._useStartTime = useStartTime;\n    this._isSet = isSet;\n    /** @type {Map<string, SnapshotOptimizationEntry>} */\n\n    this._map = new Map();\n    this._statItemsShared = 0;\n    this._statItemsUnshared = 0;\n    this._statSharedSnapshots = 0;\n    this._statReusedSharedSnapshots = 0;\n  }\n\n  getStatisticMessage() {\n    const total = this._statItemsShared + this._statItemsUnshared;\n    if (total === 0) return undefined;\n    return `${this._statItemsShared && Math.round(this._statItemsShared * 100 / total)}% (${this._statItemsShared}/${total}) entries shared via ${this._statSharedSnapshots} shared snapshots (${this._statReusedSharedSnapshots + this._statSharedSnapshots} times referenced)`;\n  }\n\n  clear() {\n    this._map.clear();\n\n    this._statItemsShared = 0;\n    this._statItemsUnshared = 0;\n    this._statSharedSnapshots = 0;\n    this._statReusedSharedSnapshots = 0;\n  }\n  /**\n   * @param {Snapshot} newSnapshot snapshot\n   * @param {Set<string>} capturedFiles files to snapshot/share\n   * @returns {void}\n   */\n\n\n  optimize(newSnapshot, capturedFiles) {\n    /**\n     * @param {SnapshotOptimizationEntry} entry optimization entry\n     * @returns {void}\n     */\n    const increaseSharedAndStoreOptimizationEntry = entry => {\n      if (entry.children !== undefined) {\n        entry.children.forEach(increaseSharedAndStoreOptimizationEntry);\n      }\n\n      entry.shared++;\n      storeOptimizationEntry(entry);\n    };\n    /**\n     * @param {SnapshotOptimizationEntry} entry optimization entry\n     * @returns {void}\n     */\n\n\n    const storeOptimizationEntry = entry => {\n      for (const path of entry.snapshotContent) {\n        const old = this._map.get(path);\n\n        if (old.shared < entry.shared) {\n          this._map.set(path, entry);\n        }\n\n        capturedFiles.delete(path);\n      }\n    };\n    /** @type {SnapshotOptimizationEntry} */\n\n\n    let newOptimizationEntry = undefined;\n    const capturedFilesSize = capturedFiles.size;\n    /** @type {Set<SnapshotOptimizationEntry> | undefined} */\n\n    const optimizationEntries = new Set();\n\n    for (const path of capturedFiles) {\n      const optimizationEntry = this._map.get(path);\n\n      if (optimizationEntry === undefined) {\n        if (newOptimizationEntry === undefined) {\n          newOptimizationEntry = {\n            snapshot: newSnapshot,\n            shared: 0,\n            snapshotContent: undefined,\n            children: undefined\n          };\n        }\n\n        this._map.set(path, newOptimizationEntry);\n\n        continue;\n      } else {\n        optimizationEntries.add(optimizationEntry);\n      }\n    }\n\n    optimizationEntries: for (const optimizationEntry of optimizationEntries) {\n      const snapshot = optimizationEntry.snapshot;\n\n      if (optimizationEntry.shared > 0) {\n        // It's a shared snapshot\n        // We can't change it, so we can only use it when all files match\n        // and startTime is compatible\n        if (this._useStartTime && newSnapshot.startTime && (!snapshot.startTime || snapshot.startTime > newSnapshot.startTime)) {\n          continue;\n        }\n\n        const nonSharedFiles = new Set();\n        const snapshotContent = optimizationEntry.snapshotContent;\n\n        const snapshotEntries = this._get(snapshot);\n\n        for (const path of snapshotContent) {\n          if (!capturedFiles.has(path)) {\n            if (!snapshotEntries.has(path)) {\n              // File is not shared and can't be removed from the snapshot\n              // because it's in a child of the snapshot\n              continue optimizationEntries;\n            }\n\n            nonSharedFiles.add(path);\n            continue;\n          }\n        }\n\n        if (nonSharedFiles.size === 0) {\n          // The complete snapshot is shared\n          // add it as child\n          newSnapshot.addChild(snapshot);\n          increaseSharedAndStoreOptimizationEntry(optimizationEntry);\n          this._statReusedSharedSnapshots++;\n        } else {\n          // Only a part of the snapshot is shared\n          const sharedCount = snapshotContent.size - nonSharedFiles.size;\n\n          if (sharedCount < MIN_COMMON_SNAPSHOT_SIZE) {\n            // Common part it too small\n            continue optimizationEntries;\n          } // Extract common timestamps from both snapshots\n\n\n          let commonMap;\n\n          if (this._isSet) {\n            commonMap = new Set();\n\n            for (const path of\n            /** @type {Set<string>} */\n            snapshotEntries) {\n              if (nonSharedFiles.has(path)) continue;\n              commonMap.add(path);\n              snapshotEntries.delete(path);\n            }\n          } else {\n            commonMap = new Map();\n            const map =\n            /** @type {Map<string, T>} */\n            snapshotEntries;\n\n            for (const [path, value] of map) {\n              if (nonSharedFiles.has(path)) continue;\n              commonMap.set(path, value);\n              snapshotEntries.delete(path);\n            }\n          } // Create and attach snapshot\n\n\n          const commonSnapshot = new Snapshot();\n\n          if (this._useStartTime) {\n            commonSnapshot.setMergedStartTime(newSnapshot.startTime, snapshot);\n          }\n\n          this._set(commonSnapshot, commonMap);\n\n          newSnapshot.addChild(commonSnapshot);\n          snapshot.addChild(commonSnapshot); // Create optimization entry\n\n          const newEntry = {\n            snapshot: commonSnapshot,\n            shared: optimizationEntry.shared + 1,\n            snapshotContent: new Set(commonMap.keys()),\n            children: undefined\n          };\n          if (optimizationEntry.children === undefined) optimizationEntry.children = new Set();\n          optimizationEntry.children.add(newEntry);\n          storeOptimizationEntry(newEntry);\n          this._statSharedSnapshots++;\n        }\n      } else {\n        // It's a unshared snapshot\n        // We can extract a common shared snapshot\n        // with all common files\n        const snapshotEntries = this._get(snapshot);\n\n        if (snapshotEntries === undefined) {\n          // Incomplete snapshot, that can't be used\n          continue optimizationEntries;\n        }\n\n        let commonMap;\n\n        if (this._isSet) {\n          commonMap = new Set();\n          const set =\n          /** @type {Set<string>} */\n          snapshotEntries;\n\n          if (capturedFiles.size < set.size) {\n            for (const path of capturedFiles) {\n              if (set.has(path)) commonMap.add(path);\n            }\n          } else {\n            for (const path of set) {\n              if (capturedFiles.has(path)) commonMap.add(path);\n            }\n          }\n        } else {\n          commonMap = new Map();\n          const map =\n          /** @type {Map<string, T>} */\n          snapshotEntries;\n\n          for (const path of capturedFiles) {\n            const ts = map.get(path);\n            if (ts === undefined) continue;\n            commonMap.set(path, ts);\n          }\n        }\n\n        if (commonMap.size < MIN_COMMON_SNAPSHOT_SIZE) {\n          // Common part it too small\n          continue optimizationEntries;\n        } // Create and attach snapshot\n\n\n        const commonSnapshot = new Snapshot();\n\n        if (this._useStartTime) {\n          commonSnapshot.setMergedStartTime(newSnapshot.startTime, snapshot);\n        }\n\n        this._set(commonSnapshot, commonMap);\n\n        newSnapshot.addChild(commonSnapshot);\n        snapshot.addChild(commonSnapshot); // Remove files from snapshot\n\n        for (const path of commonMap.keys()) snapshotEntries.delete(path);\n\n        const sharedCount = commonMap.size;\n        this._statItemsUnshared -= sharedCount;\n        this._statItemsShared += sharedCount; // Create optimization entry\n\n        storeOptimizationEntry({\n          snapshot: commonSnapshot,\n          shared: 2,\n          snapshotContent: new Set(commonMap.keys()),\n          children: undefined\n        });\n        this._statSharedSnapshots++;\n      }\n    }\n\n    const unshared = capturedFiles.size;\n    this._statItemsUnshared += unshared;\n    this._statItemsShared += capturedFilesSize - unshared;\n  }\n\n}\n\nconst parseString = str => {\n  if (str[0] === \"'\") str = `\"${str.slice(1, -1).replace(/\"/g, '\\\\\"')}\"`;\n  return JSON.parse(str);\n};\n/* istanbul ignore next */\n\n/**\n * @param {number} mtime mtime\n */\n\n\nconst applyMtime = mtime => {\n  if (FS_ACCURACY > 1 && mtime % 2 !== 0) FS_ACCURACY = 1;else if (FS_ACCURACY > 10 && mtime % 20 !== 0) FS_ACCURACY = 10;else if (FS_ACCURACY > 100 && mtime % 200 !== 0) FS_ACCURACY = 100;else if (FS_ACCURACY > 1000 && mtime % 2000 !== 0) FS_ACCURACY = 1000;\n};\n/**\n * @template T\n * @template K\n * @param {Map<T, K>} a source map\n * @param {Map<T, K>} b joining map\n * @returns {Map<T, K>} joined map\n */\n\n\nconst mergeMaps = (a, b) => {\n  if (!b || b.size === 0) return a;\n  if (!a || a.size === 0) return b;\n  const map = new Map(a);\n\n  for (const [key, value] of b) {\n    map.set(key, value);\n  }\n\n  return map;\n};\n/**\n * @template T\n * @template K\n * @param {Set<T, K>} a source map\n * @param {Set<T, K>} b joining map\n * @returns {Set<T, K>} joined map\n */\n\n\nconst mergeSets = (a, b) => {\n  if (!b || b.size === 0) return a;\n  if (!a || a.size === 0) return b;\n  const map = new Set(a);\n\n  for (const item of b) {\n    map.add(item);\n  }\n\n  return map;\n};\n/**\n * Finding file or directory to manage\n * @param {string} managedPath path that is managing by {@link FileSystemInfo}\n * @param {string} path path to file or directory\n * @returns {string|null} managed item\n * @example\n * getManagedItem(\n *   '/Users/user/my-project/node_modules/',\n *   '/Users/user/my-project/node_modules/package/index.js'\n * ) === '/Users/user/my-project/node_modules/package'\n * getManagedItem(\n *   '/Users/user/my-project/node_modules/',\n *   '/Users/user/my-project/node_modules/package1/node_modules/package2'\n * ) === '/Users/user/my-project/node_modules/package1/node_modules/package2'\n * getManagedItem(\n *   '/Users/user/my-project/node_modules/',\n *   '/Users/user/my-project/node_modules/.bin/script.js'\n * ) === null // hidden files are disallowed as managed items\n * getManagedItem(\n *   '/Users/user/my-project/node_modules/',\n *   '/Users/user/my-project/node_modules/package'\n * ) === '/Users/user/my-project/node_modules/package'\n */\n\n\nconst getManagedItem = (managedPath, path) => {\n  let i = managedPath.length;\n  let slashes = 1;\n  let startingPosition = true;\n\n  loop: while (i < path.length) {\n    switch (path.charCodeAt(i)) {\n      case 47: // slash\n\n      case 92:\n        // backslash\n        if (--slashes === 0) break loop;\n        startingPosition = true;\n        break;\n\n      case 46:\n        // .\n        // hidden files are disallowed as managed items\n        // it's probably .yarn-integrity or .cache\n        if (startingPosition) return null;\n        break;\n\n      case 64:\n        // @\n        if (!startingPosition) return null;\n        slashes++;\n        break;\n\n      default:\n        startingPosition = false;\n        break;\n    }\n\n    i++;\n  }\n\n  if (i === path.length) slashes--; // return null when path is incomplete\n\n  if (slashes !== 0) return null; // if (path.slice(i + 1, i + 13) === \"node_modules\")\n\n  if (path.length >= i + 13 && path.charCodeAt(i + 1) === 110 && path.charCodeAt(i + 2) === 111 && path.charCodeAt(i + 3) === 100 && path.charCodeAt(i + 4) === 101 && path.charCodeAt(i + 5) === 95 && path.charCodeAt(i + 6) === 109 && path.charCodeAt(i + 7) === 111 && path.charCodeAt(i + 8) === 100 && path.charCodeAt(i + 9) === 117 && path.charCodeAt(i + 10) === 108 && path.charCodeAt(i + 11) === 101 && path.charCodeAt(i + 12) === 115) {\n    // if this is the end of the path\n    if (path.length === i + 13) {\n      // return the node_modules directory\n      // it's special\n      return path;\n    }\n\n    const c = path.charCodeAt(i + 13); // if next symbol is slash or backslash\n\n    if (c === 47 || c === 92) {\n      // Managed subpath\n      return getManagedItem(path.slice(0, i + 14), path);\n    }\n  }\n\n  return path.slice(0, i);\n};\n/**\n * @template {ContextFileSystemInfoEntry | ContextTimestampAndHash} T\n * @param {T} entry entry\n * @returns {T[\"resolved\"] | undefined} the resolved entry\n */\n\n\nconst getResolvedTimestamp = entry => {\n  if (entry === null) return null;\n  if (entry.resolved !== undefined) return entry.resolved;\n  return entry.symlinks === undefined ? entry : undefined;\n};\n/**\n * @param {ContextHash} entry entry\n * @returns {string | undefined} the resolved entry\n */\n\n\nconst getResolvedHash = entry => {\n  if (entry === null) return null;\n  if (entry.resolved !== undefined) return entry.resolved;\n  return entry.symlinks === undefined ? entry.hash : undefined;\n};\n\nconst addAll = (source, target) => {\n  for (const key of source) target.add(key);\n};\n/**\n * Used to access information about the filesystem in a cached way\n */\n\n\nclass FileSystemInfo {\n  /**\n   * @param {InputFileSystem} fs file system\n   * @param {Object} options options\n   * @param {Iterable<string | RegExp>=} options.managedPaths paths that are only managed by a package manager\n   * @param {Iterable<string | RegExp>=} options.immutablePaths paths that are immutable\n   * @param {Logger=} options.logger logger used to log invalid snapshots\n   * @param {string | Hash=} options.hashFunction the hash function to use\n   */\n  constructor(fs) {\n    let {\n      managedPaths = [],\n      immutablePaths = [],\n      logger,\n      hashFunction = \"md4\"\n    } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    this.fs = fs;\n    this.logger = logger;\n    this._remainingLogs = logger ? 40 : 0;\n    this._loggedPaths = logger ? new Set() : undefined;\n    this._hashFunction = hashFunction;\n    /** @type {WeakMap<Snapshot, boolean | (function(WebpackError=, boolean=): void)[]>} */\n\n    this._snapshotCache = new WeakMap();\n    this._fileTimestampsOptimization = new SnapshotOptimization(s => s.hasFileTimestamps(), s => s.fileTimestamps, (s, v) => s.setFileTimestamps(v));\n    this._fileHashesOptimization = new SnapshotOptimization(s => s.hasFileHashes(), s => s.fileHashes, (s, v) => s.setFileHashes(v), false);\n    this._fileTshsOptimization = new SnapshotOptimization(s => s.hasFileTshs(), s => s.fileTshs, (s, v) => s.setFileTshs(v));\n    this._contextTimestampsOptimization = new SnapshotOptimization(s => s.hasContextTimestamps(), s => s.contextTimestamps, (s, v) => s.setContextTimestamps(v));\n    this._contextHashesOptimization = new SnapshotOptimization(s => s.hasContextHashes(), s => s.contextHashes, (s, v) => s.setContextHashes(v), false);\n    this._contextTshsOptimization = new SnapshotOptimization(s => s.hasContextTshs(), s => s.contextTshs, (s, v) => s.setContextTshs(v));\n    this._missingExistenceOptimization = new SnapshotOptimization(s => s.hasMissingExistence(), s => s.missingExistence, (s, v) => s.setMissingExistence(v), false);\n    this._managedItemInfoOptimization = new SnapshotOptimization(s => s.hasManagedItemInfo(), s => s.managedItemInfo, (s, v) => s.setManagedItemInfo(v), false);\n    this._managedFilesOptimization = new SnapshotOptimization(s => s.hasManagedFiles(), s => s.managedFiles, (s, v) => s.setManagedFiles(v), false, true);\n    this._managedContextsOptimization = new SnapshotOptimization(s => s.hasManagedContexts(), s => s.managedContexts, (s, v) => s.setManagedContexts(v), false, true);\n    this._managedMissingOptimization = new SnapshotOptimization(s => s.hasManagedMissing(), s => s.managedMissing, (s, v) => s.setManagedMissing(v), false, true);\n    /** @type {StackedCacheMap<string, FileSystemInfoEntry | \"ignore\" | null>} */\n\n    this._fileTimestamps = new StackedCacheMap();\n    /** @type {Map<string, string>} */\n\n    this._fileHashes = new Map();\n    /** @type {Map<string, TimestampAndHash | string>} */\n\n    this._fileTshs = new Map();\n    /** @type {StackedCacheMap<string, ContextFileSystemInfoEntry | \"ignore\" | null>} */\n\n    this._contextTimestamps = new StackedCacheMap();\n    /** @type {Map<string, ContextHash>} */\n\n    this._contextHashes = new Map();\n    /** @type {Map<string, ContextTimestampAndHash>} */\n\n    this._contextTshs = new Map();\n    /** @type {Map<string, string>} */\n\n    this._managedItems = new Map();\n    /** @type {AsyncQueue<string, string, FileSystemInfoEntry | null>} */\n\n    this.fileTimestampQueue = new AsyncQueue({\n      name: \"file timestamp\",\n      parallelism: 30,\n      processor: this._readFileTimestamp.bind(this)\n    });\n    /** @type {AsyncQueue<string, string, string | null>} */\n\n    this.fileHashQueue = new AsyncQueue({\n      name: \"file hash\",\n      parallelism: 10,\n      processor: this._readFileHash.bind(this)\n    });\n    /** @type {AsyncQueue<string, string, ContextFileSystemInfoEntry | null>} */\n\n    this.contextTimestampQueue = new AsyncQueue({\n      name: \"context timestamp\",\n      parallelism: 2,\n      processor: this._readContextTimestamp.bind(this)\n    });\n    /** @type {AsyncQueue<string, string, ContextHash | null>} */\n\n    this.contextHashQueue = new AsyncQueue({\n      name: \"context hash\",\n      parallelism: 2,\n      processor: this._readContextHash.bind(this)\n    });\n    /** @type {AsyncQueue<string, string, ContextTimestampAndHash | null>} */\n\n    this.contextTshQueue = new AsyncQueue({\n      name: \"context hash and timestamp\",\n      parallelism: 2,\n      processor: this._readContextTimestampAndHash.bind(this)\n    });\n    /** @type {AsyncQueue<string, string, string | null>} */\n\n    this.managedItemQueue = new AsyncQueue({\n      name: \"managed item info\",\n      parallelism: 10,\n      processor: this._getManagedItemInfo.bind(this)\n    });\n    /** @type {AsyncQueue<string, string, Set<string>>} */\n\n    this.managedItemDirectoryQueue = new AsyncQueue({\n      name: \"managed item directory info\",\n      parallelism: 10,\n      processor: this._getManagedItemDirectoryInfo.bind(this)\n    });\n    this.managedPaths = Array.from(managedPaths);\n    this.managedPathsWithSlash =\n    /** @type {string[]} */\n    this.managedPaths.filter(p => typeof p === \"string\").map(p => join(fs, p, \"_\").slice(0, -1));\n    this.managedPathsRegExps =\n    /** @type {RegExp[]} */\n    this.managedPaths.filter(p => typeof p !== \"string\");\n    this.immutablePaths = Array.from(immutablePaths);\n    this.immutablePathsWithSlash =\n    /** @type {string[]} */\n    this.immutablePaths.filter(p => typeof p === \"string\").map(p => join(fs, p, \"_\").slice(0, -1));\n    this.immutablePathsRegExps =\n    /** @type {RegExp[]} */\n    this.immutablePaths.filter(p => typeof p !== \"string\");\n    this._cachedDeprecatedFileTimestamps = undefined;\n    this._cachedDeprecatedContextTimestamps = undefined;\n    this._warnAboutExperimentalEsmTracking = false;\n    this._statCreatedSnapshots = 0;\n    this._statTestedSnapshotsCached = 0;\n    this._statTestedSnapshotsNotCached = 0;\n    this._statTestedChildrenCached = 0;\n    this._statTestedChildrenNotCached = 0;\n    this._statTestedEntries = 0;\n  }\n\n  logStatistics() {\n    const logWhenMessage = (header, message) => {\n      if (message) {\n        this.logger.log(`${header}: ${message}`);\n      }\n    };\n\n    this.logger.log(`${this._statCreatedSnapshots} new snapshots created`);\n    this.logger.log(`${this._statTestedSnapshotsNotCached && Math.round(this._statTestedSnapshotsNotCached * 100 / (this._statTestedSnapshotsCached + this._statTestedSnapshotsNotCached))}% root snapshot uncached (${this._statTestedSnapshotsNotCached} / ${this._statTestedSnapshotsCached + this._statTestedSnapshotsNotCached})`);\n    this.logger.log(`${this._statTestedChildrenNotCached && Math.round(this._statTestedChildrenNotCached * 100 / (this._statTestedChildrenCached + this._statTestedChildrenNotCached))}% children snapshot uncached (${this._statTestedChildrenNotCached} / ${this._statTestedChildrenCached + this._statTestedChildrenNotCached})`);\n    this.logger.log(`${this._statTestedEntries} entries tested`);\n    this.logger.log(`File info in cache: ${this._fileTimestamps.size} timestamps ${this._fileHashes.size} hashes ${this._fileTshs.size} timestamp hash combinations`);\n    logWhenMessage(`File timestamp snapshot optimization`, this._fileTimestampsOptimization.getStatisticMessage());\n    logWhenMessage(`File hash snapshot optimization`, this._fileHashesOptimization.getStatisticMessage());\n    logWhenMessage(`File timestamp hash combination snapshot optimization`, this._fileTshsOptimization.getStatisticMessage());\n    this.logger.log(`Directory info in cache: ${this._contextTimestamps.size} timestamps ${this._contextHashes.size} hashes ${this._contextTshs.size} timestamp hash combinations`);\n    logWhenMessage(`Directory timestamp snapshot optimization`, this._contextTimestampsOptimization.getStatisticMessage());\n    logWhenMessage(`Directory hash snapshot optimization`, this._contextHashesOptimization.getStatisticMessage());\n    logWhenMessage(`Directory timestamp hash combination snapshot optimization`, this._contextTshsOptimization.getStatisticMessage());\n    logWhenMessage(`Missing items snapshot optimization`, this._missingExistenceOptimization.getStatisticMessage());\n    this.logger.log(`Managed items info in cache: ${this._managedItems.size} items`);\n    logWhenMessage(`Managed items snapshot optimization`, this._managedItemInfoOptimization.getStatisticMessage());\n    logWhenMessage(`Managed files snapshot optimization`, this._managedFilesOptimization.getStatisticMessage());\n    logWhenMessage(`Managed contexts snapshot optimization`, this._managedContextsOptimization.getStatisticMessage());\n    logWhenMessage(`Managed missing snapshot optimization`, this._managedMissingOptimization.getStatisticMessage());\n  }\n\n  _log(path, reason) {\n    const key = path + reason;\n    if (this._loggedPaths.has(key)) return;\n\n    this._loggedPaths.add(key);\n\n    for (var _len = arguments.length, args = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {\n      args[_key - 2] = arguments[_key];\n    }\n\n    this.logger.debug(`${path} invalidated because ${reason}`, ...args);\n\n    if (--this._remainingLogs === 0) {\n      this.logger.debug(\"Logging limit has been reached and no further logging will be emitted by FileSystemInfo\");\n    }\n  }\n\n  clear() {\n    this._remainingLogs = this.logger ? 40 : 0;\n    if (this._loggedPaths !== undefined) this._loggedPaths.clear();\n    this._snapshotCache = new WeakMap();\n\n    this._fileTimestampsOptimization.clear();\n\n    this._fileHashesOptimization.clear();\n\n    this._fileTshsOptimization.clear();\n\n    this._contextTimestampsOptimization.clear();\n\n    this._contextHashesOptimization.clear();\n\n    this._contextTshsOptimization.clear();\n\n    this._missingExistenceOptimization.clear();\n\n    this._managedItemInfoOptimization.clear();\n\n    this._managedFilesOptimization.clear();\n\n    this._managedContextsOptimization.clear();\n\n    this._managedMissingOptimization.clear();\n\n    this._fileTimestamps.clear();\n\n    this._fileHashes.clear();\n\n    this._fileTshs.clear();\n\n    this._contextTimestamps.clear();\n\n    this._contextHashes.clear();\n\n    this._contextTshs.clear();\n\n    this._managedItems.clear();\n\n    this._managedItems.clear();\n\n    this._cachedDeprecatedFileTimestamps = undefined;\n    this._cachedDeprecatedContextTimestamps = undefined;\n    this._statCreatedSnapshots = 0;\n    this._statTestedSnapshotsCached = 0;\n    this._statTestedSnapshotsNotCached = 0;\n    this._statTestedChildrenCached = 0;\n    this._statTestedChildrenNotCached = 0;\n    this._statTestedEntries = 0;\n  }\n  /**\n   * @param {ReadonlyMap<string, FileSystemInfoEntry | \"ignore\" | null>} map timestamps\n   * @param {boolean=} immutable if 'map' is immutable and FileSystemInfo can keep referencing it\n   * @returns {void}\n   */\n\n\n  addFileTimestamps(map, immutable) {\n    this._fileTimestamps.addAll(map, immutable);\n\n    this._cachedDeprecatedFileTimestamps = undefined;\n  }\n  /**\n   * @param {ReadonlyMap<string, FileSystemInfoEntry | \"ignore\" | null>} map timestamps\n   * @param {boolean=} immutable if 'map' is immutable and FileSystemInfo can keep referencing it\n   * @returns {void}\n   */\n\n\n  addContextTimestamps(map, immutable) {\n    this._contextTimestamps.addAll(map, immutable);\n\n    this._cachedDeprecatedContextTimestamps = undefined;\n  }\n  /**\n   * @param {string} path file path\n   * @param {function((WebpackError | null)=, (FileSystemInfoEntry | \"ignore\" | null)=): void} callback callback function\n   * @returns {void}\n   */\n\n\n  getFileTimestamp(path, callback) {\n    const cache = this._fileTimestamps.get(path);\n\n    if (cache !== undefined) return callback(null, cache);\n    this.fileTimestampQueue.add(path, callback);\n  }\n  /**\n   * @param {string} path context path\n   * @param {function((WebpackError | null)=, (ResolvedContextFileSystemInfoEntry | \"ignore\" | null)=): void} callback callback function\n   * @returns {void}\n   */\n\n\n  getContextTimestamp(path, callback) {\n    const cache = this._contextTimestamps.get(path);\n\n    if (cache !== undefined) {\n      if (cache === \"ignore\") return callback(null, \"ignore\");\n      const resolved = getResolvedTimestamp(cache);\n      if (resolved !== undefined) return callback(null, resolved);\n      return this._resolveContextTimestamp(cache, callback);\n    }\n\n    this.contextTimestampQueue.add(path, (err, entry) => {\n      if (err) return callback(err);\n      const resolved = getResolvedTimestamp(entry);\n      if (resolved !== undefined) return callback(null, resolved);\n\n      this._resolveContextTimestamp(entry, callback);\n    });\n  }\n  /**\n   * @param {string} path context path\n   * @param {function((WebpackError | null)=, (ContextFileSystemInfoEntry | \"ignore\" | null)=): void} callback callback function\n   * @returns {void}\n   */\n\n\n  _getUnresolvedContextTimestamp(path, callback) {\n    const cache = this._contextTimestamps.get(path);\n\n    if (cache !== undefined) return callback(null, cache);\n    this.contextTimestampQueue.add(path, callback);\n  }\n  /**\n   * @param {string} path file path\n   * @param {function((WebpackError | null)=, string=): void} callback callback function\n   * @returns {void}\n   */\n\n\n  getFileHash(path, callback) {\n    const cache = this._fileHashes.get(path);\n\n    if (cache !== undefined) return callback(null, cache);\n    this.fileHashQueue.add(path, callback);\n  }\n  /**\n   * @param {string} path context path\n   * @param {function((WebpackError | null)=, string=): void} callback callback function\n   * @returns {void}\n   */\n\n\n  getContextHash(path, callback) {\n    const cache = this._contextHashes.get(path);\n\n    if (cache !== undefined) {\n      const resolved = getResolvedHash(cache);\n      if (resolved !== undefined) return callback(null, resolved);\n      return this._resolveContextHash(cache, callback);\n    }\n\n    this.contextHashQueue.add(path, (err, entry) => {\n      if (err) return callback(err);\n      const resolved = getResolvedHash(entry);\n      if (resolved !== undefined) return callback(null, resolved);\n\n      this._resolveContextHash(entry, callback);\n    });\n  }\n  /**\n   * @param {string} path context path\n   * @param {function((WebpackError | null)=, ContextHash=): void} callback callback function\n   * @returns {void}\n   */\n\n\n  _getUnresolvedContextHash(path, callback) {\n    const cache = this._contextHashes.get(path);\n\n    if (cache !== undefined) return callback(null, cache);\n    this.contextHashQueue.add(path, callback);\n  }\n  /**\n   * @param {string} path context path\n   * @param {function((WebpackError | null)=, ResolvedContextTimestampAndHash=): void} callback callback function\n   * @returns {void}\n   */\n\n\n  getContextTsh(path, callback) {\n    const cache = this._contextTshs.get(path);\n\n    if (cache !== undefined) {\n      const resolved = getResolvedTimestamp(cache);\n      if (resolved !== undefined) return callback(null, resolved);\n      return this._resolveContextTsh(cache, callback);\n    }\n\n    this.contextTshQueue.add(path, (err, entry) => {\n      if (err) return callback(err);\n      const resolved = getResolvedTimestamp(entry);\n      if (resolved !== undefined) return callback(null, resolved);\n\n      this._resolveContextTsh(entry, callback);\n    });\n  }\n  /**\n   * @param {string} path context path\n   * @param {function((WebpackError | null)=, ContextTimestampAndHash=): void} callback callback function\n   * @returns {void}\n   */\n\n\n  _getUnresolvedContextTsh(path, callback) {\n    const cache = this._contextTshs.get(path);\n\n    if (cache !== undefined) return callback(null, cache);\n    this.contextTshQueue.add(path, callback);\n  }\n\n  _createBuildDependenciesResolvers() {\n    const resolveContext = createResolver({\n      resolveToContext: true,\n      exportsFields: [],\n      fileSystem: this.fs\n    });\n    const resolveCjs = createResolver({\n      extensions: [\".js\", \".json\", \".node\"],\n      conditionNames: [\"require\", \"node\"],\n      exportsFields: [\"exports\"],\n      fileSystem: this.fs\n    });\n    const resolveCjsAsChild = createResolver({\n      extensions: [\".js\", \".json\", \".node\"],\n      conditionNames: [\"require\", \"node\"],\n      exportsFields: [],\n      fileSystem: this.fs\n    });\n    const resolveEsm = createResolver({\n      extensions: [\".js\", \".json\", \".node\"],\n      fullySpecified: true,\n      conditionNames: [\"import\", \"node\"],\n      exportsFields: [\"exports\"],\n      fileSystem: this.fs\n    });\n    return {\n      resolveContext,\n      resolveEsm,\n      resolveCjs,\n      resolveCjsAsChild\n    };\n  }\n  /**\n   * @param {string} context context directory\n   * @param {Iterable<string>} deps dependencies\n   * @param {function((Error | null)=, ResolveBuildDependenciesResult=): void} callback callback function\n   * @returns {void}\n   */\n\n\n  resolveBuildDependencies(context, deps, callback) {\n    const {\n      resolveContext,\n      resolveEsm,\n      resolveCjs,\n      resolveCjsAsChild\n    } = this._createBuildDependenciesResolvers();\n    /** @type {Set<string>} */\n\n\n    const files = new Set();\n    /** @type {Set<string>} */\n\n    const fileSymlinks = new Set();\n    /** @type {Set<string>} */\n\n    const directories = new Set();\n    /** @type {Set<string>} */\n\n    const directorySymlinks = new Set();\n    /** @type {Set<string>} */\n\n    const missing = new Set();\n    /** @type {Set<string>} */\n\n    const resolveFiles = new Set();\n    /** @type {Set<string>} */\n\n    const resolveDirectories = new Set();\n    /** @type {Set<string>} */\n\n    const resolveMissing = new Set();\n    /** @type {Map<string, string | false>} */\n\n    const resolveResults = new Map();\n    const invalidResolveResults = new Set();\n    const resolverContext = {\n      fileDependencies: resolveFiles,\n      contextDependencies: resolveDirectories,\n      missingDependencies: resolveMissing\n    };\n\n    const expectedToString = expected => {\n      return expected ? ` (expected ${expected})` : \"\";\n    };\n\n    const jobToString = job => {\n      switch (job.type) {\n        case RBDT_RESOLVE_CJS:\n          return `resolve commonjs ${job.path}${expectedToString(job.expected)}`;\n\n        case RBDT_RESOLVE_ESM:\n          return `resolve esm ${job.path}${expectedToString(job.expected)}`;\n\n        case RBDT_RESOLVE_DIRECTORY:\n          return `resolve directory ${job.path}`;\n\n        case RBDT_RESOLVE_CJS_FILE:\n          return `resolve commonjs file ${job.path}${expectedToString(job.expected)}`;\n\n        case RBDT_RESOLVE_ESM_FILE:\n          return `resolve esm file ${job.path}${expectedToString(job.expected)}`;\n\n        case RBDT_DIRECTORY:\n          return `directory ${job.path}`;\n\n        case RBDT_FILE:\n          return `file ${job.path}`;\n\n        case RBDT_DIRECTORY_DEPENDENCIES:\n          return `directory dependencies ${job.path}`;\n\n        case RBDT_FILE_DEPENDENCIES:\n          return `file dependencies ${job.path}`;\n      }\n\n      return `unknown ${job.type} ${job.path}`;\n    };\n\n    const pathToString = job => {\n      let result = ` at ${jobToString(job)}`;\n      job = job.issuer;\n\n      while (job !== undefined) {\n        result += `\\n at ${jobToString(job)}`;\n        job = job.issuer;\n      }\n\n      return result;\n    };\n\n    processAsyncTree(Array.from(deps, dep => ({\n      type: RBDT_RESOLVE_CJS,\n      context,\n      path: dep,\n      expected: undefined,\n      issuer: undefined\n    })), 20, (job, push, callback) => {\n      const {\n        type,\n        context,\n        path,\n        expected\n      } = job;\n\n      const resolveDirectory = path => {\n        const key = `d\\n${context}\\n${path}`;\n\n        if (resolveResults.has(key)) {\n          return callback();\n        }\n\n        resolveResults.set(key, undefined);\n        resolveContext(context, path, resolverContext, (err, _, result) => {\n          if (err) {\n            if (expected === false) {\n              resolveResults.set(key, false);\n              return callback();\n            }\n\n            invalidResolveResults.add(key);\n            err.message += `\\nwhile resolving '${path}' in ${context} to a directory`;\n            return callback(err);\n          }\n\n          const resultPath = result.path;\n          resolveResults.set(key, resultPath);\n          push({\n            type: RBDT_DIRECTORY,\n            context: undefined,\n            path: resultPath,\n            expected: undefined,\n            issuer: job\n          });\n          callback();\n        });\n      };\n\n      const resolveFile = (path, symbol, resolve) => {\n        const key = `${symbol}\\n${context}\\n${path}`;\n\n        if (resolveResults.has(key)) {\n          return callback();\n        }\n\n        resolveResults.set(key, undefined);\n        resolve(context, path, resolverContext, (err, _, result) => {\n          if (typeof expected === \"string\") {\n            if (!err && result && result.path === expected) {\n              resolveResults.set(key, result.path);\n            } else {\n              invalidResolveResults.add(key);\n              this.logger.warn(`Resolving '${path}' in ${context} for build dependencies doesn't lead to expected result '${expected}', but to '${err || result && result.path}' instead. Resolving dependencies are ignored for this path.\\n${pathToString(job)}`);\n            }\n          } else {\n            if (err) {\n              if (expected === false) {\n                resolveResults.set(key, false);\n                return callback();\n              }\n\n              invalidResolveResults.add(key);\n              err.message += `\\nwhile resolving '${path}' in ${context} as file\\n${pathToString(job)}`;\n              return callback(err);\n            }\n\n            const resultPath = result.path;\n            resolveResults.set(key, resultPath);\n            push({\n              type: RBDT_FILE,\n              context: undefined,\n              path: resultPath,\n              expected: undefined,\n              issuer: job\n            });\n          }\n\n          callback();\n        });\n      };\n\n      switch (type) {\n        case RBDT_RESOLVE_CJS:\n          {\n            const isDirectory = /[\\\\/]$/.test(path);\n\n            if (isDirectory) {\n              resolveDirectory(path.slice(0, path.length - 1));\n            } else {\n              resolveFile(path, \"f\", resolveCjs);\n            }\n\n            break;\n          }\n\n        case RBDT_RESOLVE_ESM:\n          {\n            const isDirectory = /[\\\\/]$/.test(path);\n\n            if (isDirectory) {\n              resolveDirectory(path.slice(0, path.length - 1));\n            } else {\n              resolveFile(path);\n            }\n\n            break;\n          }\n\n        case RBDT_RESOLVE_DIRECTORY:\n          {\n            resolveDirectory(path);\n            break;\n          }\n\n        case RBDT_RESOLVE_CJS_FILE:\n          {\n            resolveFile(path, \"f\", resolveCjs);\n            break;\n          }\n\n        case RBDT_RESOLVE_CJS_FILE_AS_CHILD:\n          {\n            resolveFile(path, \"c\", resolveCjsAsChild);\n            break;\n          }\n\n        case RBDT_RESOLVE_ESM_FILE:\n          {\n            resolveFile(path, \"e\", resolveEsm);\n            break;\n          }\n\n        case RBDT_FILE:\n          {\n            if (files.has(path)) {\n              callback();\n              break;\n            }\n\n            files.add(path);\n            this.fs.realpath(path, (err, _realPath) => {\n              if (err) return callback(err);\n              const realPath =\n              /** @type {string} */\n              _realPath;\n\n              if (realPath !== path) {\n                fileSymlinks.add(path);\n                resolveFiles.add(path);\n                if (files.has(realPath)) return callback();\n                files.add(realPath);\n              }\n\n              push({\n                type: RBDT_FILE_DEPENDENCIES,\n                context: undefined,\n                path: realPath,\n                expected: undefined,\n                issuer: job\n              });\n              callback();\n            });\n            break;\n          }\n\n        case RBDT_DIRECTORY:\n          {\n            if (directories.has(path)) {\n              callback();\n              break;\n            }\n\n            directories.add(path);\n            this.fs.realpath(path, (err, _realPath) => {\n              if (err) return callback(err);\n              const realPath =\n              /** @type {string} */\n              _realPath;\n\n              if (realPath !== path) {\n                directorySymlinks.add(path);\n                resolveFiles.add(path);\n                if (directories.has(realPath)) return callback();\n                directories.add(realPath);\n              }\n\n              push({\n                type: RBDT_DIRECTORY_DEPENDENCIES,\n                context: undefined,\n                path: realPath,\n                expected: undefined,\n                issuer: job\n              });\n              callback();\n            });\n            break;\n          }\n\n        case RBDT_FILE_DEPENDENCIES:\n          {\n            // Check for known files without dependencies\n            if (/\\.json5?$|\\.yarn-integrity$|yarn\\.lock$|\\.ya?ml/.test(path)) {\n              process.nextTick(callback);\n              break;\n            } // Check commonjs cache for the module\n\n            /** @type {NodeModule} */\n\n\n            const module = require.cache[path];\n\n            if (module && Array.isArray(module.children)) {\n              children: for (const child of module.children) {\n                let childPath = child.filename;\n\n                if (childPath) {\n                  push({\n                    type: RBDT_FILE,\n                    context: undefined,\n                    path: childPath,\n                    expected: undefined,\n                    issuer: job\n                  });\n                  const context = dirname(this.fs, path);\n\n                  for (const modulePath of module.paths) {\n                    if (childPath.startsWith(modulePath)) {\n                      let subPath = childPath.slice(modulePath.length + 1);\n                      const packageMatch = /^(@[^\\\\/]+[\\\\/])[^\\\\/]+/.exec(subPath);\n\n                      if (packageMatch) {\n                        push({\n                          type: RBDT_FILE,\n                          context: undefined,\n                          path: modulePath + childPath[modulePath.length] + packageMatch[0] + childPath[modulePath.length] + \"package.json\",\n                          expected: false,\n                          issuer: job\n                        });\n                      }\n\n                      let request = subPath.replace(/\\\\/g, \"/\");\n                      if (request.endsWith(\".js\")) request = request.slice(0, -3);\n                      push({\n                        type: RBDT_RESOLVE_CJS_FILE_AS_CHILD,\n                        context,\n                        path: request,\n                        expected: child.filename,\n                        issuer: job\n                      });\n                      continue children;\n                    }\n                  }\n\n                  let request = relative(this.fs, context, childPath);\n                  if (request.endsWith(\".js\")) request = request.slice(0, -3);\n                  request = request.replace(/\\\\/g, \"/\");\n                  if (!request.startsWith(\"../\")) request = `./${request}`;\n                  push({\n                    type: RBDT_RESOLVE_CJS_FILE,\n                    context,\n                    path: request,\n                    expected: child.filename,\n                    issuer: job\n                  });\n                }\n              }\n            } else if (supportsEsm && /\\.m?js$/.test(path)) {\n              if (!this._warnAboutExperimentalEsmTracking) {\n                this.logger.log(\"Node.js doesn't offer a (nice) way to introspect the ESM dependency graph yet.\\n\" + \"Until a full solution is available webpack uses an experimental ESM tracking based on parsing.\\n\" + \"As best effort webpack parses the ESM files to guess dependencies. But this can lead to expensive and incorrect tracking.\");\n                this._warnAboutExperimentalEsmTracking = true;\n              }\n\n              const lexer = require(\"es-module-lexer\");\n\n              lexer.init.then(() => {\n                this.fs.readFile(path, (err, content) => {\n                  if (err) return callback(err);\n\n                  try {\n                    const context = dirname(this.fs, path);\n                    const source = content.toString();\n                    const [imports] = lexer.parse(source);\n\n                    for (const imp of imports) {\n                      try {\n                        let dependency;\n\n                        if (imp.d === -1) {\n                          // import ... from \"...\"\n                          dependency = parseString(source.substring(imp.s - 1, imp.e + 1));\n                        } else if (imp.d > -1) {\n                          // import()\n                          let expr = source.substring(imp.s, imp.e).trim();\n                          dependency = parseString(expr);\n                        } else {\n                          // e.g. import.meta\n                          continue;\n                        } // we should not track Node.js build dependencies\n\n\n                        if (dependency.startsWith(\"node:\")) continue;\n                        if (builtinModules.has(dependency)) continue;\n                        push({\n                          type: RBDT_RESOLVE_ESM_FILE,\n                          context,\n                          path: dependency,\n                          expected: undefined,\n                          issuer: job\n                        });\n                      } catch (e) {\n                        this.logger.warn(`Parsing of ${path} for build dependencies failed at 'import(${source.substring(imp.s, imp.e)})'.\\n` + \"Build dependencies behind this expression are ignored and might cause incorrect cache invalidation.\");\n                        this.logger.debug(pathToString(job));\n                        this.logger.debug(e.stack);\n                      }\n                    }\n                  } catch (e) {\n                    this.logger.warn(`Parsing of ${path} for build dependencies failed and all dependencies of this file are ignored, which might cause incorrect cache invalidation..`);\n                    this.logger.debug(pathToString(job));\n                    this.logger.debug(e.stack);\n                  }\n\n                  process.nextTick(callback);\n                });\n              }, callback);\n              break;\n            } else {\n              this.logger.log(`Assuming ${path} has no dependencies as we were unable to assign it to any module system.`);\n              this.logger.debug(pathToString(job));\n            }\n\n            process.nextTick(callback);\n            break;\n          }\n\n        case RBDT_DIRECTORY_DEPENDENCIES:\n          {\n            const match = /(^.+[\\\\/]node_modules[\\\\/](?:@[^\\\\/]+[\\\\/])?[^\\\\/]+)/.exec(path);\n            const packagePath = match ? match[1] : path;\n            const packageJson = join(this.fs, packagePath, \"package.json\");\n            this.fs.readFile(packageJson, (err, content) => {\n              if (err) {\n                if (err.code === \"ENOENT\") {\n                  resolveMissing.add(packageJson);\n                  const parent = dirname(this.fs, packagePath);\n\n                  if (parent !== packagePath) {\n                    push({\n                      type: RBDT_DIRECTORY_DEPENDENCIES,\n                      context: undefined,\n                      path: parent,\n                      expected: undefined,\n                      issuer: job\n                    });\n                  }\n\n                  callback();\n                  return;\n                }\n\n                return callback(err);\n              }\n\n              resolveFiles.add(packageJson);\n              let packageData;\n\n              try {\n                packageData = JSON.parse(content.toString(\"utf-8\"));\n              } catch (e) {\n                return callback(e);\n              }\n\n              const depsObject = packageData.dependencies;\n              const optionalDepsObject = packageData.optionalDependencies;\n              const allDeps = new Set();\n              const optionalDeps = new Set();\n\n              if (typeof depsObject === \"object\" && depsObject) {\n                for (const dep of Object.keys(depsObject)) {\n                  allDeps.add(dep);\n                }\n              }\n\n              if (typeof optionalDepsObject === \"object\" && optionalDepsObject) {\n                for (const dep of Object.keys(optionalDepsObject)) {\n                  allDeps.add(dep);\n                  optionalDeps.add(dep);\n                }\n              }\n\n              for (const dep of allDeps) {\n                push({\n                  type: RBDT_RESOLVE_DIRECTORY,\n                  context: packagePath,\n                  path: dep,\n                  expected: !optionalDeps.has(dep),\n                  issuer: job\n                });\n              }\n\n              callback();\n            });\n            break;\n          }\n      }\n    }, err => {\n      if (err) return callback(err);\n\n      for (const l of fileSymlinks) files.delete(l);\n\n      for (const l of directorySymlinks) directories.delete(l);\n\n      for (const k of invalidResolveResults) resolveResults.delete(k);\n\n      callback(null, {\n        files,\n        directories,\n        missing,\n        resolveResults,\n        resolveDependencies: {\n          files: resolveFiles,\n          directories: resolveDirectories,\n          missing: resolveMissing\n        }\n      });\n    });\n  }\n  /**\n   * @param {Map<string, string | false>} resolveResults results from resolving\n   * @param {function((Error | null)=, boolean=): void} callback callback with true when resolveResults resolve the same way\n   * @returns {void}\n   */\n\n\n  checkResolveResultsValid(resolveResults, callback) {\n    const {\n      resolveCjs,\n      resolveCjsAsChild,\n      resolveEsm,\n      resolveContext\n    } = this._createBuildDependenciesResolvers();\n\n    asyncLib.eachLimit(resolveResults, 20, (_ref3, callback) => {\n      let [key, expectedResult] = _ref3;\n      const [type, context, path] = key.split(\"\\n\");\n\n      switch (type) {\n        case \"d\":\n          resolveContext(context, path, {}, (err, _, result) => {\n            if (expectedResult === false) return callback(err ? undefined : INVALID);\n            if (err) return callback(err);\n            const resultPath = result.path;\n            if (resultPath !== expectedResult) return callback(INVALID);\n            callback();\n          });\n          break;\n\n        case \"f\":\n          resolveCjs(context, path, {}, (err, _, result) => {\n            if (expectedResult === false) return callback(err ? undefined : INVALID);\n            if (err) return callback(err);\n            const resultPath = result.path;\n            if (resultPath !== expectedResult) return callback(INVALID);\n            callback();\n          });\n          break;\n\n        case \"c\":\n          resolveCjsAsChild(context, path, {}, (err, _, result) => {\n            if (expectedResult === false) return callback(err ? undefined : INVALID);\n            if (err) return callback(err);\n            const resultPath = result.path;\n            if (resultPath !== expectedResult) return callback(INVALID);\n            callback();\n          });\n          break;\n\n        case \"e\":\n          resolveEsm(context, path, {}, (err, _, result) => {\n            if (expectedResult === false) return callback(err ? undefined : INVALID);\n            if (err) return callback(err);\n            const resultPath = result.path;\n            if (resultPath !== expectedResult) return callback(INVALID);\n            callback();\n          });\n          break;\n\n        default:\n          callback(new Error(\"Unexpected type in resolve result key\"));\n          break;\n      }\n    },\n    /**\n     * @param {Error | typeof INVALID=} err error or invalid flag\n     * @returns {void}\n     */\n    err => {\n      if (err === INVALID) {\n        return callback(null, false);\n      }\n\n      if (err) {\n        return callback(err);\n      }\n\n      return callback(null, true);\n    });\n  }\n  /**\n   *\n   * @param {number} startTime when processing the files has started\n   * @param {Iterable<string>} files all files\n   * @param {Iterable<string>} directories all directories\n   * @param {Iterable<string>} missing all missing files or directories\n   * @param {Object} options options object (for future extensions)\n   * @param {boolean=} options.hash should use hash to snapshot\n   * @param {boolean=} options.timestamp should use timestamp to snapshot\n   * @param {function((WebpackError | null)=, (Snapshot | null)=): void} callback callback function\n   * @returns {void}\n   */\n\n\n  createSnapshot(startTime, files, directories, missing, options, callback) {\n    /** @type {Map<string, FileSystemInfoEntry | null>} */\n    const fileTimestamps = new Map();\n    /** @type {Map<string, string | null>} */\n\n    const fileHashes = new Map();\n    /** @type {Map<string, TimestampAndHash | string | null>} */\n\n    const fileTshs = new Map();\n    /** @type {Map<string, FileSystemInfoEntry | null>} */\n\n    const contextTimestamps = new Map();\n    /** @type {Map<string, string | null>} */\n\n    const contextHashes = new Map();\n    /** @type {Map<string, ResolvedContextTimestampAndHash | null>} */\n\n    const contextTshs = new Map();\n    /** @type {Map<string, boolean>} */\n\n    const missingExistence = new Map();\n    /** @type {Map<string, string>} */\n\n    const managedItemInfo = new Map();\n    /** @type {Set<string>} */\n\n    const managedFiles = new Set();\n    /** @type {Set<string>} */\n\n    const managedContexts = new Set();\n    /** @type {Set<string>} */\n\n    const managedMissing = new Set();\n    /** @type {Set<Snapshot>} */\n\n    const children = new Set();\n    const snapshot = new Snapshot();\n    if (startTime) snapshot.setStartTime(startTime);\n    /** @type {Set<string>} */\n\n    const managedItems = new Set();\n    /** 1 = timestamp, 2 = hash, 3 = timestamp + hash */\n\n    const mode = options && options.hash ? options.timestamp ? 3 : 2 : 1;\n    let jobs = 1;\n\n    const jobDone = () => {\n      if (--jobs === 0) {\n        if (fileTimestamps.size !== 0) {\n          snapshot.setFileTimestamps(fileTimestamps);\n        }\n\n        if (fileHashes.size !== 0) {\n          snapshot.setFileHashes(fileHashes);\n        }\n\n        if (fileTshs.size !== 0) {\n          snapshot.setFileTshs(fileTshs);\n        }\n\n        if (contextTimestamps.size !== 0) {\n          snapshot.setContextTimestamps(contextTimestamps);\n        }\n\n        if (contextHashes.size !== 0) {\n          snapshot.setContextHashes(contextHashes);\n        }\n\n        if (contextTshs.size !== 0) {\n          snapshot.setContextTshs(contextTshs);\n        }\n\n        if (missingExistence.size !== 0) {\n          snapshot.setMissingExistence(missingExistence);\n        }\n\n        if (managedItemInfo.size !== 0) {\n          snapshot.setManagedItemInfo(managedItemInfo);\n        }\n\n        this._managedFilesOptimization.optimize(snapshot, managedFiles);\n\n        if (managedFiles.size !== 0) {\n          snapshot.setManagedFiles(managedFiles);\n        }\n\n        this._managedContextsOptimization.optimize(snapshot, managedContexts);\n\n        if (managedContexts.size !== 0) {\n          snapshot.setManagedContexts(managedContexts);\n        }\n\n        this._managedMissingOptimization.optimize(snapshot, managedMissing);\n\n        if (managedMissing.size !== 0) {\n          snapshot.setManagedMissing(managedMissing);\n        }\n\n        if (children.size !== 0) {\n          snapshot.setChildren(children);\n        }\n\n        this._snapshotCache.set(snapshot, true);\n\n        this._statCreatedSnapshots++;\n        callback(null, snapshot);\n      }\n    };\n\n    const jobError = () => {\n      if (jobs > 0) {\n        // large negative number instead of NaN or something else to keep jobs to stay a SMI (v8)\n        jobs = -100000000;\n        callback(null, null);\n      }\n    };\n\n    const checkManaged = (path, managedSet) => {\n      for (const immutablePath of this.immutablePathsRegExps) {\n        if (immutablePath.test(path)) {\n          managedSet.add(path);\n          return true;\n        }\n      }\n\n      for (const immutablePath of this.immutablePathsWithSlash) {\n        if (path.startsWith(immutablePath)) {\n          managedSet.add(path);\n          return true;\n        }\n      }\n\n      for (const managedPath of this.managedPathsRegExps) {\n        const match = managedPath.exec(path);\n\n        if (match) {\n          const managedItem = getManagedItem(match[1], path);\n\n          if (managedItem) {\n            managedItems.add(managedItem);\n            managedSet.add(path);\n            return true;\n          }\n        }\n      }\n\n      for (const managedPath of this.managedPathsWithSlash) {\n        if (path.startsWith(managedPath)) {\n          const managedItem = getManagedItem(managedPath, path);\n\n          if (managedItem) {\n            managedItems.add(managedItem);\n            managedSet.add(path);\n            return true;\n          }\n        }\n      }\n\n      return false;\n    };\n\n    const captureNonManaged = (items, managedSet) => {\n      const capturedItems = new Set();\n\n      for (const path of items) {\n        if (!checkManaged(path, managedSet)) capturedItems.add(path);\n      }\n\n      return capturedItems;\n    };\n\n    const processCapturedFiles = capturedFiles => {\n      switch (mode) {\n        case 3:\n          this._fileTshsOptimization.optimize(snapshot, capturedFiles);\n\n          for (const path of capturedFiles) {\n            const cache = this._fileTshs.get(path);\n\n            if (cache !== undefined) {\n              fileTshs.set(path, cache);\n            } else {\n              jobs++;\n\n              this._getFileTimestampAndHash(path, (err, entry) => {\n                if (err) {\n                  if (this.logger) {\n                    this.logger.debug(`Error snapshotting file timestamp hash combination of ${path}: ${err.stack}`);\n                  }\n\n                  jobError();\n                } else {\n                  fileTshs.set(path, entry);\n                  jobDone();\n                }\n              });\n            }\n          }\n\n          break;\n\n        case 2:\n          this._fileHashesOptimization.optimize(snapshot, capturedFiles);\n\n          for (const path of capturedFiles) {\n            const cache = this._fileHashes.get(path);\n\n            if (cache !== undefined) {\n              fileHashes.set(path, cache);\n            } else {\n              jobs++;\n              this.fileHashQueue.add(path, (err, entry) => {\n                if (err) {\n                  if (this.logger) {\n                    this.logger.debug(`Error snapshotting file hash of ${path}: ${err.stack}`);\n                  }\n\n                  jobError();\n                } else {\n                  fileHashes.set(path, entry);\n                  jobDone();\n                }\n              });\n            }\n          }\n\n          break;\n\n        case 1:\n          this._fileTimestampsOptimization.optimize(snapshot, capturedFiles);\n\n          for (const path of capturedFiles) {\n            const cache = this._fileTimestamps.get(path);\n\n            if (cache !== undefined) {\n              if (cache !== \"ignore\") {\n                fileTimestamps.set(path, cache);\n              }\n            } else {\n              jobs++;\n              this.fileTimestampQueue.add(path, (err, entry) => {\n                if (err) {\n                  if (this.logger) {\n                    this.logger.debug(`Error snapshotting file timestamp of ${path}: ${err.stack}`);\n                  }\n\n                  jobError();\n                } else {\n                  fileTimestamps.set(path, entry);\n                  jobDone();\n                }\n              });\n            }\n          }\n\n          break;\n      }\n    };\n\n    if (files) {\n      processCapturedFiles(captureNonManaged(files, managedFiles));\n    }\n\n    const processCapturedDirectories = capturedDirectories => {\n      switch (mode) {\n        case 3:\n          this._contextTshsOptimization.optimize(snapshot, capturedDirectories);\n\n          for (const path of capturedDirectories) {\n            const cache = this._contextTshs.get(path);\n            /** @type {ResolvedContextTimestampAndHash} */\n\n\n            let resolved;\n\n            if (cache !== undefined && (resolved = getResolvedTimestamp(cache)) !== undefined) {\n              contextTshs.set(path, resolved);\n            } else {\n              jobs++;\n              /**\n               * @param {Error=} err error\n               * @param {ResolvedContextTimestampAndHash=} entry entry\n               * @returns {void}\n               */\n\n              const callback = (err, entry) => {\n                if (err) {\n                  if (this.logger) {\n                    this.logger.debug(`Error snapshotting context timestamp hash combination of ${path}: ${err.stack}`);\n                  }\n\n                  jobError();\n                } else {\n                  contextTshs.set(path, entry);\n                  jobDone();\n                }\n              };\n\n              if (cache !== undefined) {\n                this._resolveContextTsh(cache, callback);\n              } else {\n                this.getContextTsh(path, callback);\n              }\n            }\n          }\n\n          break;\n\n        case 2:\n          this._contextHashesOptimization.optimize(snapshot, capturedDirectories);\n\n          for (const path of capturedDirectories) {\n            const cache = this._contextHashes.get(path);\n\n            let resolved;\n\n            if (cache !== undefined && (resolved = getResolvedHash(cache)) !== undefined) {\n              contextHashes.set(path, resolved);\n            } else {\n              jobs++;\n\n              const callback = (err, entry) => {\n                if (err) {\n                  if (this.logger) {\n                    this.logger.debug(`Error snapshotting context hash of ${path}: ${err.stack}`);\n                  }\n\n                  jobError();\n                } else {\n                  contextHashes.set(path, entry);\n                  jobDone();\n                }\n              };\n\n              if (cache !== undefined) {\n                this._resolveContextHash(cache, callback);\n              } else {\n                this.getContextHash(path, callback);\n              }\n            }\n          }\n\n          break;\n\n        case 1:\n          this._contextTimestampsOptimization.optimize(snapshot, capturedDirectories);\n\n          for (const path of capturedDirectories) {\n            const cache = this._contextTimestamps.get(path);\n\n            if (cache === \"ignore\") continue;\n            let resolved;\n\n            if (cache !== undefined && (resolved = getResolvedTimestamp(cache)) !== undefined) {\n              contextTimestamps.set(path, resolved);\n            } else {\n              jobs++;\n              /**\n               * @param {Error=} err error\n               * @param {ResolvedContextFileSystemInfoEntry=} entry entry\n               * @returns {void}\n               */\n\n              const callback = (err, entry) => {\n                if (err) {\n                  if (this.logger) {\n                    this.logger.debug(`Error snapshotting context timestamp of ${path}: ${err.stack}`);\n                  }\n\n                  jobError();\n                } else {\n                  contextTimestamps.set(path, entry);\n                  jobDone();\n                }\n              };\n\n              if (cache !== undefined) {\n                this._resolveContextTimestamp(cache, callback);\n              } else {\n                this.getContextTimestamp(path, callback);\n              }\n            }\n          }\n\n          break;\n      }\n    };\n\n    if (directories) {\n      processCapturedDirectories(captureNonManaged(directories, managedContexts));\n    }\n\n    const processCapturedMissing = capturedMissing => {\n      this._missingExistenceOptimization.optimize(snapshot, capturedMissing);\n\n      for (const path of capturedMissing) {\n        const cache = this._fileTimestamps.get(path);\n\n        if (cache !== undefined) {\n          if (cache !== \"ignore\") {\n            missingExistence.set(path, Boolean(cache));\n          }\n        } else {\n          jobs++;\n          this.fileTimestampQueue.add(path, (err, entry) => {\n            if (err) {\n              if (this.logger) {\n                this.logger.debug(`Error snapshotting missing timestamp of ${path}: ${err.stack}`);\n              }\n\n              jobError();\n            } else {\n              missingExistence.set(path, Boolean(entry));\n              jobDone();\n            }\n          });\n        }\n      }\n    };\n\n    if (missing) {\n      processCapturedMissing(captureNonManaged(missing, managedMissing));\n    }\n\n    this._managedItemInfoOptimization.optimize(snapshot, managedItems);\n\n    for (const path of managedItems) {\n      const cache = this._managedItems.get(path);\n\n      if (cache !== undefined) {\n        if (!cache.startsWith(\"*\")) {\n          managedFiles.add(join(this.fs, path, \"package.json\"));\n        } else if (cache === \"*nested\") {\n          managedMissing.add(join(this.fs, path, \"package.json\"));\n        }\n\n        managedItemInfo.set(path, cache);\n      } else {\n        jobs++;\n        this.managedItemQueue.add(path, (err, entry) => {\n          if (err) {\n            if (this.logger) {\n              this.logger.debug(`Error snapshotting managed item ${path}: ${err.stack}`);\n            }\n\n            jobError();\n          } else if (entry) {\n            if (!entry.startsWith(\"*\")) {\n              managedFiles.add(join(this.fs, path, \"package.json\"));\n            } else if (cache === \"*nested\") {\n              managedMissing.add(join(this.fs, path, \"package.json\"));\n            }\n\n            managedItemInfo.set(path, entry);\n            jobDone();\n          } else {\n            // Fallback to normal snapshotting\n            const process = (set, fn) => {\n              if (set.size === 0) return;\n              const captured = new Set();\n\n              for (const file of set) {\n                if (file.startsWith(path)) captured.add(file);\n              }\n\n              if (captured.size > 0) fn(captured);\n            };\n\n            process(managedFiles, processCapturedFiles);\n            process(managedContexts, processCapturedDirectories);\n            process(managedMissing, processCapturedMissing);\n            jobDone();\n          }\n        });\n      }\n    }\n\n    jobDone();\n  }\n  /**\n   * @param {Snapshot} snapshot1 a snapshot\n   * @param {Snapshot} snapshot2 a snapshot\n   * @returns {Snapshot} merged snapshot\n   */\n\n\n  mergeSnapshots(snapshot1, snapshot2) {\n    const snapshot = new Snapshot();\n    if (snapshot1.hasStartTime() && snapshot2.hasStartTime()) snapshot.setStartTime(Math.min(snapshot1.startTime, snapshot2.startTime));else if (snapshot2.hasStartTime()) snapshot.startTime = snapshot2.startTime;else if (snapshot1.hasStartTime()) snapshot.startTime = snapshot1.startTime;\n\n    if (snapshot1.hasFileTimestamps() || snapshot2.hasFileTimestamps()) {\n      snapshot.setFileTimestamps(mergeMaps(snapshot1.fileTimestamps, snapshot2.fileTimestamps));\n    }\n\n    if (snapshot1.hasFileHashes() || snapshot2.hasFileHashes()) {\n      snapshot.setFileHashes(mergeMaps(snapshot1.fileHashes, snapshot2.fileHashes));\n    }\n\n    if (snapshot1.hasFileTshs() || snapshot2.hasFileTshs()) {\n      snapshot.setFileTshs(mergeMaps(snapshot1.fileTshs, snapshot2.fileTshs));\n    }\n\n    if (snapshot1.hasContextTimestamps() || snapshot2.hasContextTimestamps()) {\n      snapshot.setContextTimestamps(mergeMaps(snapshot1.contextTimestamps, snapshot2.contextTimestamps));\n    }\n\n    if (snapshot1.hasContextHashes() || snapshot2.hasContextHashes()) {\n      snapshot.setContextHashes(mergeMaps(snapshot1.contextHashes, snapshot2.contextHashes));\n    }\n\n    if (snapshot1.hasContextTshs() || snapshot2.hasContextTshs()) {\n      snapshot.setContextTshs(mergeMaps(snapshot1.contextTshs, snapshot2.contextTshs));\n    }\n\n    if (snapshot1.hasMissingExistence() || snapshot2.hasMissingExistence()) {\n      snapshot.setMissingExistence(mergeMaps(snapshot1.missingExistence, snapshot2.missingExistence));\n    }\n\n    if (snapshot1.hasManagedItemInfo() || snapshot2.hasManagedItemInfo()) {\n      snapshot.setManagedItemInfo(mergeMaps(snapshot1.managedItemInfo, snapshot2.managedItemInfo));\n    }\n\n    if (snapshot1.hasManagedFiles() || snapshot2.hasManagedFiles()) {\n      snapshot.setManagedFiles(mergeSets(snapshot1.managedFiles, snapshot2.managedFiles));\n    }\n\n    if (snapshot1.hasManagedContexts() || snapshot2.hasManagedContexts()) {\n      snapshot.setManagedContexts(mergeSets(snapshot1.managedContexts, snapshot2.managedContexts));\n    }\n\n    if (snapshot1.hasManagedMissing() || snapshot2.hasManagedMissing()) {\n      snapshot.setManagedMissing(mergeSets(snapshot1.managedMissing, snapshot2.managedMissing));\n    }\n\n    if (snapshot1.hasChildren() || snapshot2.hasChildren()) {\n      snapshot.setChildren(mergeSets(snapshot1.children, snapshot2.children));\n    }\n\n    if (this._snapshotCache.get(snapshot1) === true && this._snapshotCache.get(snapshot2) === true) {\n      this._snapshotCache.set(snapshot, true);\n    }\n\n    return snapshot;\n  }\n  /**\n   * @param {Snapshot} snapshot the snapshot made\n   * @param {function((WebpackError | null)=, boolean=): void} callback callback function\n   * @returns {void}\n   */\n\n\n  checkSnapshotValid(snapshot, callback) {\n    const cachedResult = this._snapshotCache.get(snapshot);\n\n    if (cachedResult !== undefined) {\n      this._statTestedSnapshotsCached++;\n\n      if (typeof cachedResult === \"boolean\") {\n        callback(null, cachedResult);\n      } else {\n        cachedResult.push(callback);\n      }\n\n      return;\n    }\n\n    this._statTestedSnapshotsNotCached++;\n\n    this._checkSnapshotValidNoCache(snapshot, callback);\n  }\n  /**\n   * @param {Snapshot} snapshot the snapshot made\n   * @param {function((WebpackError | null)=, boolean=): void} callback callback function\n   * @returns {void}\n   */\n\n\n  _checkSnapshotValidNoCache(snapshot, callback) {\n    var _this = this;\n\n    /** @type {number | undefined} */\n    let startTime = undefined;\n\n    if (snapshot.hasStartTime()) {\n      startTime = snapshot.startTime;\n    }\n\n    let jobs = 1;\n\n    const jobDone = () => {\n      if (--jobs === 0) {\n        this._snapshotCache.set(snapshot, true);\n\n        callback(null, true);\n      }\n    };\n\n    const invalid = () => {\n      if (jobs > 0) {\n        // large negative number instead of NaN or something else to keep jobs to stay a SMI (v8)\n        jobs = -100000000;\n\n        this._snapshotCache.set(snapshot, false);\n\n        callback(null, false);\n      }\n    };\n\n    const invalidWithError = (path, err) => {\n      if (this._remainingLogs > 0) {\n        this._log(path, `error occurred: %s`, err);\n      }\n\n      invalid();\n    };\n    /**\n     * @param {string} path file path\n     * @param {string} current current hash\n     * @param {string} snap snapshot hash\n     * @returns {boolean} true, if ok\n     */\n\n\n    const checkHash = (path, current, snap) => {\n      if (current !== snap) {\n        // If hash differ it's invalid\n        if (this._remainingLogs > 0) {\n          this._log(path, `hashes differ (%s != %s)`, current, snap);\n        }\n\n        return false;\n      }\n\n      return true;\n    };\n    /**\n     * @param {string} path file path\n     * @param {boolean} current current entry\n     * @param {boolean} snap entry from snapshot\n     * @returns {boolean} true, if ok\n     */\n\n\n    const checkExistence = (path, current, snap) => {\n      if (!current !== !snap) {\n        // If existence of item differs\n        // it's invalid\n        if (this._remainingLogs > 0) {\n          this._log(path, current ? \"it didn't exist before\" : \"it does no longer exist\");\n        }\n\n        return false;\n      }\n\n      return true;\n    };\n    /**\n     * @param {string} path file path\n     * @param {FileSystemInfoEntry} current current entry\n     * @param {FileSystemInfoEntry} snap entry from snapshot\n     * @param {boolean} log log reason\n     * @returns {boolean} true, if ok\n     */\n\n\n    const checkFile = function (path, current, snap) {\n      let log = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : true;\n      if (current === snap) return true;\n      if (!checkExistence(path, Boolean(current), Boolean(snap))) return false;\n\n      if (current) {\n        // For existing items only\n        if (typeof startTime === \"number\" && current.safeTime > startTime) {\n          // If a change happened after starting reading the item\n          // this may no longer be valid\n          if (log && _this._remainingLogs > 0) {\n            _this._log(path, `it may have changed (%d) after the start time of the snapshot (%d)`, current.safeTime, startTime);\n          }\n\n          return false;\n        }\n\n        if (snap.timestamp !== undefined && current.timestamp !== snap.timestamp) {\n          // If we have a timestamp (it was a file or symlink) and it differs from current timestamp\n          // it's invalid\n          if (log && _this._remainingLogs > 0) {\n            _this._log(path, `timestamps differ (%d != %d)`, current.timestamp, snap.timestamp);\n          }\n\n          return false;\n        }\n      }\n\n      return true;\n    };\n    /**\n     * @param {string} path file path\n     * @param {ResolvedContextFileSystemInfoEntry} current current entry\n     * @param {ResolvedContextFileSystemInfoEntry} snap entry from snapshot\n     * @param {boolean} log log reason\n     * @returns {boolean} true, if ok\n     */\n\n\n    const checkContext = function (path, current, snap) {\n      let log = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : true;\n      if (current === snap) return true;\n      if (!checkExistence(path, Boolean(current), Boolean(snap))) return false;\n\n      if (current) {\n        // For existing items only\n        if (typeof startTime === \"number\" && current.safeTime > startTime) {\n          // If a change happened after starting reading the item\n          // this may no longer be valid\n          if (log && _this._remainingLogs > 0) {\n            _this._log(path, `it may have changed (%d) after the start time of the snapshot (%d)`, current.safeTime, startTime);\n          }\n\n          return false;\n        }\n\n        if (snap.timestampHash !== undefined && current.timestampHash !== snap.timestampHash) {\n          // If we have a timestampHash (it was a directory) and it differs from current timestampHash\n          // it's invalid\n          if (log && _this._remainingLogs > 0) {\n            _this._log(path, `timestamps hashes differ (%s != %s)`, current.timestampHash, snap.timestampHash);\n          }\n\n          return false;\n        }\n      }\n\n      return true;\n    };\n\n    if (snapshot.hasChildren()) {\n      const childCallback = (err, result) => {\n        if (err || !result) return invalid();else jobDone();\n      };\n\n      for (const child of snapshot.children) {\n        const cache = this._snapshotCache.get(child);\n\n        if (cache !== undefined) {\n          this._statTestedChildrenCached++;\n          /* istanbul ignore else */\n\n          if (typeof cache === \"boolean\") {\n            if (cache === false) {\n              invalid();\n              return;\n            }\n          } else {\n            jobs++;\n            cache.push(childCallback);\n          }\n        } else {\n          this._statTestedChildrenNotCached++;\n          jobs++;\n\n          this._checkSnapshotValidNoCache(child, childCallback);\n        }\n      }\n    }\n\n    if (snapshot.hasFileTimestamps()) {\n      const {\n        fileTimestamps\n      } = snapshot;\n      this._statTestedEntries += fileTimestamps.size;\n\n      for (const [path, ts] of fileTimestamps) {\n        const cache = this._fileTimestamps.get(path);\n\n        if (cache !== undefined) {\n          if (cache !== \"ignore\" && !checkFile(path, cache, ts)) {\n            invalid();\n            return;\n          }\n        } else {\n          jobs++;\n          this.fileTimestampQueue.add(path, (err, entry) => {\n            if (err) return invalidWithError(path, err);\n\n            if (!checkFile(path, entry, ts)) {\n              invalid();\n            } else {\n              jobDone();\n            }\n          });\n        }\n      }\n    }\n\n    const processFileHashSnapshot = (path, hash) => {\n      const cache = this._fileHashes.get(path);\n\n      if (cache !== undefined) {\n        if (cache !== \"ignore\" && !checkHash(path, cache, hash)) {\n          invalid();\n          return;\n        }\n      } else {\n        jobs++;\n        this.fileHashQueue.add(path, (err, entry) => {\n          if (err) return invalidWithError(path, err);\n\n          if (!checkHash(path, entry, hash)) {\n            invalid();\n          } else {\n            jobDone();\n          }\n        });\n      }\n    };\n\n    if (snapshot.hasFileHashes()) {\n      const {\n        fileHashes\n      } = snapshot;\n      this._statTestedEntries += fileHashes.size;\n\n      for (const [path, hash] of fileHashes) {\n        processFileHashSnapshot(path, hash);\n      }\n    }\n\n    if (snapshot.hasFileTshs()) {\n      const {\n        fileTshs\n      } = snapshot;\n      this._statTestedEntries += fileTshs.size;\n\n      for (const [path, tsh] of fileTshs) {\n        if (typeof tsh === \"string\") {\n          processFileHashSnapshot(path, tsh);\n        } else {\n          const cache = this._fileTimestamps.get(path);\n\n          if (cache !== undefined) {\n            if (cache === \"ignore\" || !checkFile(path, cache, tsh, false)) {\n              processFileHashSnapshot(path, tsh && tsh.hash);\n            }\n          } else {\n            jobs++;\n            this.fileTimestampQueue.add(path, (err, entry) => {\n              if (err) return invalidWithError(path, err);\n\n              if (!checkFile(path, entry, tsh, false)) {\n                processFileHashSnapshot(path, tsh && tsh.hash);\n              }\n\n              jobDone();\n            });\n          }\n        }\n      }\n    }\n\n    if (snapshot.hasContextTimestamps()) {\n      const {\n        contextTimestamps\n      } = snapshot;\n      this._statTestedEntries += contextTimestamps.size;\n\n      for (const [path, ts] of contextTimestamps) {\n        const cache = this._contextTimestamps.get(path);\n\n        if (cache === \"ignore\") continue;\n        let resolved;\n\n        if (cache !== undefined && (resolved = getResolvedTimestamp(cache)) !== undefined) {\n          if (!checkContext(path, resolved, ts)) {\n            invalid();\n            return;\n          }\n        } else {\n          jobs++;\n          /**\n           * @param {Error=} err error\n           * @param {ResolvedContextFileSystemInfoEntry=} entry entry\n           * @returns {void}\n           */\n\n          const callback = (err, entry) => {\n            if (err) return invalidWithError(path, err);\n\n            if (!checkContext(path, entry, ts)) {\n              invalid();\n            } else {\n              jobDone();\n            }\n          };\n\n          if (cache !== undefined) {\n            this._resolveContextTimestamp(cache, callback);\n          } else {\n            this.getContextTimestamp(path, callback);\n          }\n        }\n      }\n    }\n\n    const processContextHashSnapshot = (path, hash) => {\n      const cache = this._contextHashes.get(path);\n\n      let resolved;\n\n      if (cache !== undefined && (resolved = getResolvedHash(cache)) !== undefined) {\n        if (!checkHash(path, resolved, hash)) {\n          invalid();\n          return;\n        }\n      } else {\n        jobs++;\n\n        const callback = (err, entry) => {\n          if (err) return invalidWithError(path, err);\n\n          if (!checkHash(path, entry, hash)) {\n            invalid();\n          } else {\n            jobDone();\n          }\n        };\n\n        if (cache !== undefined) {\n          this._resolveContextHash(cache, callback);\n        } else {\n          this.getContextHash(path, callback);\n        }\n      }\n    };\n\n    if (snapshot.hasContextHashes()) {\n      const {\n        contextHashes\n      } = snapshot;\n      this._statTestedEntries += contextHashes.size;\n\n      for (const [path, hash] of contextHashes) {\n        processContextHashSnapshot(path, hash);\n      }\n    }\n\n    if (snapshot.hasContextTshs()) {\n      const {\n        contextTshs\n      } = snapshot;\n      this._statTestedEntries += contextTshs.size;\n\n      for (const [path, tsh] of contextTshs) {\n        if (typeof tsh === \"string\") {\n          processContextHashSnapshot(path, tsh);\n        } else {\n          const cache = this._contextTimestamps.get(path);\n\n          if (cache === \"ignore\") continue;\n          let resolved;\n\n          if (cache !== undefined && (resolved = getResolvedTimestamp(cache)) !== undefined) {\n            if (!checkContext(path, resolved, tsh, false)) {\n              processContextHashSnapshot(path, tsh && tsh.hash);\n            }\n          } else {\n            jobs++;\n            /**\n             * @param {Error=} err error\n             * @param {ResolvedContextFileSystemInfoEntry=} entry entry\n             * @returns {void}\n             */\n\n            const callback = (err, entry) => {\n              if (err) return invalidWithError(path, err);\n\n              if (!checkContext(path, entry, tsh, false)) {\n                processContextHashSnapshot(path, tsh && tsh.hash);\n              }\n\n              jobDone();\n            };\n\n            if (cache !== undefined) {\n              this._resolveContextTimestamp(cache, callback);\n            } else {\n              this.getContextTimestamp(path, callback);\n            }\n          }\n        }\n      }\n    }\n\n    if (snapshot.hasMissingExistence()) {\n      const {\n        missingExistence\n      } = snapshot;\n      this._statTestedEntries += missingExistence.size;\n\n      for (const [path, existence] of missingExistence) {\n        const cache = this._fileTimestamps.get(path);\n\n        if (cache !== undefined) {\n          if (cache !== \"ignore\" && !checkExistence(path, Boolean(cache), Boolean(existence))) {\n            invalid();\n            return;\n          }\n        } else {\n          jobs++;\n          this.fileTimestampQueue.add(path, (err, entry) => {\n            if (err) return invalidWithError(path, err);\n\n            if (!checkExistence(path, Boolean(entry), Boolean(existence))) {\n              invalid();\n            } else {\n              jobDone();\n            }\n          });\n        }\n      }\n    }\n\n    if (snapshot.hasManagedItemInfo()) {\n      const {\n        managedItemInfo\n      } = snapshot;\n      this._statTestedEntries += managedItemInfo.size;\n\n      for (const [path, info] of managedItemInfo) {\n        const cache = this._managedItems.get(path);\n\n        if (cache !== undefined) {\n          if (!checkHash(path, cache, info)) {\n            invalid();\n            return;\n          }\n        } else {\n          jobs++;\n          this.managedItemQueue.add(path, (err, entry) => {\n            if (err) return invalidWithError(path, err);\n\n            if (!checkHash(path, entry, info)) {\n              invalid();\n            } else {\n              jobDone();\n            }\n          });\n        }\n      }\n    }\n\n    jobDone(); // if there was an async action\n    // try to join multiple concurrent request for this snapshot\n\n    if (jobs > 0) {\n      const callbacks = [callback];\n\n      callback = (err, result) => {\n        for (const callback of callbacks) callback(err, result);\n      };\n\n      this._snapshotCache.set(snapshot, callbacks);\n    }\n  }\n\n  _readFileTimestamp(path, callback) {\n    this.fs.stat(path, (err, stat) => {\n      if (err) {\n        if (err.code === \"ENOENT\") {\n          this._fileTimestamps.set(path, null);\n\n          this._cachedDeprecatedFileTimestamps = undefined;\n          return callback(null, null);\n        }\n\n        return callback(err);\n      }\n\n      let ts;\n\n      if (stat.isDirectory()) {\n        ts = {\n          safeTime: 0,\n          timestamp: undefined\n        };\n      } else {\n        const mtime = +stat.mtime;\n        if (mtime) applyMtime(mtime);\n        ts = {\n          safeTime: mtime ? mtime + FS_ACCURACY : Infinity,\n          timestamp: mtime\n        };\n      }\n\n      this._fileTimestamps.set(path, ts);\n\n      this._cachedDeprecatedFileTimestamps = undefined;\n      callback(null, ts);\n    });\n  }\n\n  _readFileHash(path, callback) {\n    this.fs.readFile(path, (err, content) => {\n      if (err) {\n        if (err.code === \"EISDIR\") {\n          this._fileHashes.set(path, \"directory\");\n\n          return callback(null, \"directory\");\n        }\n\n        if (err.code === \"ENOENT\") {\n          this._fileHashes.set(path, null);\n\n          return callback(null, null);\n        }\n\n        if (err.code === \"ERR_FS_FILE_TOO_LARGE\") {\n          this.logger.warn(`Ignoring ${path} for hashing as it's very large`);\n\n          this._fileHashes.set(path, \"too large\");\n\n          return callback(null, \"too large\");\n        }\n\n        return callback(err);\n      }\n\n      const hash = createHash(this._hashFunction);\n      hash.update(content);\n      const digest =\n      /** @type {string} */\n      hash.digest(\"hex\");\n\n      this._fileHashes.set(path, digest);\n\n      callback(null, digest);\n    });\n  }\n\n  _getFileTimestampAndHash(path, callback) {\n    const continueWithHash = hash => {\n      const cache = this._fileTimestamps.get(path);\n\n      if (cache !== undefined) {\n        if (cache !== \"ignore\") {\n          const result = { ...cache,\n            hash\n          };\n\n          this._fileTshs.set(path, result);\n\n          return callback(null, result);\n        } else {\n          this._fileTshs.set(path, hash);\n\n          return callback(null, hash);\n        }\n      } else {\n        this.fileTimestampQueue.add(path, (err, entry) => {\n          if (err) {\n            return callback(err);\n          }\n\n          const result = { ...entry,\n            hash\n          };\n\n          this._fileTshs.set(path, result);\n\n          return callback(null, result);\n        });\n      }\n    };\n\n    const cache = this._fileHashes.get(path);\n\n    if (cache !== undefined) {\n      continueWithHash(cache);\n    } else {\n      this.fileHashQueue.add(path, (err, entry) => {\n        if (err) {\n          return callback(err);\n        }\n\n        continueWithHash(entry);\n      });\n    }\n  }\n  /**\n   * @template T\n   * @template ItemType\n   * @param {Object} options options\n   * @param {string} options.path path\n   * @param {function(string): ItemType} options.fromImmutablePath called when context item is an immutable path\n   * @param {function(string): ItemType} options.fromManagedItem called when context item is a managed path\n   * @param {function(string, string, function(Error=, ItemType=): void): void} options.fromSymlink called when context item is a symlink\n   * @param {function(string, IStats, function(Error=, ItemType=): void): void} options.fromFile called when context item is a file\n   * @param {function(string, IStats, function(Error=, ItemType=): void): void} options.fromDirectory called when context item is a directory\n   * @param {function(string[], ItemType[]): T} options.reduce called from all context items\n   * @param {function((Error | null)=, (T)=): void} callback callback\n   */\n\n\n  _readContext(_ref4, callback) {\n    let {\n      path,\n      fromImmutablePath,\n      fromManagedItem,\n      fromSymlink,\n      fromFile,\n      fromDirectory,\n      reduce\n    } = _ref4;\n    this.fs.readdir(path, (err, _files) => {\n      if (err) {\n        if (err.code === \"ENOENT\") {\n          return callback(null, null);\n        }\n\n        return callback(err);\n      }\n\n      const files =\n      /** @type {string[]} */\n      _files.map(file => file.normalize(\"NFC\")).filter(file => !/^\\./.test(file)).sort();\n\n      asyncLib.map(files, (file, callback) => {\n        const child = join(this.fs, path, file);\n\n        for (const immutablePath of this.immutablePathsRegExps) {\n          if (immutablePath.test(path)) {\n            // ignore any immutable path for timestamping\n            return callback(null, fromImmutablePath(path));\n          }\n        }\n\n        for (const immutablePath of this.immutablePathsWithSlash) {\n          if (path.startsWith(immutablePath)) {\n            // ignore any immutable path for timestamping\n            return callback(null, fromImmutablePath(path));\n          }\n        }\n\n        for (const managedPath of this.managedPathsRegExps) {\n          const match = managedPath.exec(path);\n\n          if (match) {\n            const managedItem = getManagedItem(match[1], path);\n\n            if (managedItem) {\n              // construct timestampHash from managed info\n              return this.managedItemQueue.add(managedItem, (err, info) => {\n                if (err) return callback(err);\n                return callback(null, fromManagedItem(info));\n              });\n            }\n          }\n        }\n\n        for (const managedPath of this.managedPathsWithSlash) {\n          if (path.startsWith(managedPath)) {\n            const managedItem = getManagedItem(managedPath, child);\n\n            if (managedItem) {\n              // construct timestampHash from managed info\n              return this.managedItemQueue.add(managedItem, (err, info) => {\n                if (err) return callback(err);\n                return callback(null, fromManagedItem(info));\n              });\n            }\n          }\n        }\n\n        lstatReadlinkAbsolute(this.fs, child, (err, stat) => {\n          if (err) return callback(err);\n\n          if (typeof stat === \"string\") {\n            return fromSymlink(child, stat, callback);\n          }\n\n          if (stat.isFile()) {\n            return fromFile(child, stat, callback);\n          }\n\n          if (stat.isDirectory()) {\n            return fromDirectory(child, stat, callback);\n          }\n\n          callback(null, null);\n        });\n      }, (err, results) => {\n        if (err) return callback(err);\n        const result = reduce(files, results);\n        callback(null, result);\n      });\n    });\n  }\n\n  _readContextTimestamp(path, callback) {\n    this._readContext({\n      path,\n      fromImmutablePath: () => null,\n      fromManagedItem: info => ({\n        safeTime: 0,\n        timestampHash: info\n      }),\n      fromSymlink: (file, target, callback) => {\n        callback(null, {\n          timestampHash: target,\n          symlinks: new Set([target])\n        });\n      },\n      fromFile: (file, stat, callback) => {\n        // Prefer the cached value over our new stat to report consistent results\n        const cache = this._fileTimestamps.get(file);\n\n        if (cache !== undefined) return callback(null, cache === \"ignore\" ? null : cache);\n        const mtime = +stat.mtime;\n        if (mtime) applyMtime(mtime);\n        const ts = {\n          safeTime: mtime ? mtime + FS_ACCURACY : Infinity,\n          timestamp: mtime\n        };\n\n        this._fileTimestamps.set(file, ts);\n\n        this._cachedDeprecatedFileTimestamps = undefined;\n        callback(null, ts);\n      },\n      fromDirectory: (directory, stat, callback) => {\n        this.contextTimestampQueue.increaseParallelism();\n\n        this._getUnresolvedContextTimestamp(directory, (err, tsEntry) => {\n          this.contextTimestampQueue.decreaseParallelism();\n          callback(err, tsEntry);\n        });\n      },\n      reduce: (files, tsEntries) => {\n        let symlinks = undefined;\n        const hash = createHash(this._hashFunction);\n\n        for (const file of files) hash.update(file);\n\n        let safeTime = 0;\n\n        for (const entry of tsEntries) {\n          if (!entry) {\n            hash.update(\"n\");\n            continue;\n          }\n\n          if (entry.timestamp) {\n            hash.update(\"f\");\n            hash.update(`${entry.timestamp}`);\n          } else if (entry.timestampHash) {\n            hash.update(\"d\");\n            hash.update(`${entry.timestampHash}`);\n          }\n\n          if (entry.symlinks !== undefined) {\n            if (symlinks === undefined) symlinks = new Set();\n            addAll(entry.symlinks, symlinks);\n          }\n\n          if (entry.safeTime) {\n            safeTime = Math.max(safeTime, entry.safeTime);\n          }\n        }\n\n        const digest =\n        /** @type {string} */\n        hash.digest(\"hex\");\n        const result = {\n          safeTime,\n          timestampHash: digest\n        };\n        if (symlinks) result.symlinks = symlinks;\n        return result;\n      }\n    }, (err, result) => {\n      if (err) return callback(err);\n\n      this._contextTimestamps.set(path, result);\n\n      this._cachedDeprecatedContextTimestamps = undefined;\n      callback(null, result);\n    });\n  }\n  /**\n   * @param {ContextFileSystemInfoEntry} entry entry\n   * @param {function((Error | null)=, ResolvedContextFileSystemInfoEntry=): void} callback callback\n   * @returns {void}\n   */\n\n\n  _resolveContextTimestamp(entry, callback) {\n    const hashes = [];\n    let safeTime = 0;\n    processAsyncTree(entry.symlinks, 10, (target, push, callback) => {\n      this._getUnresolvedContextTimestamp(target, (err, entry) => {\n        if (err) return callback(err);\n\n        if (entry && entry !== \"ignore\") {\n          hashes.push(entry.timestampHash);\n\n          if (entry.safeTime) {\n            safeTime = Math.max(safeTime, entry.safeTime);\n          }\n\n          if (entry.symlinks !== undefined) {\n            for (const target of entry.symlinks) push(target);\n          }\n        }\n\n        callback();\n      });\n    }, err => {\n      if (err) return callback(err);\n      const hash = createHash(this._hashFunction);\n      hash.update(entry.timestampHash);\n\n      if (entry.safeTime) {\n        safeTime = Math.max(safeTime, entry.safeTime);\n      }\n\n      hashes.sort();\n\n      for (const h of hashes) {\n        hash.update(h);\n      }\n\n      callback(null, entry.resolved = {\n        safeTime,\n        timestampHash:\n        /** @type {string} */\n        hash.digest(\"hex\")\n      });\n    });\n  }\n\n  _readContextHash(path, callback) {\n    this._readContext({\n      path,\n      fromImmutablePath: () => \"\",\n      fromManagedItem: info => info || \"\",\n      fromSymlink: (file, target, callback) => {\n        callback(null, {\n          hash: target,\n          symlinks: new Set([target])\n        });\n      },\n      fromFile: (file, stat, callback) => this.getFileHash(file, (err, hash) => {\n        callback(err, hash || \"\");\n      }),\n      fromDirectory: (directory, stat, callback) => {\n        this.contextHashQueue.increaseParallelism();\n\n        this._getUnresolvedContextHash(directory, (err, hash) => {\n          this.contextHashQueue.decreaseParallelism();\n          callback(err, hash || \"\");\n        });\n      },\n\n      /**\n       * @param {string[]} files files\n       * @param {(string | ContextHash)[]} fileHashes hashes\n       * @returns {ContextHash} reduced hash\n       */\n      reduce: (files, fileHashes) => {\n        let symlinks = undefined;\n        const hash = createHash(this._hashFunction);\n\n        for (const file of files) hash.update(file);\n\n        for (const entry of fileHashes) {\n          if (typeof entry === \"string\") {\n            hash.update(entry);\n          } else {\n            hash.update(entry.hash);\n\n            if (entry.symlinks) {\n              if (symlinks === undefined) symlinks = new Set();\n              addAll(entry.symlinks, symlinks);\n            }\n          }\n        }\n\n        const result = {\n          hash:\n          /** @type {string} */\n          hash.digest(\"hex\")\n        };\n        if (symlinks) result.symlinks = symlinks;\n        return result;\n      }\n    }, (err, result) => {\n      if (err) return callback(err);\n\n      this._contextHashes.set(path, result);\n\n      return callback(null, result);\n    });\n  }\n  /**\n   * @param {ContextHash} entry context hash\n   * @param {function((Error | null)=, string=): void} callback callback\n   * @returns {void}\n   */\n\n\n  _resolveContextHash(entry, callback) {\n    const hashes = [];\n    processAsyncTree(entry.symlinks, 10, (target, push, callback) => {\n      this._getUnresolvedContextHash(target, (err, hash) => {\n        if (err) return callback(err);\n\n        if (hash) {\n          hashes.push(hash.hash);\n\n          if (hash.symlinks !== undefined) {\n            for (const target of hash.symlinks) push(target);\n          }\n        }\n\n        callback();\n      });\n    }, err => {\n      if (err) return callback(err);\n      const hash = createHash(this._hashFunction);\n      hash.update(entry.hash);\n      hashes.sort();\n\n      for (const h of hashes) {\n        hash.update(h);\n      }\n\n      callback(null, entry.resolved =\n      /** @type {string} */\n      hash.digest(\"hex\"));\n    });\n  }\n\n  _readContextTimestampAndHash(path, callback) {\n    const finalize = (timestamp, hash) => {\n      const result = timestamp === \"ignore\" ? hash : { ...timestamp,\n        ...hash\n      };\n\n      this._contextTshs.set(path, result);\n\n      callback(null, result);\n    };\n\n    const cachedHash = this._contextHashes.get(path);\n\n    const cachedTimestamp = this._contextTimestamps.get(path);\n\n    if (cachedHash !== undefined) {\n      if (cachedTimestamp !== undefined) {\n        finalize(cachedTimestamp, cachedHash);\n      } else {\n        this.contextTimestampQueue.add(path, (err, entry) => {\n          if (err) return callback(err);\n          finalize(entry, cachedHash);\n        });\n      }\n    } else {\n      if (cachedTimestamp !== undefined) {\n        this.contextHashQueue.add(path, (err, entry) => {\n          if (err) return callback(err);\n          finalize(cachedTimestamp, entry);\n        });\n      } else {\n        this._readContext({\n          path,\n          fromImmutablePath: () => null,\n          fromManagedItem: info => ({\n            safeTime: 0,\n            timestampHash: info,\n            hash: info || \"\"\n          }),\n          fromSymlink: (fle, target, callback) => {\n            callback(null, {\n              timestampHash: target,\n              hash: target,\n              symlinks: new Set([target])\n            });\n          },\n          fromFile: (file, stat, callback) => {\n            this._getFileTimestampAndHash(file, callback);\n          },\n          fromDirectory: (directory, stat, callback) => {\n            this.contextTshQueue.increaseParallelism();\n            this.contextTshQueue.add(directory, (err, result) => {\n              this.contextTshQueue.decreaseParallelism();\n              callback(err, result);\n            });\n          },\n\n          /**\n           * @param {string[]} files files\n           * @param {(Partial<TimestampAndHash> & Partial<ContextTimestampAndHash> | string | null)[]} results results\n           * @returns {ContextTimestampAndHash} tsh\n           */\n          reduce: (files, results) => {\n            let symlinks = undefined;\n            const tsHash = createHash(this._hashFunction);\n            const hash = createHash(this._hashFunction);\n\n            for (const file of files) {\n              tsHash.update(file);\n              hash.update(file);\n            }\n\n            let safeTime = 0;\n\n            for (const entry of results) {\n              if (!entry) {\n                tsHash.update(\"n\");\n                continue;\n              }\n\n              if (typeof entry === \"string\") {\n                tsHash.update(\"n\");\n                hash.update(entry);\n                continue;\n              }\n\n              if (entry.timestamp) {\n                tsHash.update(\"f\");\n                tsHash.update(`${entry.timestamp}`);\n              } else if (entry.timestampHash) {\n                tsHash.update(\"d\");\n                tsHash.update(`${entry.timestampHash}`);\n              }\n\n              if (entry.symlinks !== undefined) {\n                if (symlinks === undefined) symlinks = new Set();\n                addAll(entry.symlinks, symlinks);\n              }\n\n              if (entry.safeTime) {\n                safeTime = Math.max(safeTime, entry.safeTime);\n              }\n\n              hash.update(entry.hash);\n            }\n\n            const result = {\n              safeTime,\n              timestampHash:\n              /** @type {string} */\n              tsHash.digest(\"hex\"),\n              hash:\n              /** @type {string} */\n              hash.digest(\"hex\")\n            };\n            if (symlinks) result.symlinks = symlinks;\n            return result;\n          }\n        }, (err, result) => {\n          if (err) return callback(err);\n\n          this._contextTshs.set(path, result);\n\n          return callback(null, result);\n        });\n      }\n    }\n  }\n  /**\n   * @param {ContextTimestampAndHash} entry entry\n   * @param {function((Error | null)=, ResolvedContextTimestampAndHash=): void} callback callback\n   * @returns {void}\n   */\n\n\n  _resolveContextTsh(entry, callback) {\n    const hashes = [];\n    const tsHashes = [];\n    let safeTime = 0;\n    processAsyncTree(entry.symlinks, 10, (target, push, callback) => {\n      this._getUnresolvedContextTsh(target, (err, entry) => {\n        if (err) return callback(err);\n\n        if (entry) {\n          hashes.push(entry.hash);\n          if (entry.timestampHash) tsHashes.push(entry.timestampHash);\n\n          if (entry.safeTime) {\n            safeTime = Math.max(safeTime, entry.safeTime);\n          }\n\n          if (entry.symlinks !== undefined) {\n            for (const target of entry.symlinks) push(target);\n          }\n        }\n\n        callback();\n      });\n    }, err => {\n      if (err) return callback(err);\n      const hash = createHash(this._hashFunction);\n      const tsHash = createHash(this._hashFunction);\n      hash.update(entry.hash);\n      if (entry.timestampHash) tsHash.update(entry.timestampHash);\n\n      if (entry.safeTime) {\n        safeTime = Math.max(safeTime, entry.safeTime);\n      }\n\n      hashes.sort();\n\n      for (const h of hashes) {\n        hash.update(h);\n      }\n\n      tsHashes.sort();\n\n      for (const h of tsHashes) {\n        tsHash.update(h);\n      }\n\n      callback(null, entry.resolved = {\n        safeTime,\n        timestampHash:\n        /** @type {string} */\n        tsHash.digest(\"hex\"),\n        hash:\n        /** @type {string} */\n        hash.digest(\"hex\")\n      });\n    });\n  }\n\n  _getManagedItemDirectoryInfo(path, callback) {\n    this.fs.readdir(path, (err, elements) => {\n      if (err) {\n        if (err.code === \"ENOENT\" || err.code === \"ENOTDIR\") {\n          return callback(null, EMPTY_SET);\n        }\n\n        return callback(err);\n      }\n\n      const set = new Set(\n      /** @type {string[]} */\n      elements.map(element => join(this.fs, path, element)));\n      callback(null, set);\n    });\n  }\n\n  _getManagedItemInfo(path, callback) {\n    const dir = dirname(this.fs, path);\n    this.managedItemDirectoryQueue.add(dir, (err, elements) => {\n      if (err) {\n        return callback(err);\n      }\n\n      if (!elements.has(path)) {\n        // file or directory doesn't exist\n        this._managedItems.set(path, \"*missing\");\n\n        return callback(null, \"*missing\");\n      } // something exists\n      // it may be a file or directory\n\n\n      if (path.endsWith(\"node_modules\") && (path.endsWith(\"/node_modules\") || path.endsWith(\"\\\\node_modules\"))) {\n        // we are only interested in existence of this special directory\n        this._managedItems.set(path, \"*node_modules\");\n\n        return callback(null, \"*node_modules\");\n      } // we assume it's a directory, as files shouldn't occur in managed paths\n\n\n      const packageJsonPath = join(this.fs, path, \"package.json\");\n      this.fs.readFile(packageJsonPath, (err, content) => {\n        if (err) {\n          if (err.code === \"ENOENT\" || err.code === \"ENOTDIR\") {\n            // no package.json or path is not a directory\n            this.fs.readdir(path, (err, elements) => {\n              if (!err && elements.length === 1 && elements[0] === \"node_modules\") {\n                // This is only a grouping folder e. g. used by yarn\n                // we are only interested in existence of this special directory\n                this._managedItems.set(path, \"*nested\");\n\n                return callback(null, \"*nested\");\n              }\n\n              this.logger.warn(`Managed item ${path} isn't a directory or doesn't contain a package.json (see snapshot.managedPaths option)`);\n              return callback();\n            });\n            return;\n          }\n\n          return callback(err);\n        }\n\n        let data;\n\n        try {\n          data = JSON.parse(content.toString(\"utf-8\"));\n        } catch (e) {\n          return callback(e);\n        }\n\n        if (!data.name) {\n          this.logger.warn(`${packageJsonPath} doesn't contain a \"name\" property (see snapshot.managedPaths option)`);\n          return callback();\n        }\n\n        const info = `${data.name || \"\"}@${data.version || \"\"}`;\n\n        this._managedItems.set(path, info);\n\n        callback(null, info);\n      });\n    });\n  }\n\n  getDeprecatedFileTimestamps() {\n    if (this._cachedDeprecatedFileTimestamps !== undefined) return this._cachedDeprecatedFileTimestamps;\n    const map = new Map();\n\n    for (const [path, info] of this._fileTimestamps) {\n      if (info) map.set(path, typeof info === \"object\" ? info.safeTime : null);\n    }\n\n    return this._cachedDeprecatedFileTimestamps = map;\n  }\n\n  getDeprecatedContextTimestamps() {\n    if (this._cachedDeprecatedContextTimestamps !== undefined) return this._cachedDeprecatedContextTimestamps;\n    const map = new Map();\n\n    for (const [path, info] of this._contextTimestamps) {\n      if (info) map.set(path, typeof info === \"object\" ? info.safeTime : null);\n    }\n\n    return this._cachedDeprecatedContextTimestamps = map;\n  }\n\n}\n\nmodule.exports = FileSystemInfo;\nmodule.exports.Snapshot = Snapshot;","map":{"version":3,"names":["create","createResolver","require","nodeModule","asyncLib","AsyncQueue","StackedCacheMap","createHash","join","dirname","relative","lstatReadlinkAbsolute","makeSerializable","processAsyncTree","supportsEsm","process","versions","modules","builtinModules","Set","FS_ACCURACY","EMPTY_SET","RBDT_RESOLVE_CJS","RBDT_RESOLVE_ESM","RBDT_RESOLVE_DIRECTORY","RBDT_RESOLVE_CJS_FILE","RBDT_RESOLVE_CJS_FILE_AS_CHILD","RBDT_RESOLVE_ESM_FILE","RBDT_DIRECTORY","RBDT_FILE","RBDT_DIRECTORY_DEPENDENCIES","RBDT_FILE_DEPENDENCIES","INVALID","Symbol","DONE_ITERATOR_RESULT","keys","next","SnapshotIterator","constructor","SnapshotIterable","snapshot","getMaps","iterator","state","it","maps","queue","length","map","pop","undefined","result","done","children","size","child","push","Snapshot","_flags","startTime","fileTimestamps","fileHashes","fileTshs","contextTimestamps","contextHashes","contextTshs","missingExistence","managedItemInfo","managedFiles","managedContexts","managedMissing","hasStartTime","setStartTime","value","setMergedStartTime","Math","min","hasFileTimestamps","setFileTimestamps","hasFileHashes","setFileHashes","hasFileTshs","setFileTshs","hasContextTimestamps","setContextTimestamps","hasContextHashes","setContextHashes","hasContextTshs","setContextTshs","hasMissingExistence","setMissingExistence","hasManagedItemInfo","setManagedItemInfo","hasManagedFiles","setManagedFiles","hasManagedContexts","setManagedContexts","hasManagedMissing","setManagedMissing","hasChildren","setChildren","addChild","add","serialize","write","deserialize","read","_createIterable","getFileIterable","s","getContextIterable","getMissingIterable","MIN_COMMON_SNAPSHOT_SIZE","SnapshotOptimization","has","get","set","useStartTime","isSet","_has","_get","_set","_useStartTime","_isSet","_map","Map","_statItemsShared","_statItemsUnshared","_statSharedSnapshots","_statReusedSharedSnapshots","getStatisticMessage","total","round","clear","optimize","newSnapshot","capturedFiles","increaseSharedAndStoreOptimizationEntry","entry","forEach","shared","storeOptimizationEntry","path","snapshotContent","old","delete","newOptimizationEntry","capturedFilesSize","optimizationEntries","optimizationEntry","nonSharedFiles","snapshotEntries","sharedCount","commonMap","commonSnapshot","newEntry","ts","unshared","parseString","str","slice","replace","JSON","parse","applyMtime","mtime","mergeMaps","a","b","key","mergeSets","item","getManagedItem","managedPath","i","slashes","startingPosition","loop","charCodeAt","c","getResolvedTimestamp","resolved","symlinks","getResolvedHash","hash","addAll","source","target","FileSystemInfo","fs","managedPaths","immutablePaths","logger","hashFunction","_remainingLogs","_loggedPaths","_hashFunction","_snapshotCache","WeakMap","_fileTimestampsOptimization","v","_fileHashesOptimization","_fileTshsOptimization","_contextTimestampsOptimization","_contextHashesOptimization","_contextTshsOptimization","_missingExistenceOptimization","_managedItemInfoOptimization","_managedFilesOptimization","_managedContextsOptimization","_managedMissingOptimization","_fileTimestamps","_fileHashes","_fileTshs","_contextTimestamps","_contextHashes","_contextTshs","_managedItems","fileTimestampQueue","name","parallelism","processor","_readFileTimestamp","bind","fileHashQueue","_readFileHash","contextTimestampQueue","_readContextTimestamp","contextHashQueue","_readContextHash","contextTshQueue","_readContextTimestampAndHash","managedItemQueue","_getManagedItemInfo","managedItemDirectoryQueue","_getManagedItemDirectoryInfo","Array","from","managedPathsWithSlash","filter","p","managedPathsRegExps","immutablePathsWithSlash","immutablePathsRegExps","_cachedDeprecatedFileTimestamps","_cachedDeprecatedContextTimestamps","_warnAboutExperimentalEsmTracking","_statCreatedSnapshots","_statTestedSnapshotsCached","_statTestedSnapshotsNotCached","_statTestedChildrenCached","_statTestedChildrenNotCached","_statTestedEntries","logStatistics","logWhenMessage","header","message","log","_log","reason","args","debug","addFileTimestamps","immutable","addContextTimestamps","getFileTimestamp","callback","cache","getContextTimestamp","_resolveContextTimestamp","err","_getUnresolvedContextTimestamp","getFileHash","getContextHash","_resolveContextHash","_getUnresolvedContextHash","getContextTsh","_resolveContextTsh","_getUnresolvedContextTsh","_createBuildDependenciesResolvers","resolveContext","resolveToContext","exportsFields","fileSystem","resolveCjs","extensions","conditionNames","resolveCjsAsChild","resolveEsm","fullySpecified","resolveBuildDependencies","context","deps","files","fileSymlinks","directories","directorySymlinks","missing","resolveFiles","resolveDirectories","resolveMissing","resolveResults","invalidResolveResults","resolverContext","fileDependencies","contextDependencies","missingDependencies","expectedToString","expected","jobToString","job","type","pathToString","issuer","dep","resolveDirectory","_","resultPath","resolveFile","symbol","resolve","warn","isDirectory","test","realpath","_realPath","realPath","nextTick","module","isArray","childPath","filename","modulePath","paths","startsWith","subPath","packageMatch","exec","request","endsWith","lexer","init","then","readFile","content","toString","imports","imp","dependency","d","substring","e","expr","trim","stack","match","packagePath","packageJson","code","parent","packageData","depsObject","dependencies","optionalDepsObject","optionalDependencies","allDeps","optionalDeps","Object","l","k","resolveDependencies","checkResolveResultsValid","eachLimit","expectedResult","split","Error","createSnapshot","options","managedItems","mode","timestamp","jobs","jobDone","jobError","checkManaged","managedSet","immutablePath","managedItem","captureNonManaged","items","capturedItems","processCapturedFiles","_getFileTimestampAndHash","processCapturedDirectories","capturedDirectories","processCapturedMissing","capturedMissing","Boolean","fn","captured","file","mergeSnapshots","snapshot1","snapshot2","checkSnapshotValid","cachedResult","_checkSnapshotValidNoCache","invalid","invalidWithError","checkHash","current","snap","checkExistence","checkFile","safeTime","checkContext","timestampHash","childCallback","processFileHashSnapshot","tsh","processContextHashSnapshot","existence","info","callbacks","stat","Infinity","update","digest","continueWithHash","_readContext","fromImmutablePath","fromManagedItem","fromSymlink","fromFile","fromDirectory","reduce","readdir","_files","normalize","sort","isFile","results","directory","increaseParallelism","tsEntry","decreaseParallelism","tsEntries","max","hashes","h","finalize","cachedHash","cachedTimestamp","fle","tsHash","tsHashes","elements","element","dir","packageJsonPath","data","version","getDeprecatedFileTimestamps","getDeprecatedContextTimestamps","exports"],"sources":["/Users/arpanbhandari/Documents/cod-ing/React/newsapp/node_modules/webpack/lib/FileSystemInfo.js"],"sourcesContent":["/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\n\"use strict\";\n\nconst { create: createResolver } = require(\"enhanced-resolve\");\nconst nodeModule = require(\"module\");\nconst asyncLib = require(\"neo-async\");\nconst AsyncQueue = require(\"./util/AsyncQueue\");\nconst StackedCacheMap = require(\"./util/StackedCacheMap\");\nconst createHash = require(\"./util/createHash\");\nconst { join, dirname, relative, lstatReadlinkAbsolute } = require(\"./util/fs\");\nconst makeSerializable = require(\"./util/makeSerializable\");\nconst processAsyncTree = require(\"./util/processAsyncTree\");\n\n/** @typedef {import(\"./WebpackError\")} WebpackError */\n/** @typedef {import(\"./logging/Logger\").Logger} Logger */\n/** @typedef {typeof import(\"./util/Hash\")} Hash */\n/** @typedef {import(\"./util/fs\").IStats} IStats */\n/** @typedef {import(\"./util/fs\").InputFileSystem} InputFileSystem */\n\nconst supportsEsm = +process.versions.modules >= 83;\n\nconst builtinModules = new Set(nodeModule.builtinModules);\n\nlet FS_ACCURACY = 2000;\n\nconst EMPTY_SET = new Set();\n\nconst RBDT_RESOLVE_CJS = 0;\nconst RBDT_RESOLVE_ESM = 1;\nconst RBDT_RESOLVE_DIRECTORY = 2;\nconst RBDT_RESOLVE_CJS_FILE = 3;\nconst RBDT_RESOLVE_CJS_FILE_AS_CHILD = 4;\nconst RBDT_RESOLVE_ESM_FILE = 5;\nconst RBDT_DIRECTORY = 6;\nconst RBDT_FILE = 7;\nconst RBDT_DIRECTORY_DEPENDENCIES = 8;\nconst RBDT_FILE_DEPENDENCIES = 9;\n\nconst INVALID = Symbol(\"invalid\");\n\n/**\n * @typedef {Object} FileSystemInfoEntry\n * @property {number} safeTime\n * @property {number=} timestamp\n */\n\n/**\n * @typedef {Object} ResolvedContextFileSystemInfoEntry\n * @property {number} safeTime\n * @property {string=} timestampHash\n */\n\n/**\n * @typedef {Object} ContextFileSystemInfoEntry\n * @property {number} safeTime\n * @property {string=} timestampHash\n * @property {ResolvedContextFileSystemInfoEntry=} resolved\n * @property {Set<string>=} symlinks\n */\n\n/**\n * @typedef {Object} TimestampAndHash\n * @property {number} safeTime\n * @property {number=} timestamp\n * @property {string} hash\n */\n\n/**\n * @typedef {Object} ResolvedContextTimestampAndHash\n * @property {number} safeTime\n * @property {string=} timestampHash\n * @property {string} hash\n */\n\n/**\n * @typedef {Object} ContextTimestampAndHash\n * @property {number} safeTime\n * @property {string=} timestampHash\n * @property {string} hash\n * @property {ResolvedContextTimestampAndHash=} resolved\n * @property {Set<string>=} symlinks\n */\n\n/**\n * @typedef {Object} ContextHash\n * @property {string} hash\n * @property {string=} resolved\n * @property {Set<string>=} symlinks\n */\n\n/**\n * @typedef {Object} SnapshotOptimizationEntry\n * @property {Snapshot} snapshot\n * @property {number} shared\n * @property {Set<string>} snapshotContent\n * @property {Set<SnapshotOptimizationEntry>} children\n */\n\n/**\n * @typedef {Object} ResolveBuildDependenciesResult\n * @property {Set<string>} files list of files\n * @property {Set<string>} directories list of directories\n * @property {Set<string>} missing list of missing entries\n * @property {Map<string, string | false>} resolveResults stored resolve results\n * @property {Object} resolveDependencies dependencies of the resolving\n * @property {Set<string>} resolveDependencies.files list of files\n * @property {Set<string>} resolveDependencies.directories list of directories\n * @property {Set<string>} resolveDependencies.missing list of missing entries\n */\n\nconst DONE_ITERATOR_RESULT = new Set().keys().next();\n\n// cspell:word tshs\n// Tsh = Timestamp + Hash\n// Tshs = Timestamp + Hash combinations\n\nclass SnapshotIterator {\n\tconstructor(next) {\n\t\tthis.next = next;\n\t}\n}\n\nclass SnapshotIterable {\n\tconstructor(snapshot, getMaps) {\n\t\tthis.snapshot = snapshot;\n\t\tthis.getMaps = getMaps;\n\t}\n\n\t[Symbol.iterator]() {\n\t\tlet state = 0;\n\t\t/** @type {IterableIterator<string>} */\n\t\tlet it;\n\t\t/** @type {(Snapshot) => (Map<string, any> | Set<string>)[]} */\n\t\tlet getMaps;\n\t\t/** @type {(Map<string, any> | Set<string>)[]} */\n\t\tlet maps;\n\t\t/** @type {Snapshot} */\n\t\tlet snapshot;\n\t\tlet queue;\n\t\treturn new SnapshotIterator(() => {\n\t\t\tfor (;;) {\n\t\t\t\tswitch (state) {\n\t\t\t\t\tcase 0:\n\t\t\t\t\t\tsnapshot = this.snapshot;\n\t\t\t\t\t\tgetMaps = this.getMaps;\n\t\t\t\t\t\tmaps = getMaps(snapshot);\n\t\t\t\t\t\tstate = 1;\n\t\t\t\t\t/* falls through */\n\t\t\t\t\tcase 1:\n\t\t\t\t\t\tif (maps.length > 0) {\n\t\t\t\t\t\t\tconst map = maps.pop();\n\t\t\t\t\t\t\tif (map !== undefined) {\n\t\t\t\t\t\t\t\tit = map.keys();\n\t\t\t\t\t\t\t\tstate = 2;\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tstate = 3;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t/* falls through */\n\t\t\t\t\tcase 2: {\n\t\t\t\t\t\tconst result = it.next();\n\t\t\t\t\t\tif (!result.done) return result;\n\t\t\t\t\t\tstate = 1;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tcase 3: {\n\t\t\t\t\t\tconst children = snapshot.children;\n\t\t\t\t\t\tif (children !== undefined) {\n\t\t\t\t\t\t\tif (children.size === 1) {\n\t\t\t\t\t\t\t\t// shortcut for a single child\n\t\t\t\t\t\t\t\t// avoids allocation of queue\n\t\t\t\t\t\t\t\tfor (const child of children) snapshot = child;\n\t\t\t\t\t\t\t\tmaps = getMaps(snapshot);\n\t\t\t\t\t\t\t\tstate = 1;\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif (queue === undefined) queue = [];\n\t\t\t\t\t\t\tfor (const child of children) {\n\t\t\t\t\t\t\t\tqueue.push(child);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (queue !== undefined && queue.length > 0) {\n\t\t\t\t\t\t\tsnapshot = queue.pop();\n\t\t\t\t\t\t\tmaps = getMaps(snapshot);\n\t\t\t\t\t\t\tstate = 1;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tstate = 4;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\t/* falls through */\n\t\t\t\t\tcase 4:\n\t\t\t\t\t\treturn DONE_ITERATOR_RESULT;\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t}\n}\n\nclass Snapshot {\n\tconstructor() {\n\t\tthis._flags = 0;\n\t\t/** @type {number | undefined} */\n\t\tthis.startTime = undefined;\n\t\t/** @type {Map<string, FileSystemInfoEntry | null> | undefined} */\n\t\tthis.fileTimestamps = undefined;\n\t\t/** @type {Map<string, string | null> | undefined} */\n\t\tthis.fileHashes = undefined;\n\t\t/** @type {Map<string, TimestampAndHash | string | null> | undefined} */\n\t\tthis.fileTshs = undefined;\n\t\t/** @type {Map<string, ResolvedContextFileSystemInfoEntry | null> | undefined} */\n\t\tthis.contextTimestamps = undefined;\n\t\t/** @type {Map<string, string | null> | undefined} */\n\t\tthis.contextHashes = undefined;\n\t\t/** @type {Map<string, ResolvedContextTimestampAndHash | null> | undefined} */\n\t\tthis.contextTshs = undefined;\n\t\t/** @type {Map<string, boolean> | undefined} */\n\t\tthis.missingExistence = undefined;\n\t\t/** @type {Map<string, string> | undefined} */\n\t\tthis.managedItemInfo = undefined;\n\t\t/** @type {Set<string> | undefined} */\n\t\tthis.managedFiles = undefined;\n\t\t/** @type {Set<string> | undefined} */\n\t\tthis.managedContexts = undefined;\n\t\t/** @type {Set<string> | undefined} */\n\t\tthis.managedMissing = undefined;\n\t\t/** @type {Set<Snapshot> | undefined} */\n\t\tthis.children = undefined;\n\t}\n\n\thasStartTime() {\n\t\treturn (this._flags & 1) !== 0;\n\t}\n\n\tsetStartTime(value) {\n\t\tthis._flags = this._flags | 1;\n\t\tthis.startTime = value;\n\t}\n\n\tsetMergedStartTime(value, snapshot) {\n\t\tif (value) {\n\t\t\tif (snapshot.hasStartTime()) {\n\t\t\t\tthis.setStartTime(Math.min(value, snapshot.startTime));\n\t\t\t} else {\n\t\t\t\tthis.setStartTime(value);\n\t\t\t}\n\t\t} else {\n\t\t\tif (snapshot.hasStartTime()) this.setStartTime(snapshot.startTime);\n\t\t}\n\t}\n\n\thasFileTimestamps() {\n\t\treturn (this._flags & 2) !== 0;\n\t}\n\n\tsetFileTimestamps(value) {\n\t\tthis._flags = this._flags | 2;\n\t\tthis.fileTimestamps = value;\n\t}\n\n\thasFileHashes() {\n\t\treturn (this._flags & 4) !== 0;\n\t}\n\n\tsetFileHashes(value) {\n\t\tthis._flags = this._flags | 4;\n\t\tthis.fileHashes = value;\n\t}\n\n\thasFileTshs() {\n\t\treturn (this._flags & 8) !== 0;\n\t}\n\n\tsetFileTshs(value) {\n\t\tthis._flags = this._flags | 8;\n\t\tthis.fileTshs = value;\n\t}\n\n\thasContextTimestamps() {\n\t\treturn (this._flags & 0x10) !== 0;\n\t}\n\n\tsetContextTimestamps(value) {\n\t\tthis._flags = this._flags | 0x10;\n\t\tthis.contextTimestamps = value;\n\t}\n\n\thasContextHashes() {\n\t\treturn (this._flags & 0x20) !== 0;\n\t}\n\n\tsetContextHashes(value) {\n\t\tthis._flags = this._flags | 0x20;\n\t\tthis.contextHashes = value;\n\t}\n\n\thasContextTshs() {\n\t\treturn (this._flags & 0x40) !== 0;\n\t}\n\n\tsetContextTshs(value) {\n\t\tthis._flags = this._flags | 0x40;\n\t\tthis.contextTshs = value;\n\t}\n\n\thasMissingExistence() {\n\t\treturn (this._flags & 0x80) !== 0;\n\t}\n\n\tsetMissingExistence(value) {\n\t\tthis._flags = this._flags | 0x80;\n\t\tthis.missingExistence = value;\n\t}\n\n\thasManagedItemInfo() {\n\t\treturn (this._flags & 0x100) !== 0;\n\t}\n\n\tsetManagedItemInfo(value) {\n\t\tthis._flags = this._flags | 0x100;\n\t\tthis.managedItemInfo = value;\n\t}\n\n\thasManagedFiles() {\n\t\treturn (this._flags & 0x200) !== 0;\n\t}\n\n\tsetManagedFiles(value) {\n\t\tthis._flags = this._flags | 0x200;\n\t\tthis.managedFiles = value;\n\t}\n\n\thasManagedContexts() {\n\t\treturn (this._flags & 0x400) !== 0;\n\t}\n\n\tsetManagedContexts(value) {\n\t\tthis._flags = this._flags | 0x400;\n\t\tthis.managedContexts = value;\n\t}\n\n\thasManagedMissing() {\n\t\treturn (this._flags & 0x800) !== 0;\n\t}\n\n\tsetManagedMissing(value) {\n\t\tthis._flags = this._flags | 0x800;\n\t\tthis.managedMissing = value;\n\t}\n\n\thasChildren() {\n\t\treturn (this._flags & 0x1000) !== 0;\n\t}\n\n\tsetChildren(value) {\n\t\tthis._flags = this._flags | 0x1000;\n\t\tthis.children = value;\n\t}\n\n\taddChild(child) {\n\t\tif (!this.hasChildren()) {\n\t\t\tthis.setChildren(new Set());\n\t\t}\n\t\tthis.children.add(child);\n\t}\n\n\tserialize({ write }) {\n\t\twrite(this._flags);\n\t\tif (this.hasStartTime()) write(this.startTime);\n\t\tif (this.hasFileTimestamps()) write(this.fileTimestamps);\n\t\tif (this.hasFileHashes()) write(this.fileHashes);\n\t\tif (this.hasFileTshs()) write(this.fileTshs);\n\t\tif (this.hasContextTimestamps()) write(this.contextTimestamps);\n\t\tif (this.hasContextHashes()) write(this.contextHashes);\n\t\tif (this.hasContextTshs()) write(this.contextTshs);\n\t\tif (this.hasMissingExistence()) write(this.missingExistence);\n\t\tif (this.hasManagedItemInfo()) write(this.managedItemInfo);\n\t\tif (this.hasManagedFiles()) write(this.managedFiles);\n\t\tif (this.hasManagedContexts()) write(this.managedContexts);\n\t\tif (this.hasManagedMissing()) write(this.managedMissing);\n\t\tif (this.hasChildren()) write(this.children);\n\t}\n\n\tdeserialize({ read }) {\n\t\tthis._flags = read();\n\t\tif (this.hasStartTime()) this.startTime = read();\n\t\tif (this.hasFileTimestamps()) this.fileTimestamps = read();\n\t\tif (this.hasFileHashes()) this.fileHashes = read();\n\t\tif (this.hasFileTshs()) this.fileTshs = read();\n\t\tif (this.hasContextTimestamps()) this.contextTimestamps = read();\n\t\tif (this.hasContextHashes()) this.contextHashes = read();\n\t\tif (this.hasContextTshs()) this.contextTshs = read();\n\t\tif (this.hasMissingExistence()) this.missingExistence = read();\n\t\tif (this.hasManagedItemInfo()) this.managedItemInfo = read();\n\t\tif (this.hasManagedFiles()) this.managedFiles = read();\n\t\tif (this.hasManagedContexts()) this.managedContexts = read();\n\t\tif (this.hasManagedMissing()) this.managedMissing = read();\n\t\tif (this.hasChildren()) this.children = read();\n\t}\n\n\t/**\n\t * @param {function(Snapshot): (ReadonlyMap<string, any> | ReadonlySet<string>)[]} getMaps first\n\t * @returns {Iterable<string>} iterable\n\t */\n\t_createIterable(getMaps) {\n\t\treturn new SnapshotIterable(this, getMaps);\n\t}\n\n\t/**\n\t * @returns {Iterable<string>} iterable\n\t */\n\tgetFileIterable() {\n\t\treturn this._createIterable(s => [\n\t\t\ts.fileTimestamps,\n\t\t\ts.fileHashes,\n\t\t\ts.fileTshs,\n\t\t\ts.managedFiles\n\t\t]);\n\t}\n\n\t/**\n\t * @returns {Iterable<string>} iterable\n\t */\n\tgetContextIterable() {\n\t\treturn this._createIterable(s => [\n\t\t\ts.contextTimestamps,\n\t\t\ts.contextHashes,\n\t\t\ts.contextTshs,\n\t\t\ts.managedContexts\n\t\t]);\n\t}\n\n\t/**\n\t * @returns {Iterable<string>} iterable\n\t */\n\tgetMissingIterable() {\n\t\treturn this._createIterable(s => [s.missingExistence, s.managedMissing]);\n\t}\n}\n\nmakeSerializable(Snapshot, \"webpack/lib/FileSystemInfo\", \"Snapshot\");\n\nconst MIN_COMMON_SNAPSHOT_SIZE = 3;\n\n/**\n * @template T\n */\nclass SnapshotOptimization {\n\t/**\n\t * @param {function(Snapshot): boolean} has has value\n\t * @param {function(Snapshot): Map<string, T> | Set<string>} get get value\n\t * @param {function(Snapshot, Map<string, T> | Set<string>): void} set set value\n\t * @param {boolean=} useStartTime use the start time of snapshots\n\t * @param {boolean=} isSet value is an Set instead of a Map\n\t */\n\tconstructor(has, get, set, useStartTime = true, isSet = false) {\n\t\tthis._has = has;\n\t\tthis._get = get;\n\t\tthis._set = set;\n\t\tthis._useStartTime = useStartTime;\n\t\tthis._isSet = isSet;\n\t\t/** @type {Map<string, SnapshotOptimizationEntry>} */\n\t\tthis._map = new Map();\n\t\tthis._statItemsShared = 0;\n\t\tthis._statItemsUnshared = 0;\n\t\tthis._statSharedSnapshots = 0;\n\t\tthis._statReusedSharedSnapshots = 0;\n\t}\n\n\tgetStatisticMessage() {\n\t\tconst total = this._statItemsShared + this._statItemsUnshared;\n\t\tif (total === 0) return undefined;\n\t\treturn `${\n\t\t\tthis._statItemsShared && Math.round((this._statItemsShared * 100) / total)\n\t\t}% (${this._statItemsShared}/${total}) entries shared via ${\n\t\t\tthis._statSharedSnapshots\n\t\t} shared snapshots (${\n\t\t\tthis._statReusedSharedSnapshots + this._statSharedSnapshots\n\t\t} times referenced)`;\n\t}\n\n\tclear() {\n\t\tthis._map.clear();\n\t\tthis._statItemsShared = 0;\n\t\tthis._statItemsUnshared = 0;\n\t\tthis._statSharedSnapshots = 0;\n\t\tthis._statReusedSharedSnapshots = 0;\n\t}\n\n\t/**\n\t * @param {Snapshot} newSnapshot snapshot\n\t * @param {Set<string>} capturedFiles files to snapshot/share\n\t * @returns {void}\n\t */\n\toptimize(newSnapshot, capturedFiles) {\n\t\t/**\n\t\t * @param {SnapshotOptimizationEntry} entry optimization entry\n\t\t * @returns {void}\n\t\t */\n\t\tconst increaseSharedAndStoreOptimizationEntry = entry => {\n\t\t\tif (entry.children !== undefined) {\n\t\t\t\tentry.children.forEach(increaseSharedAndStoreOptimizationEntry);\n\t\t\t}\n\t\t\tentry.shared++;\n\t\t\tstoreOptimizationEntry(entry);\n\t\t};\n\t\t/**\n\t\t * @param {SnapshotOptimizationEntry} entry optimization entry\n\t\t * @returns {void}\n\t\t */\n\t\tconst storeOptimizationEntry = entry => {\n\t\t\tfor (const path of entry.snapshotContent) {\n\t\t\t\tconst old = this._map.get(path);\n\t\t\t\tif (old.shared < entry.shared) {\n\t\t\t\t\tthis._map.set(path, entry);\n\t\t\t\t}\n\t\t\t\tcapturedFiles.delete(path);\n\t\t\t}\n\t\t};\n\n\t\t/** @type {SnapshotOptimizationEntry} */\n\t\tlet newOptimizationEntry = undefined;\n\n\t\tconst capturedFilesSize = capturedFiles.size;\n\n\t\t/** @type {Set<SnapshotOptimizationEntry> | undefined} */\n\t\tconst optimizationEntries = new Set();\n\n\t\tfor (const path of capturedFiles) {\n\t\t\tconst optimizationEntry = this._map.get(path);\n\t\t\tif (optimizationEntry === undefined) {\n\t\t\t\tif (newOptimizationEntry === undefined) {\n\t\t\t\t\tnewOptimizationEntry = {\n\t\t\t\t\t\tsnapshot: newSnapshot,\n\t\t\t\t\t\tshared: 0,\n\t\t\t\t\t\tsnapshotContent: undefined,\n\t\t\t\t\t\tchildren: undefined\n\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t\tthis._map.set(path, newOptimizationEntry);\n\t\t\t\tcontinue;\n\t\t\t} else {\n\t\t\t\toptimizationEntries.add(optimizationEntry);\n\t\t\t}\n\t\t}\n\n\t\toptimizationEntries: for (const optimizationEntry of optimizationEntries) {\n\t\t\tconst snapshot = optimizationEntry.snapshot;\n\t\t\tif (optimizationEntry.shared > 0) {\n\t\t\t\t// It's a shared snapshot\n\t\t\t\t// We can't change it, so we can only use it when all files match\n\t\t\t\t// and startTime is compatible\n\t\t\t\tif (\n\t\t\t\t\tthis._useStartTime &&\n\t\t\t\t\tnewSnapshot.startTime &&\n\t\t\t\t\t(!snapshot.startTime || snapshot.startTime > newSnapshot.startTime)\n\t\t\t\t) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tconst nonSharedFiles = new Set();\n\t\t\t\tconst snapshotContent = optimizationEntry.snapshotContent;\n\t\t\t\tconst snapshotEntries = this._get(snapshot);\n\t\t\t\tfor (const path of snapshotContent) {\n\t\t\t\t\tif (!capturedFiles.has(path)) {\n\t\t\t\t\t\tif (!snapshotEntries.has(path)) {\n\t\t\t\t\t\t\t// File is not shared and can't be removed from the snapshot\n\t\t\t\t\t\t\t// because it's in a child of the snapshot\n\t\t\t\t\t\t\tcontinue optimizationEntries;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tnonSharedFiles.add(path);\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (nonSharedFiles.size === 0) {\n\t\t\t\t\t// The complete snapshot is shared\n\t\t\t\t\t// add it as child\n\t\t\t\t\tnewSnapshot.addChild(snapshot);\n\t\t\t\t\tincreaseSharedAndStoreOptimizationEntry(optimizationEntry);\n\t\t\t\t\tthis._statReusedSharedSnapshots++;\n\t\t\t\t} else {\n\t\t\t\t\t// Only a part of the snapshot is shared\n\t\t\t\t\tconst sharedCount = snapshotContent.size - nonSharedFiles.size;\n\t\t\t\t\tif (sharedCount < MIN_COMMON_SNAPSHOT_SIZE) {\n\t\t\t\t\t\t// Common part it too small\n\t\t\t\t\t\tcontinue optimizationEntries;\n\t\t\t\t\t}\n\t\t\t\t\t// Extract common timestamps from both snapshots\n\t\t\t\t\tlet commonMap;\n\t\t\t\t\tif (this._isSet) {\n\t\t\t\t\t\tcommonMap = new Set();\n\t\t\t\t\t\tfor (const path of /** @type {Set<string>} */ (snapshotEntries)) {\n\t\t\t\t\t\t\tif (nonSharedFiles.has(path)) continue;\n\t\t\t\t\t\t\tcommonMap.add(path);\n\t\t\t\t\t\t\tsnapshotEntries.delete(path);\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tcommonMap = new Map();\n\t\t\t\t\t\tconst map = /** @type {Map<string, T>} */ (snapshotEntries);\n\t\t\t\t\t\tfor (const [path, value] of map) {\n\t\t\t\t\t\t\tif (nonSharedFiles.has(path)) continue;\n\t\t\t\t\t\t\tcommonMap.set(path, value);\n\t\t\t\t\t\t\tsnapshotEntries.delete(path);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\t// Create and attach snapshot\n\t\t\t\t\tconst commonSnapshot = new Snapshot();\n\t\t\t\t\tif (this._useStartTime) {\n\t\t\t\t\t\tcommonSnapshot.setMergedStartTime(newSnapshot.startTime, snapshot);\n\t\t\t\t\t}\n\t\t\t\t\tthis._set(commonSnapshot, commonMap);\n\t\t\t\t\tnewSnapshot.addChild(commonSnapshot);\n\t\t\t\t\tsnapshot.addChild(commonSnapshot);\n\t\t\t\t\t// Create optimization entry\n\t\t\t\t\tconst newEntry = {\n\t\t\t\t\t\tsnapshot: commonSnapshot,\n\t\t\t\t\t\tshared: optimizationEntry.shared + 1,\n\t\t\t\t\t\tsnapshotContent: new Set(commonMap.keys()),\n\t\t\t\t\t\tchildren: undefined\n\t\t\t\t\t};\n\t\t\t\t\tif (optimizationEntry.children === undefined)\n\t\t\t\t\t\toptimizationEntry.children = new Set();\n\t\t\t\t\toptimizationEntry.children.add(newEntry);\n\t\t\t\t\tstoreOptimizationEntry(newEntry);\n\t\t\t\t\tthis._statSharedSnapshots++;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t// It's a unshared snapshot\n\t\t\t\t// We can extract a common shared snapshot\n\t\t\t\t// with all common files\n\t\t\t\tconst snapshotEntries = this._get(snapshot);\n\t\t\t\tif (snapshotEntries === undefined) {\n\t\t\t\t\t// Incomplete snapshot, that can't be used\n\t\t\t\t\tcontinue optimizationEntries;\n\t\t\t\t}\n\t\t\t\tlet commonMap;\n\t\t\t\tif (this._isSet) {\n\t\t\t\t\tcommonMap = new Set();\n\t\t\t\t\tconst set = /** @type {Set<string>} */ (snapshotEntries);\n\t\t\t\t\tif (capturedFiles.size < set.size) {\n\t\t\t\t\t\tfor (const path of capturedFiles) {\n\t\t\t\t\t\t\tif (set.has(path)) commonMap.add(path);\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tfor (const path of set) {\n\t\t\t\t\t\t\tif (capturedFiles.has(path)) commonMap.add(path);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tcommonMap = new Map();\n\t\t\t\t\tconst map = /** @type {Map<string, T>} */ (snapshotEntries);\n\t\t\t\t\tfor (const path of capturedFiles) {\n\t\t\t\t\t\tconst ts = map.get(path);\n\t\t\t\t\t\tif (ts === undefined) continue;\n\t\t\t\t\t\tcommonMap.set(path, ts);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (commonMap.size < MIN_COMMON_SNAPSHOT_SIZE) {\n\t\t\t\t\t// Common part it too small\n\t\t\t\t\tcontinue optimizationEntries;\n\t\t\t\t}\n\t\t\t\t// Create and attach snapshot\n\t\t\t\tconst commonSnapshot = new Snapshot();\n\t\t\t\tif (this._useStartTime) {\n\t\t\t\t\tcommonSnapshot.setMergedStartTime(newSnapshot.startTime, snapshot);\n\t\t\t\t}\n\t\t\t\tthis._set(commonSnapshot, commonMap);\n\t\t\t\tnewSnapshot.addChild(commonSnapshot);\n\t\t\t\tsnapshot.addChild(commonSnapshot);\n\t\t\t\t// Remove files from snapshot\n\t\t\t\tfor (const path of commonMap.keys()) snapshotEntries.delete(path);\n\t\t\t\tconst sharedCount = commonMap.size;\n\t\t\t\tthis._statItemsUnshared -= sharedCount;\n\t\t\t\tthis._statItemsShared += sharedCount;\n\t\t\t\t// Create optimization entry\n\t\t\t\tstoreOptimizationEntry({\n\t\t\t\t\tsnapshot: commonSnapshot,\n\t\t\t\t\tshared: 2,\n\t\t\t\t\tsnapshotContent: new Set(commonMap.keys()),\n\t\t\t\t\tchildren: undefined\n\t\t\t\t});\n\t\t\t\tthis._statSharedSnapshots++;\n\t\t\t}\n\t\t}\n\t\tconst unshared = capturedFiles.size;\n\t\tthis._statItemsUnshared += unshared;\n\t\tthis._statItemsShared += capturedFilesSize - unshared;\n\t}\n}\n\nconst parseString = str => {\n\tif (str[0] === \"'\") str = `\"${str.slice(1, -1).replace(/\"/g, '\\\\\"')}\"`;\n\treturn JSON.parse(str);\n};\n\n/* istanbul ignore next */\n/**\n * @param {number} mtime mtime\n */\nconst applyMtime = mtime => {\n\tif (FS_ACCURACY > 1 && mtime % 2 !== 0) FS_ACCURACY = 1;\n\telse if (FS_ACCURACY > 10 && mtime % 20 !== 0) FS_ACCURACY = 10;\n\telse if (FS_ACCURACY > 100 && mtime % 200 !== 0) FS_ACCURACY = 100;\n\telse if (FS_ACCURACY > 1000 && mtime % 2000 !== 0) FS_ACCURACY = 1000;\n};\n\n/**\n * @template T\n * @template K\n * @param {Map<T, K>} a source map\n * @param {Map<T, K>} b joining map\n * @returns {Map<T, K>} joined map\n */\nconst mergeMaps = (a, b) => {\n\tif (!b || b.size === 0) return a;\n\tif (!a || a.size === 0) return b;\n\tconst map = new Map(a);\n\tfor (const [key, value] of b) {\n\t\tmap.set(key, value);\n\t}\n\treturn map;\n};\n\n/**\n * @template T\n * @template K\n * @param {Set<T, K>} a source map\n * @param {Set<T, K>} b joining map\n * @returns {Set<T, K>} joined map\n */\nconst mergeSets = (a, b) => {\n\tif (!b || b.size === 0) return a;\n\tif (!a || a.size === 0) return b;\n\tconst map = new Set(a);\n\tfor (const item of b) {\n\t\tmap.add(item);\n\t}\n\treturn map;\n};\n\n/**\n * Finding file or directory to manage\n * @param {string} managedPath path that is managing by {@link FileSystemInfo}\n * @param {string} path path to file or directory\n * @returns {string|null} managed item\n * @example\n * getManagedItem(\n *   '/Users/user/my-project/node_modules/',\n *   '/Users/user/my-project/node_modules/package/index.js'\n * ) === '/Users/user/my-project/node_modules/package'\n * getManagedItem(\n *   '/Users/user/my-project/node_modules/',\n *   '/Users/user/my-project/node_modules/package1/node_modules/package2'\n * ) === '/Users/user/my-project/node_modules/package1/node_modules/package2'\n * getManagedItem(\n *   '/Users/user/my-project/node_modules/',\n *   '/Users/user/my-project/node_modules/.bin/script.js'\n * ) === null // hidden files are disallowed as managed items\n * getManagedItem(\n *   '/Users/user/my-project/node_modules/',\n *   '/Users/user/my-project/node_modules/package'\n * ) === '/Users/user/my-project/node_modules/package'\n */\nconst getManagedItem = (managedPath, path) => {\n\tlet i = managedPath.length;\n\tlet slashes = 1;\n\tlet startingPosition = true;\n\tloop: while (i < path.length) {\n\t\tswitch (path.charCodeAt(i)) {\n\t\t\tcase 47: // slash\n\t\t\tcase 92: // backslash\n\t\t\t\tif (--slashes === 0) break loop;\n\t\t\t\tstartingPosition = true;\n\t\t\t\tbreak;\n\t\t\tcase 46: // .\n\t\t\t\t// hidden files are disallowed as managed items\n\t\t\t\t// it's probably .yarn-integrity or .cache\n\t\t\t\tif (startingPosition) return null;\n\t\t\t\tbreak;\n\t\t\tcase 64: // @\n\t\t\t\tif (!startingPosition) return null;\n\t\t\t\tslashes++;\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tstartingPosition = false;\n\t\t\t\tbreak;\n\t\t}\n\t\ti++;\n\t}\n\tif (i === path.length) slashes--;\n\t// return null when path is incomplete\n\tif (slashes !== 0) return null;\n\t// if (path.slice(i + 1, i + 13) === \"node_modules\")\n\tif (\n\t\tpath.length >= i + 13 &&\n\t\tpath.charCodeAt(i + 1) === 110 &&\n\t\tpath.charCodeAt(i + 2) === 111 &&\n\t\tpath.charCodeAt(i + 3) === 100 &&\n\t\tpath.charCodeAt(i + 4) === 101 &&\n\t\tpath.charCodeAt(i + 5) === 95 &&\n\t\tpath.charCodeAt(i + 6) === 109 &&\n\t\tpath.charCodeAt(i + 7) === 111 &&\n\t\tpath.charCodeAt(i + 8) === 100 &&\n\t\tpath.charCodeAt(i + 9) === 117 &&\n\t\tpath.charCodeAt(i + 10) === 108 &&\n\t\tpath.charCodeAt(i + 11) === 101 &&\n\t\tpath.charCodeAt(i + 12) === 115\n\t) {\n\t\t// if this is the end of the path\n\t\tif (path.length === i + 13) {\n\t\t\t// return the node_modules directory\n\t\t\t// it's special\n\t\t\treturn path;\n\t\t}\n\t\tconst c = path.charCodeAt(i + 13);\n\t\t// if next symbol is slash or backslash\n\t\tif (c === 47 || c === 92) {\n\t\t\t// Managed subpath\n\t\t\treturn getManagedItem(path.slice(0, i + 14), path);\n\t\t}\n\t}\n\treturn path.slice(0, i);\n};\n\n/**\n * @template {ContextFileSystemInfoEntry | ContextTimestampAndHash} T\n * @param {T} entry entry\n * @returns {T[\"resolved\"] | undefined} the resolved entry\n */\nconst getResolvedTimestamp = entry => {\n\tif (entry === null) return null;\n\tif (entry.resolved !== undefined) return entry.resolved;\n\treturn entry.symlinks === undefined ? entry : undefined;\n};\n\n/**\n * @param {ContextHash} entry entry\n * @returns {string | undefined} the resolved entry\n */\nconst getResolvedHash = entry => {\n\tif (entry === null) return null;\n\tif (entry.resolved !== undefined) return entry.resolved;\n\treturn entry.symlinks === undefined ? entry.hash : undefined;\n};\n\nconst addAll = (source, target) => {\n\tfor (const key of source) target.add(key);\n};\n\n/**\n * Used to access information about the filesystem in a cached way\n */\nclass FileSystemInfo {\n\t/**\n\t * @param {InputFileSystem} fs file system\n\t * @param {Object} options options\n\t * @param {Iterable<string | RegExp>=} options.managedPaths paths that are only managed by a package manager\n\t * @param {Iterable<string | RegExp>=} options.immutablePaths paths that are immutable\n\t * @param {Logger=} options.logger logger used to log invalid snapshots\n\t * @param {string | Hash=} options.hashFunction the hash function to use\n\t */\n\tconstructor(\n\t\tfs,\n\t\t{\n\t\t\tmanagedPaths = [],\n\t\t\timmutablePaths = [],\n\t\t\tlogger,\n\t\t\thashFunction = \"md4\"\n\t\t} = {}\n\t) {\n\t\tthis.fs = fs;\n\t\tthis.logger = logger;\n\t\tthis._remainingLogs = logger ? 40 : 0;\n\t\tthis._loggedPaths = logger ? new Set() : undefined;\n\t\tthis._hashFunction = hashFunction;\n\t\t/** @type {WeakMap<Snapshot, boolean | (function(WebpackError=, boolean=): void)[]>} */\n\t\tthis._snapshotCache = new WeakMap();\n\t\tthis._fileTimestampsOptimization = new SnapshotOptimization(\n\t\t\ts => s.hasFileTimestamps(),\n\t\t\ts => s.fileTimestamps,\n\t\t\t(s, v) => s.setFileTimestamps(v)\n\t\t);\n\t\tthis._fileHashesOptimization = new SnapshotOptimization(\n\t\t\ts => s.hasFileHashes(),\n\t\t\ts => s.fileHashes,\n\t\t\t(s, v) => s.setFileHashes(v),\n\t\t\tfalse\n\t\t);\n\t\tthis._fileTshsOptimization = new SnapshotOptimization(\n\t\t\ts => s.hasFileTshs(),\n\t\t\ts => s.fileTshs,\n\t\t\t(s, v) => s.setFileTshs(v)\n\t\t);\n\t\tthis._contextTimestampsOptimization = new SnapshotOptimization(\n\t\t\ts => s.hasContextTimestamps(),\n\t\t\ts => s.contextTimestamps,\n\t\t\t(s, v) => s.setContextTimestamps(v)\n\t\t);\n\t\tthis._contextHashesOptimization = new SnapshotOptimization(\n\t\t\ts => s.hasContextHashes(),\n\t\t\ts => s.contextHashes,\n\t\t\t(s, v) => s.setContextHashes(v),\n\t\t\tfalse\n\t\t);\n\t\tthis._contextTshsOptimization = new SnapshotOptimization(\n\t\t\ts => s.hasContextTshs(),\n\t\t\ts => s.contextTshs,\n\t\t\t(s, v) => s.setContextTshs(v)\n\t\t);\n\t\tthis._missingExistenceOptimization = new SnapshotOptimization(\n\t\t\ts => s.hasMissingExistence(),\n\t\t\ts => s.missingExistence,\n\t\t\t(s, v) => s.setMissingExistence(v),\n\t\t\tfalse\n\t\t);\n\t\tthis._managedItemInfoOptimization = new SnapshotOptimization(\n\t\t\ts => s.hasManagedItemInfo(),\n\t\t\ts => s.managedItemInfo,\n\t\t\t(s, v) => s.setManagedItemInfo(v),\n\t\t\tfalse\n\t\t);\n\t\tthis._managedFilesOptimization = new SnapshotOptimization(\n\t\t\ts => s.hasManagedFiles(),\n\t\t\ts => s.managedFiles,\n\t\t\t(s, v) => s.setManagedFiles(v),\n\t\t\tfalse,\n\t\t\ttrue\n\t\t);\n\t\tthis._managedContextsOptimization = new SnapshotOptimization(\n\t\t\ts => s.hasManagedContexts(),\n\t\t\ts => s.managedContexts,\n\t\t\t(s, v) => s.setManagedContexts(v),\n\t\t\tfalse,\n\t\t\ttrue\n\t\t);\n\t\tthis._managedMissingOptimization = new SnapshotOptimization(\n\t\t\ts => s.hasManagedMissing(),\n\t\t\ts => s.managedMissing,\n\t\t\t(s, v) => s.setManagedMissing(v),\n\t\t\tfalse,\n\t\t\ttrue\n\t\t);\n\t\t/** @type {StackedCacheMap<string, FileSystemInfoEntry | \"ignore\" | null>} */\n\t\tthis._fileTimestamps = new StackedCacheMap();\n\t\t/** @type {Map<string, string>} */\n\t\tthis._fileHashes = new Map();\n\t\t/** @type {Map<string, TimestampAndHash | string>} */\n\t\tthis._fileTshs = new Map();\n\t\t/** @type {StackedCacheMap<string, ContextFileSystemInfoEntry | \"ignore\" | null>} */\n\t\tthis._contextTimestamps = new StackedCacheMap();\n\t\t/** @type {Map<string, ContextHash>} */\n\t\tthis._contextHashes = new Map();\n\t\t/** @type {Map<string, ContextTimestampAndHash>} */\n\t\tthis._contextTshs = new Map();\n\t\t/** @type {Map<string, string>} */\n\t\tthis._managedItems = new Map();\n\t\t/** @type {AsyncQueue<string, string, FileSystemInfoEntry | null>} */\n\t\tthis.fileTimestampQueue = new AsyncQueue({\n\t\t\tname: \"file timestamp\",\n\t\t\tparallelism: 30,\n\t\t\tprocessor: this._readFileTimestamp.bind(this)\n\t\t});\n\t\t/** @type {AsyncQueue<string, string, string | null>} */\n\t\tthis.fileHashQueue = new AsyncQueue({\n\t\t\tname: \"file hash\",\n\t\t\tparallelism: 10,\n\t\t\tprocessor: this._readFileHash.bind(this)\n\t\t});\n\t\t/** @type {AsyncQueue<string, string, ContextFileSystemInfoEntry | null>} */\n\t\tthis.contextTimestampQueue = new AsyncQueue({\n\t\t\tname: \"context timestamp\",\n\t\t\tparallelism: 2,\n\t\t\tprocessor: this._readContextTimestamp.bind(this)\n\t\t});\n\t\t/** @type {AsyncQueue<string, string, ContextHash | null>} */\n\t\tthis.contextHashQueue = new AsyncQueue({\n\t\t\tname: \"context hash\",\n\t\t\tparallelism: 2,\n\t\t\tprocessor: this._readContextHash.bind(this)\n\t\t});\n\t\t/** @type {AsyncQueue<string, string, ContextTimestampAndHash | null>} */\n\t\tthis.contextTshQueue = new AsyncQueue({\n\t\t\tname: \"context hash and timestamp\",\n\t\t\tparallelism: 2,\n\t\t\tprocessor: this._readContextTimestampAndHash.bind(this)\n\t\t});\n\t\t/** @type {AsyncQueue<string, string, string | null>} */\n\t\tthis.managedItemQueue = new AsyncQueue({\n\t\t\tname: \"managed item info\",\n\t\t\tparallelism: 10,\n\t\t\tprocessor: this._getManagedItemInfo.bind(this)\n\t\t});\n\t\t/** @type {AsyncQueue<string, string, Set<string>>} */\n\t\tthis.managedItemDirectoryQueue = new AsyncQueue({\n\t\t\tname: \"managed item directory info\",\n\t\t\tparallelism: 10,\n\t\t\tprocessor: this._getManagedItemDirectoryInfo.bind(this)\n\t\t});\n\t\tthis.managedPaths = Array.from(managedPaths);\n\t\tthis.managedPathsWithSlash = /** @type {string[]} */ (\n\t\t\tthis.managedPaths.filter(p => typeof p === \"string\")\n\t\t).map(p => join(fs, p, \"_\").slice(0, -1));\n\n\t\tthis.managedPathsRegExps = /** @type {RegExp[]} */ (\n\t\t\tthis.managedPaths.filter(p => typeof p !== \"string\")\n\t\t);\n\t\tthis.immutablePaths = Array.from(immutablePaths);\n\t\tthis.immutablePathsWithSlash = /** @type {string[]} */ (\n\t\t\tthis.immutablePaths.filter(p => typeof p === \"string\")\n\t\t).map(p => join(fs, p, \"_\").slice(0, -1));\n\t\tthis.immutablePathsRegExps = /** @type {RegExp[]} */ (\n\t\t\tthis.immutablePaths.filter(p => typeof p !== \"string\")\n\t\t);\n\n\t\tthis._cachedDeprecatedFileTimestamps = undefined;\n\t\tthis._cachedDeprecatedContextTimestamps = undefined;\n\n\t\tthis._warnAboutExperimentalEsmTracking = false;\n\n\t\tthis._statCreatedSnapshots = 0;\n\t\tthis._statTestedSnapshotsCached = 0;\n\t\tthis._statTestedSnapshotsNotCached = 0;\n\t\tthis._statTestedChildrenCached = 0;\n\t\tthis._statTestedChildrenNotCached = 0;\n\t\tthis._statTestedEntries = 0;\n\t}\n\n\tlogStatistics() {\n\t\tconst logWhenMessage = (header, message) => {\n\t\t\tif (message) {\n\t\t\t\tthis.logger.log(`${header}: ${message}`);\n\t\t\t}\n\t\t};\n\t\tthis.logger.log(`${this._statCreatedSnapshots} new snapshots created`);\n\t\tthis.logger.log(\n\t\t\t`${\n\t\t\t\tthis._statTestedSnapshotsNotCached &&\n\t\t\t\tMath.round(\n\t\t\t\t\t(this._statTestedSnapshotsNotCached * 100) /\n\t\t\t\t\t\t(this._statTestedSnapshotsCached +\n\t\t\t\t\t\t\tthis._statTestedSnapshotsNotCached)\n\t\t\t\t)\n\t\t\t}% root snapshot uncached (${this._statTestedSnapshotsNotCached} / ${\n\t\t\t\tthis._statTestedSnapshotsCached + this._statTestedSnapshotsNotCached\n\t\t\t})`\n\t\t);\n\t\tthis.logger.log(\n\t\t\t`${\n\t\t\t\tthis._statTestedChildrenNotCached &&\n\t\t\t\tMath.round(\n\t\t\t\t\t(this._statTestedChildrenNotCached * 100) /\n\t\t\t\t\t\t(this._statTestedChildrenCached + this._statTestedChildrenNotCached)\n\t\t\t\t)\n\t\t\t}% children snapshot uncached (${this._statTestedChildrenNotCached} / ${\n\t\t\t\tthis._statTestedChildrenCached + this._statTestedChildrenNotCached\n\t\t\t})`\n\t\t);\n\t\tthis.logger.log(`${this._statTestedEntries} entries tested`);\n\t\tthis.logger.log(\n\t\t\t`File info in cache: ${this._fileTimestamps.size} timestamps ${this._fileHashes.size} hashes ${this._fileTshs.size} timestamp hash combinations`\n\t\t);\n\t\tlogWhenMessage(\n\t\t\t`File timestamp snapshot optimization`,\n\t\t\tthis._fileTimestampsOptimization.getStatisticMessage()\n\t\t);\n\t\tlogWhenMessage(\n\t\t\t`File hash snapshot optimization`,\n\t\t\tthis._fileHashesOptimization.getStatisticMessage()\n\t\t);\n\t\tlogWhenMessage(\n\t\t\t`File timestamp hash combination snapshot optimization`,\n\t\t\tthis._fileTshsOptimization.getStatisticMessage()\n\t\t);\n\t\tthis.logger.log(\n\t\t\t`Directory info in cache: ${this._contextTimestamps.size} timestamps ${this._contextHashes.size} hashes ${this._contextTshs.size} timestamp hash combinations`\n\t\t);\n\t\tlogWhenMessage(\n\t\t\t`Directory timestamp snapshot optimization`,\n\t\t\tthis._contextTimestampsOptimization.getStatisticMessage()\n\t\t);\n\t\tlogWhenMessage(\n\t\t\t`Directory hash snapshot optimization`,\n\t\t\tthis._contextHashesOptimization.getStatisticMessage()\n\t\t);\n\t\tlogWhenMessage(\n\t\t\t`Directory timestamp hash combination snapshot optimization`,\n\t\t\tthis._contextTshsOptimization.getStatisticMessage()\n\t\t);\n\t\tlogWhenMessage(\n\t\t\t`Missing items snapshot optimization`,\n\t\t\tthis._missingExistenceOptimization.getStatisticMessage()\n\t\t);\n\t\tthis.logger.log(\n\t\t\t`Managed items info in cache: ${this._managedItems.size} items`\n\t\t);\n\t\tlogWhenMessage(\n\t\t\t`Managed items snapshot optimization`,\n\t\t\tthis._managedItemInfoOptimization.getStatisticMessage()\n\t\t);\n\t\tlogWhenMessage(\n\t\t\t`Managed files snapshot optimization`,\n\t\t\tthis._managedFilesOptimization.getStatisticMessage()\n\t\t);\n\t\tlogWhenMessage(\n\t\t\t`Managed contexts snapshot optimization`,\n\t\t\tthis._managedContextsOptimization.getStatisticMessage()\n\t\t);\n\t\tlogWhenMessage(\n\t\t\t`Managed missing snapshot optimization`,\n\t\t\tthis._managedMissingOptimization.getStatisticMessage()\n\t\t);\n\t}\n\n\t_log(path, reason, ...args) {\n\t\tconst key = path + reason;\n\t\tif (this._loggedPaths.has(key)) return;\n\t\tthis._loggedPaths.add(key);\n\t\tthis.logger.debug(`${path} invalidated because ${reason}`, ...args);\n\t\tif (--this._remainingLogs === 0) {\n\t\t\tthis.logger.debug(\n\t\t\t\t\"Logging limit has been reached and no further logging will be emitted by FileSystemInfo\"\n\t\t\t);\n\t\t}\n\t}\n\n\tclear() {\n\t\tthis._remainingLogs = this.logger ? 40 : 0;\n\t\tif (this._loggedPaths !== undefined) this._loggedPaths.clear();\n\n\t\tthis._snapshotCache = new WeakMap();\n\t\tthis._fileTimestampsOptimization.clear();\n\t\tthis._fileHashesOptimization.clear();\n\t\tthis._fileTshsOptimization.clear();\n\t\tthis._contextTimestampsOptimization.clear();\n\t\tthis._contextHashesOptimization.clear();\n\t\tthis._contextTshsOptimization.clear();\n\t\tthis._missingExistenceOptimization.clear();\n\t\tthis._managedItemInfoOptimization.clear();\n\t\tthis._managedFilesOptimization.clear();\n\t\tthis._managedContextsOptimization.clear();\n\t\tthis._managedMissingOptimization.clear();\n\t\tthis._fileTimestamps.clear();\n\t\tthis._fileHashes.clear();\n\t\tthis._fileTshs.clear();\n\t\tthis._contextTimestamps.clear();\n\t\tthis._contextHashes.clear();\n\t\tthis._contextTshs.clear();\n\t\tthis._managedItems.clear();\n\t\tthis._managedItems.clear();\n\n\t\tthis._cachedDeprecatedFileTimestamps = undefined;\n\t\tthis._cachedDeprecatedContextTimestamps = undefined;\n\n\t\tthis._statCreatedSnapshots = 0;\n\t\tthis._statTestedSnapshotsCached = 0;\n\t\tthis._statTestedSnapshotsNotCached = 0;\n\t\tthis._statTestedChildrenCached = 0;\n\t\tthis._statTestedChildrenNotCached = 0;\n\t\tthis._statTestedEntries = 0;\n\t}\n\n\t/**\n\t * @param {ReadonlyMap<string, FileSystemInfoEntry | \"ignore\" | null>} map timestamps\n\t * @param {boolean=} immutable if 'map' is immutable and FileSystemInfo can keep referencing it\n\t * @returns {void}\n\t */\n\taddFileTimestamps(map, immutable) {\n\t\tthis._fileTimestamps.addAll(map, immutable);\n\t\tthis._cachedDeprecatedFileTimestamps = undefined;\n\t}\n\n\t/**\n\t * @param {ReadonlyMap<string, FileSystemInfoEntry | \"ignore\" | null>} map timestamps\n\t * @param {boolean=} immutable if 'map' is immutable and FileSystemInfo can keep referencing it\n\t * @returns {void}\n\t */\n\taddContextTimestamps(map, immutable) {\n\t\tthis._contextTimestamps.addAll(map, immutable);\n\t\tthis._cachedDeprecatedContextTimestamps = undefined;\n\t}\n\n\t/**\n\t * @param {string} path file path\n\t * @param {function((WebpackError | null)=, (FileSystemInfoEntry | \"ignore\" | null)=): void} callback callback function\n\t * @returns {void}\n\t */\n\tgetFileTimestamp(path, callback) {\n\t\tconst cache = this._fileTimestamps.get(path);\n\t\tif (cache !== undefined) return callback(null, cache);\n\t\tthis.fileTimestampQueue.add(path, callback);\n\t}\n\n\t/**\n\t * @param {string} path context path\n\t * @param {function((WebpackError | null)=, (ResolvedContextFileSystemInfoEntry | \"ignore\" | null)=): void} callback callback function\n\t * @returns {void}\n\t */\n\tgetContextTimestamp(path, callback) {\n\t\tconst cache = this._contextTimestamps.get(path);\n\t\tif (cache !== undefined) {\n\t\t\tif (cache === \"ignore\") return callback(null, \"ignore\");\n\t\t\tconst resolved = getResolvedTimestamp(cache);\n\t\t\tif (resolved !== undefined) return callback(null, resolved);\n\t\t\treturn this._resolveContextTimestamp(cache, callback);\n\t\t}\n\t\tthis.contextTimestampQueue.add(path, (err, entry) => {\n\t\t\tif (err) return callback(err);\n\t\t\tconst resolved = getResolvedTimestamp(entry);\n\t\t\tif (resolved !== undefined) return callback(null, resolved);\n\t\t\tthis._resolveContextTimestamp(entry, callback);\n\t\t});\n\t}\n\n\t/**\n\t * @param {string} path context path\n\t * @param {function((WebpackError | null)=, (ContextFileSystemInfoEntry | \"ignore\" | null)=): void} callback callback function\n\t * @returns {void}\n\t */\n\t_getUnresolvedContextTimestamp(path, callback) {\n\t\tconst cache = this._contextTimestamps.get(path);\n\t\tif (cache !== undefined) return callback(null, cache);\n\t\tthis.contextTimestampQueue.add(path, callback);\n\t}\n\n\t/**\n\t * @param {string} path file path\n\t * @param {function((WebpackError | null)=, string=): void} callback callback function\n\t * @returns {void}\n\t */\n\tgetFileHash(path, callback) {\n\t\tconst cache = this._fileHashes.get(path);\n\t\tif (cache !== undefined) return callback(null, cache);\n\t\tthis.fileHashQueue.add(path, callback);\n\t}\n\n\t/**\n\t * @param {string} path context path\n\t * @param {function((WebpackError | null)=, string=): void} callback callback function\n\t * @returns {void}\n\t */\n\tgetContextHash(path, callback) {\n\t\tconst cache = this._contextHashes.get(path);\n\t\tif (cache !== undefined) {\n\t\t\tconst resolved = getResolvedHash(cache);\n\t\t\tif (resolved !== undefined) return callback(null, resolved);\n\t\t\treturn this._resolveContextHash(cache, callback);\n\t\t}\n\t\tthis.contextHashQueue.add(path, (err, entry) => {\n\t\t\tif (err) return callback(err);\n\t\t\tconst resolved = getResolvedHash(entry);\n\t\t\tif (resolved !== undefined) return callback(null, resolved);\n\t\t\tthis._resolveContextHash(entry, callback);\n\t\t});\n\t}\n\n\t/**\n\t * @param {string} path context path\n\t * @param {function((WebpackError | null)=, ContextHash=): void} callback callback function\n\t * @returns {void}\n\t */\n\t_getUnresolvedContextHash(path, callback) {\n\t\tconst cache = this._contextHashes.get(path);\n\t\tif (cache !== undefined) return callback(null, cache);\n\t\tthis.contextHashQueue.add(path, callback);\n\t}\n\n\t/**\n\t * @param {string} path context path\n\t * @param {function((WebpackError | null)=, ResolvedContextTimestampAndHash=): void} callback callback function\n\t * @returns {void}\n\t */\n\tgetContextTsh(path, callback) {\n\t\tconst cache = this._contextTshs.get(path);\n\t\tif (cache !== undefined) {\n\t\t\tconst resolved = getResolvedTimestamp(cache);\n\t\t\tif (resolved !== undefined) return callback(null, resolved);\n\t\t\treturn this._resolveContextTsh(cache, callback);\n\t\t}\n\t\tthis.contextTshQueue.add(path, (err, entry) => {\n\t\t\tif (err) return callback(err);\n\t\t\tconst resolved = getResolvedTimestamp(entry);\n\t\t\tif (resolved !== undefined) return callback(null, resolved);\n\t\t\tthis._resolveContextTsh(entry, callback);\n\t\t});\n\t}\n\n\t/**\n\t * @param {string} path context path\n\t * @param {function((WebpackError | null)=, ContextTimestampAndHash=): void} callback callback function\n\t * @returns {void}\n\t */\n\t_getUnresolvedContextTsh(path, callback) {\n\t\tconst cache = this._contextTshs.get(path);\n\t\tif (cache !== undefined) return callback(null, cache);\n\t\tthis.contextTshQueue.add(path, callback);\n\t}\n\n\t_createBuildDependenciesResolvers() {\n\t\tconst resolveContext = createResolver({\n\t\t\tresolveToContext: true,\n\t\t\texportsFields: [],\n\t\t\tfileSystem: this.fs\n\t\t});\n\t\tconst resolveCjs = createResolver({\n\t\t\textensions: [\".js\", \".json\", \".node\"],\n\t\t\tconditionNames: [\"require\", \"node\"],\n\t\t\texportsFields: [\"exports\"],\n\t\t\tfileSystem: this.fs\n\t\t});\n\t\tconst resolveCjsAsChild = createResolver({\n\t\t\textensions: [\".js\", \".json\", \".node\"],\n\t\t\tconditionNames: [\"require\", \"node\"],\n\t\t\texportsFields: [],\n\t\t\tfileSystem: this.fs\n\t\t});\n\t\tconst resolveEsm = createResolver({\n\t\t\textensions: [\".js\", \".json\", \".node\"],\n\t\t\tfullySpecified: true,\n\t\t\tconditionNames: [\"import\", \"node\"],\n\t\t\texportsFields: [\"exports\"],\n\t\t\tfileSystem: this.fs\n\t\t});\n\t\treturn { resolveContext, resolveEsm, resolveCjs, resolveCjsAsChild };\n\t}\n\n\t/**\n\t * @param {string} context context directory\n\t * @param {Iterable<string>} deps dependencies\n\t * @param {function((Error | null)=, ResolveBuildDependenciesResult=): void} callback callback function\n\t * @returns {void}\n\t */\n\tresolveBuildDependencies(context, deps, callback) {\n\t\tconst { resolveContext, resolveEsm, resolveCjs, resolveCjsAsChild } =\n\t\t\tthis._createBuildDependenciesResolvers();\n\n\t\t/** @type {Set<string>} */\n\t\tconst files = new Set();\n\t\t/** @type {Set<string>} */\n\t\tconst fileSymlinks = new Set();\n\t\t/** @type {Set<string>} */\n\t\tconst directories = new Set();\n\t\t/** @type {Set<string>} */\n\t\tconst directorySymlinks = new Set();\n\t\t/** @type {Set<string>} */\n\t\tconst missing = new Set();\n\t\t/** @type {Set<string>} */\n\t\tconst resolveFiles = new Set();\n\t\t/** @type {Set<string>} */\n\t\tconst resolveDirectories = new Set();\n\t\t/** @type {Set<string>} */\n\t\tconst resolveMissing = new Set();\n\t\t/** @type {Map<string, string | false>} */\n\t\tconst resolveResults = new Map();\n\t\tconst invalidResolveResults = new Set();\n\t\tconst resolverContext = {\n\t\t\tfileDependencies: resolveFiles,\n\t\t\tcontextDependencies: resolveDirectories,\n\t\t\tmissingDependencies: resolveMissing\n\t\t};\n\t\tconst expectedToString = expected => {\n\t\t\treturn expected ? ` (expected ${expected})` : \"\";\n\t\t};\n\t\tconst jobToString = job => {\n\t\t\tswitch (job.type) {\n\t\t\t\tcase RBDT_RESOLVE_CJS:\n\t\t\t\t\treturn `resolve commonjs ${job.path}${expectedToString(\n\t\t\t\t\t\tjob.expected\n\t\t\t\t\t)}`;\n\t\t\t\tcase RBDT_RESOLVE_ESM:\n\t\t\t\t\treturn `resolve esm ${job.path}${expectedToString(job.expected)}`;\n\t\t\t\tcase RBDT_RESOLVE_DIRECTORY:\n\t\t\t\t\treturn `resolve directory ${job.path}`;\n\t\t\t\tcase RBDT_RESOLVE_CJS_FILE:\n\t\t\t\t\treturn `resolve commonjs file ${job.path}${expectedToString(\n\t\t\t\t\t\tjob.expected\n\t\t\t\t\t)}`;\n\t\t\t\tcase RBDT_RESOLVE_ESM_FILE:\n\t\t\t\t\treturn `resolve esm file ${job.path}${expectedToString(\n\t\t\t\t\t\tjob.expected\n\t\t\t\t\t)}`;\n\t\t\t\tcase RBDT_DIRECTORY:\n\t\t\t\t\treturn `directory ${job.path}`;\n\t\t\t\tcase RBDT_FILE:\n\t\t\t\t\treturn `file ${job.path}`;\n\t\t\t\tcase RBDT_DIRECTORY_DEPENDENCIES:\n\t\t\t\t\treturn `directory dependencies ${job.path}`;\n\t\t\t\tcase RBDT_FILE_DEPENDENCIES:\n\t\t\t\t\treturn `file dependencies ${job.path}`;\n\t\t\t}\n\t\t\treturn `unknown ${job.type} ${job.path}`;\n\t\t};\n\t\tconst pathToString = job => {\n\t\t\tlet result = ` at ${jobToString(job)}`;\n\t\t\tjob = job.issuer;\n\t\t\twhile (job !== undefined) {\n\t\t\t\tresult += `\\n at ${jobToString(job)}`;\n\t\t\t\tjob = job.issuer;\n\t\t\t}\n\t\t\treturn result;\n\t\t};\n\t\tprocessAsyncTree(\n\t\t\tArray.from(deps, dep => ({\n\t\t\t\ttype: RBDT_RESOLVE_CJS,\n\t\t\t\tcontext,\n\t\t\t\tpath: dep,\n\t\t\t\texpected: undefined,\n\t\t\t\tissuer: undefined\n\t\t\t})),\n\t\t\t20,\n\t\t\t(job, push, callback) => {\n\t\t\t\tconst { type, context, path, expected } = job;\n\t\t\t\tconst resolveDirectory = path => {\n\t\t\t\t\tconst key = `d\\n${context}\\n${path}`;\n\t\t\t\t\tif (resolveResults.has(key)) {\n\t\t\t\t\t\treturn callback();\n\t\t\t\t\t}\n\t\t\t\t\tresolveResults.set(key, undefined);\n\t\t\t\t\tresolveContext(context, path, resolverContext, (err, _, result) => {\n\t\t\t\t\t\tif (err) {\n\t\t\t\t\t\t\tif (expected === false) {\n\t\t\t\t\t\t\t\tresolveResults.set(key, false);\n\t\t\t\t\t\t\t\treturn callback();\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tinvalidResolveResults.add(key);\n\t\t\t\t\t\t\terr.message += `\\nwhile resolving '${path}' in ${context} to a directory`;\n\t\t\t\t\t\t\treturn callback(err);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tconst resultPath = result.path;\n\t\t\t\t\t\tresolveResults.set(key, resultPath);\n\t\t\t\t\t\tpush({\n\t\t\t\t\t\t\ttype: RBDT_DIRECTORY,\n\t\t\t\t\t\t\tcontext: undefined,\n\t\t\t\t\t\t\tpath: resultPath,\n\t\t\t\t\t\t\texpected: undefined,\n\t\t\t\t\t\t\tissuer: job\n\t\t\t\t\t\t});\n\t\t\t\t\t\tcallback();\n\t\t\t\t\t});\n\t\t\t\t};\n\t\t\t\tconst resolveFile = (path, symbol, resolve) => {\n\t\t\t\t\tconst key = `${symbol}\\n${context}\\n${path}`;\n\t\t\t\t\tif (resolveResults.has(key)) {\n\t\t\t\t\t\treturn callback();\n\t\t\t\t\t}\n\t\t\t\t\tresolveResults.set(key, undefined);\n\t\t\t\t\tresolve(context, path, resolverContext, (err, _, result) => {\n\t\t\t\t\t\tif (typeof expected === \"string\") {\n\t\t\t\t\t\t\tif (!err && result && result.path === expected) {\n\t\t\t\t\t\t\t\tresolveResults.set(key, result.path);\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tinvalidResolveResults.add(key);\n\t\t\t\t\t\t\t\tthis.logger.warn(\n\t\t\t\t\t\t\t\t\t`Resolving '${path}' in ${context} for build dependencies doesn't lead to expected result '${expected}', but to '${\n\t\t\t\t\t\t\t\t\t\terr || (result && result.path)\n\t\t\t\t\t\t\t\t\t}' instead. Resolving dependencies are ignored for this path.\\n${pathToString(\n\t\t\t\t\t\t\t\t\t\tjob\n\t\t\t\t\t\t\t\t\t)}`\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tif (err) {\n\t\t\t\t\t\t\t\tif (expected === false) {\n\t\t\t\t\t\t\t\t\tresolveResults.set(key, false);\n\t\t\t\t\t\t\t\t\treturn callback();\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tinvalidResolveResults.add(key);\n\t\t\t\t\t\t\t\terr.message += `\\nwhile resolving '${path}' in ${context} as file\\n${pathToString(\n\t\t\t\t\t\t\t\t\tjob\n\t\t\t\t\t\t\t\t)}`;\n\t\t\t\t\t\t\t\treturn callback(err);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tconst resultPath = result.path;\n\t\t\t\t\t\t\tresolveResults.set(key, resultPath);\n\t\t\t\t\t\t\tpush({\n\t\t\t\t\t\t\t\ttype: RBDT_FILE,\n\t\t\t\t\t\t\t\tcontext: undefined,\n\t\t\t\t\t\t\t\tpath: resultPath,\n\t\t\t\t\t\t\t\texpected: undefined,\n\t\t\t\t\t\t\t\tissuer: job\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t}\n\t\t\t\t\t\tcallback();\n\t\t\t\t\t});\n\t\t\t\t};\n\t\t\t\tswitch (type) {\n\t\t\t\t\tcase RBDT_RESOLVE_CJS: {\n\t\t\t\t\t\tconst isDirectory = /[\\\\/]$/.test(path);\n\t\t\t\t\t\tif (isDirectory) {\n\t\t\t\t\t\t\tresolveDirectory(path.slice(0, path.length - 1));\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tresolveFile(path, \"f\", resolveCjs);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tcase RBDT_RESOLVE_ESM: {\n\t\t\t\t\t\tconst isDirectory = /[\\\\/]$/.test(path);\n\t\t\t\t\t\tif (isDirectory) {\n\t\t\t\t\t\t\tresolveDirectory(path.slice(0, path.length - 1));\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tresolveFile(path);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tcase RBDT_RESOLVE_DIRECTORY: {\n\t\t\t\t\t\tresolveDirectory(path);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tcase RBDT_RESOLVE_CJS_FILE: {\n\t\t\t\t\t\tresolveFile(path, \"f\", resolveCjs);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tcase RBDT_RESOLVE_CJS_FILE_AS_CHILD: {\n\t\t\t\t\t\tresolveFile(path, \"c\", resolveCjsAsChild);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tcase RBDT_RESOLVE_ESM_FILE: {\n\t\t\t\t\t\tresolveFile(path, \"e\", resolveEsm);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tcase RBDT_FILE: {\n\t\t\t\t\t\tif (files.has(path)) {\n\t\t\t\t\t\t\tcallback();\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tfiles.add(path);\n\t\t\t\t\t\tthis.fs.realpath(path, (err, _realPath) => {\n\t\t\t\t\t\t\tif (err) return callback(err);\n\t\t\t\t\t\t\tconst realPath = /** @type {string} */ (_realPath);\n\t\t\t\t\t\t\tif (realPath !== path) {\n\t\t\t\t\t\t\t\tfileSymlinks.add(path);\n\t\t\t\t\t\t\t\tresolveFiles.add(path);\n\t\t\t\t\t\t\t\tif (files.has(realPath)) return callback();\n\t\t\t\t\t\t\t\tfiles.add(realPath);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tpush({\n\t\t\t\t\t\t\t\ttype: RBDT_FILE_DEPENDENCIES,\n\t\t\t\t\t\t\t\tcontext: undefined,\n\t\t\t\t\t\t\t\tpath: realPath,\n\t\t\t\t\t\t\t\texpected: undefined,\n\t\t\t\t\t\t\t\tissuer: job\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\tcallback();\n\t\t\t\t\t\t});\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tcase RBDT_DIRECTORY: {\n\t\t\t\t\t\tif (directories.has(path)) {\n\t\t\t\t\t\t\tcallback();\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tdirectories.add(path);\n\t\t\t\t\t\tthis.fs.realpath(path, (err, _realPath) => {\n\t\t\t\t\t\t\tif (err) return callback(err);\n\t\t\t\t\t\t\tconst realPath = /** @type {string} */ (_realPath);\n\t\t\t\t\t\t\tif (realPath !== path) {\n\t\t\t\t\t\t\t\tdirectorySymlinks.add(path);\n\t\t\t\t\t\t\t\tresolveFiles.add(path);\n\t\t\t\t\t\t\t\tif (directories.has(realPath)) return callback();\n\t\t\t\t\t\t\t\tdirectories.add(realPath);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tpush({\n\t\t\t\t\t\t\t\ttype: RBDT_DIRECTORY_DEPENDENCIES,\n\t\t\t\t\t\t\t\tcontext: undefined,\n\t\t\t\t\t\t\t\tpath: realPath,\n\t\t\t\t\t\t\t\texpected: undefined,\n\t\t\t\t\t\t\t\tissuer: job\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\tcallback();\n\t\t\t\t\t\t});\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tcase RBDT_FILE_DEPENDENCIES: {\n\t\t\t\t\t\t// Check for known files without dependencies\n\t\t\t\t\t\tif (/\\.json5?$|\\.yarn-integrity$|yarn\\.lock$|\\.ya?ml/.test(path)) {\n\t\t\t\t\t\t\tprocess.nextTick(callback);\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t\t// Check commonjs cache for the module\n\t\t\t\t\t\t/** @type {NodeModule} */\n\t\t\t\t\t\tconst module = require.cache[path];\n\t\t\t\t\t\tif (module && Array.isArray(module.children)) {\n\t\t\t\t\t\t\tchildren: for (const child of module.children) {\n\t\t\t\t\t\t\t\tlet childPath = child.filename;\n\t\t\t\t\t\t\t\tif (childPath) {\n\t\t\t\t\t\t\t\t\tpush({\n\t\t\t\t\t\t\t\t\t\ttype: RBDT_FILE,\n\t\t\t\t\t\t\t\t\t\tcontext: undefined,\n\t\t\t\t\t\t\t\t\t\tpath: childPath,\n\t\t\t\t\t\t\t\t\t\texpected: undefined,\n\t\t\t\t\t\t\t\t\t\tissuer: job\n\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t\tconst context = dirname(this.fs, path);\n\t\t\t\t\t\t\t\t\tfor (const modulePath of module.paths) {\n\t\t\t\t\t\t\t\t\t\tif (childPath.startsWith(modulePath)) {\n\t\t\t\t\t\t\t\t\t\t\tlet subPath = childPath.slice(modulePath.length + 1);\n\t\t\t\t\t\t\t\t\t\t\tconst packageMatch = /^(@[^\\\\/]+[\\\\/])[^\\\\/]+/.exec(\n\t\t\t\t\t\t\t\t\t\t\t\tsubPath\n\t\t\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t\t\t\tif (packageMatch) {\n\t\t\t\t\t\t\t\t\t\t\t\tpush({\n\t\t\t\t\t\t\t\t\t\t\t\t\ttype: RBDT_FILE,\n\t\t\t\t\t\t\t\t\t\t\t\t\tcontext: undefined,\n\t\t\t\t\t\t\t\t\t\t\t\t\tpath:\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tmodulePath +\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tchildPath[modulePath.length] +\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tpackageMatch[0] +\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tchildPath[modulePath.length] +\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"package.json\",\n\t\t\t\t\t\t\t\t\t\t\t\t\texpected: false,\n\t\t\t\t\t\t\t\t\t\t\t\t\tissuer: job\n\t\t\t\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\tlet request = subPath.replace(/\\\\/g, \"/\");\n\t\t\t\t\t\t\t\t\t\t\tif (request.endsWith(\".js\"))\n\t\t\t\t\t\t\t\t\t\t\t\trequest = request.slice(0, -3);\n\t\t\t\t\t\t\t\t\t\t\tpush({\n\t\t\t\t\t\t\t\t\t\t\t\ttype: RBDT_RESOLVE_CJS_FILE_AS_CHILD,\n\t\t\t\t\t\t\t\t\t\t\t\tcontext,\n\t\t\t\t\t\t\t\t\t\t\t\tpath: request,\n\t\t\t\t\t\t\t\t\t\t\t\texpected: child.filename,\n\t\t\t\t\t\t\t\t\t\t\t\tissuer: job\n\t\t\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t\t\t\tcontinue children;\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tlet request = relative(this.fs, context, childPath);\n\t\t\t\t\t\t\t\t\tif (request.endsWith(\".js\")) request = request.slice(0, -3);\n\t\t\t\t\t\t\t\t\trequest = request.replace(/\\\\/g, \"/\");\n\t\t\t\t\t\t\t\t\tif (!request.startsWith(\"../\")) request = `./${request}`;\n\t\t\t\t\t\t\t\t\tpush({\n\t\t\t\t\t\t\t\t\t\ttype: RBDT_RESOLVE_CJS_FILE,\n\t\t\t\t\t\t\t\t\t\tcontext,\n\t\t\t\t\t\t\t\t\t\tpath: request,\n\t\t\t\t\t\t\t\t\t\texpected: child.filename,\n\t\t\t\t\t\t\t\t\t\tissuer: job\n\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else if (supportsEsm && /\\.m?js$/.test(path)) {\n\t\t\t\t\t\t\tif (!this._warnAboutExperimentalEsmTracking) {\n\t\t\t\t\t\t\t\tthis.logger.log(\n\t\t\t\t\t\t\t\t\t\"Node.js doesn't offer a (nice) way to introspect the ESM dependency graph yet.\\n\" +\n\t\t\t\t\t\t\t\t\t\t\"Until a full solution is available webpack uses an experimental ESM tracking based on parsing.\\n\" +\n\t\t\t\t\t\t\t\t\t\t\"As best effort webpack parses the ESM files to guess dependencies. But this can lead to expensive and incorrect tracking.\"\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\tthis._warnAboutExperimentalEsmTracking = true;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tconst lexer = require(\"es-module-lexer\");\n\t\t\t\t\t\t\tlexer.init.then(() => {\n\t\t\t\t\t\t\t\tthis.fs.readFile(path, (err, content) => {\n\t\t\t\t\t\t\t\t\tif (err) return callback(err);\n\t\t\t\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t\t\t\tconst context = dirname(this.fs, path);\n\t\t\t\t\t\t\t\t\t\tconst source = content.toString();\n\t\t\t\t\t\t\t\t\t\tconst [imports] = lexer.parse(source);\n\t\t\t\t\t\t\t\t\t\tfor (const imp of imports) {\n\t\t\t\t\t\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t\t\t\t\t\tlet dependency;\n\t\t\t\t\t\t\t\t\t\t\t\tif (imp.d === -1) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t// import ... from \"...\"\n\t\t\t\t\t\t\t\t\t\t\t\t\tdependency = parseString(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tsource.substring(imp.s - 1, imp.e + 1)\n\t\t\t\t\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t\t\t\t\t} else if (imp.d > -1) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t// import()\n\t\t\t\t\t\t\t\t\t\t\t\t\tlet expr = source.substring(imp.s, imp.e).trim();\n\t\t\t\t\t\t\t\t\t\t\t\t\tdependency = parseString(expr);\n\t\t\t\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\t\t\t\t// e.g. import.meta\n\t\t\t\t\t\t\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t\t\t\t// we should not track Node.js build dependencies\n\t\t\t\t\t\t\t\t\t\t\t\tif (dependency.startsWith(\"node:\")) continue;\n\t\t\t\t\t\t\t\t\t\t\t\tif (builtinModules.has(dependency)) continue;\n\n\t\t\t\t\t\t\t\t\t\t\t\tpush({\n\t\t\t\t\t\t\t\t\t\t\t\t\ttype: RBDT_RESOLVE_ESM_FILE,\n\t\t\t\t\t\t\t\t\t\t\t\t\tcontext,\n\t\t\t\t\t\t\t\t\t\t\t\t\tpath: dependency,\n\t\t\t\t\t\t\t\t\t\t\t\t\texpected: undefined,\n\t\t\t\t\t\t\t\t\t\t\t\t\tissuer: job\n\t\t\t\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\t\t\t\t\t\t\tthis.logger.warn(\n\t\t\t\t\t\t\t\t\t\t\t\t\t`Parsing of ${path} for build dependencies failed at 'import(${source.substring(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\timp.s,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\timp.e\n\t\t\t\t\t\t\t\t\t\t\t\t\t)})'.\\n` +\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"Build dependencies behind this expression are ignored and might cause incorrect cache invalidation.\"\n\t\t\t\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t\t\t\t\tthis.logger.debug(pathToString(job));\n\t\t\t\t\t\t\t\t\t\t\t\tthis.logger.debug(e.stack);\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\t\t\t\t\tthis.logger.warn(\n\t\t\t\t\t\t\t\t\t\t\t`Parsing of ${path} for build dependencies failed and all dependencies of this file are ignored, which might cause incorrect cache invalidation..`\n\t\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t\t\tthis.logger.debug(pathToString(job));\n\t\t\t\t\t\t\t\t\t\tthis.logger.debug(e.stack);\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tprocess.nextTick(callback);\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t}, callback);\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tthis.logger.log(\n\t\t\t\t\t\t\t\t`Assuming ${path} has no dependencies as we were unable to assign it to any module system.`\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\tthis.logger.debug(pathToString(job));\n\t\t\t\t\t\t}\n\t\t\t\t\t\tprocess.nextTick(callback);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tcase RBDT_DIRECTORY_DEPENDENCIES: {\n\t\t\t\t\t\tconst match =\n\t\t\t\t\t\t\t/(^.+[\\\\/]node_modules[\\\\/](?:@[^\\\\/]+[\\\\/])?[^\\\\/]+)/.exec(path);\n\t\t\t\t\t\tconst packagePath = match ? match[1] : path;\n\t\t\t\t\t\tconst packageJson = join(this.fs, packagePath, \"package.json\");\n\t\t\t\t\t\tthis.fs.readFile(packageJson, (err, content) => {\n\t\t\t\t\t\t\tif (err) {\n\t\t\t\t\t\t\t\tif (err.code === \"ENOENT\") {\n\t\t\t\t\t\t\t\t\tresolveMissing.add(packageJson);\n\t\t\t\t\t\t\t\t\tconst parent = dirname(this.fs, packagePath);\n\t\t\t\t\t\t\t\t\tif (parent !== packagePath) {\n\t\t\t\t\t\t\t\t\t\tpush({\n\t\t\t\t\t\t\t\t\t\t\ttype: RBDT_DIRECTORY_DEPENDENCIES,\n\t\t\t\t\t\t\t\t\t\t\tcontext: undefined,\n\t\t\t\t\t\t\t\t\t\t\tpath: parent,\n\t\t\t\t\t\t\t\t\t\t\texpected: undefined,\n\t\t\t\t\t\t\t\t\t\t\tissuer: job\n\t\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tcallback();\n\t\t\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\treturn callback(err);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tresolveFiles.add(packageJson);\n\t\t\t\t\t\t\tlet packageData;\n\t\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t\tpackageData = JSON.parse(content.toString(\"utf-8\"));\n\t\t\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\t\t\treturn callback(e);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tconst depsObject = packageData.dependencies;\n\t\t\t\t\t\t\tconst optionalDepsObject = packageData.optionalDependencies;\n\t\t\t\t\t\t\tconst allDeps = new Set();\n\t\t\t\t\t\t\tconst optionalDeps = new Set();\n\t\t\t\t\t\t\tif (typeof depsObject === \"object\" && depsObject) {\n\t\t\t\t\t\t\t\tfor (const dep of Object.keys(depsObject)) {\n\t\t\t\t\t\t\t\t\tallDeps.add(dep);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif (\n\t\t\t\t\t\t\t\ttypeof optionalDepsObject === \"object\" &&\n\t\t\t\t\t\t\t\toptionalDepsObject\n\t\t\t\t\t\t\t) {\n\t\t\t\t\t\t\t\tfor (const dep of Object.keys(optionalDepsObject)) {\n\t\t\t\t\t\t\t\t\tallDeps.add(dep);\n\t\t\t\t\t\t\t\t\toptionalDeps.add(dep);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tfor (const dep of allDeps) {\n\t\t\t\t\t\t\t\tpush({\n\t\t\t\t\t\t\t\t\ttype: RBDT_RESOLVE_DIRECTORY,\n\t\t\t\t\t\t\t\t\tcontext: packagePath,\n\t\t\t\t\t\t\t\t\tpath: dep,\n\t\t\t\t\t\t\t\t\texpected: !optionalDeps.has(dep),\n\t\t\t\t\t\t\t\t\tissuer: job\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tcallback();\n\t\t\t\t\t\t});\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t},\n\t\t\terr => {\n\t\t\t\tif (err) return callback(err);\n\t\t\t\tfor (const l of fileSymlinks) files.delete(l);\n\t\t\t\tfor (const l of directorySymlinks) directories.delete(l);\n\t\t\t\tfor (const k of invalidResolveResults) resolveResults.delete(k);\n\t\t\t\tcallback(null, {\n\t\t\t\t\tfiles,\n\t\t\t\t\tdirectories,\n\t\t\t\t\tmissing,\n\t\t\t\t\tresolveResults,\n\t\t\t\t\tresolveDependencies: {\n\t\t\t\t\t\tfiles: resolveFiles,\n\t\t\t\t\t\tdirectories: resolveDirectories,\n\t\t\t\t\t\tmissing: resolveMissing\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}\n\t\t);\n\t}\n\n\t/**\n\t * @param {Map<string, string | false>} resolveResults results from resolving\n\t * @param {function((Error | null)=, boolean=): void} callback callback with true when resolveResults resolve the same way\n\t * @returns {void}\n\t */\n\tcheckResolveResultsValid(resolveResults, callback) {\n\t\tconst { resolveCjs, resolveCjsAsChild, resolveEsm, resolveContext } =\n\t\t\tthis._createBuildDependenciesResolvers();\n\t\tasyncLib.eachLimit(\n\t\t\tresolveResults,\n\t\t\t20,\n\t\t\t([key, expectedResult], callback) => {\n\t\t\t\tconst [type, context, path] = key.split(\"\\n\");\n\t\t\t\tswitch (type) {\n\t\t\t\t\tcase \"d\":\n\t\t\t\t\t\tresolveContext(context, path, {}, (err, _, result) => {\n\t\t\t\t\t\t\tif (expectedResult === false)\n\t\t\t\t\t\t\t\treturn callback(err ? undefined : INVALID);\n\t\t\t\t\t\t\tif (err) return callback(err);\n\t\t\t\t\t\t\tconst resultPath = result.path;\n\t\t\t\t\t\t\tif (resultPath !== expectedResult) return callback(INVALID);\n\t\t\t\t\t\t\tcallback();\n\t\t\t\t\t\t});\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase \"f\":\n\t\t\t\t\t\tresolveCjs(context, path, {}, (err, _, result) => {\n\t\t\t\t\t\t\tif (expectedResult === false)\n\t\t\t\t\t\t\t\treturn callback(err ? undefined : INVALID);\n\t\t\t\t\t\t\tif (err) return callback(err);\n\t\t\t\t\t\t\tconst resultPath = result.path;\n\t\t\t\t\t\t\tif (resultPath !== expectedResult) return callback(INVALID);\n\t\t\t\t\t\t\tcallback();\n\t\t\t\t\t\t});\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase \"c\":\n\t\t\t\t\t\tresolveCjsAsChild(context, path, {}, (err, _, result) => {\n\t\t\t\t\t\t\tif (expectedResult === false)\n\t\t\t\t\t\t\t\treturn callback(err ? undefined : INVALID);\n\t\t\t\t\t\t\tif (err) return callback(err);\n\t\t\t\t\t\t\tconst resultPath = result.path;\n\t\t\t\t\t\t\tif (resultPath !== expectedResult) return callback(INVALID);\n\t\t\t\t\t\t\tcallback();\n\t\t\t\t\t\t});\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase \"e\":\n\t\t\t\t\t\tresolveEsm(context, path, {}, (err, _, result) => {\n\t\t\t\t\t\t\tif (expectedResult === false)\n\t\t\t\t\t\t\t\treturn callback(err ? undefined : INVALID);\n\t\t\t\t\t\t\tif (err) return callback(err);\n\t\t\t\t\t\t\tconst resultPath = result.path;\n\t\t\t\t\t\t\tif (resultPath !== expectedResult) return callback(INVALID);\n\t\t\t\t\t\t\tcallback();\n\t\t\t\t\t\t});\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tcallback(new Error(\"Unexpected type in resolve result key\"));\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t},\n\t\t\t/**\n\t\t\t * @param {Error | typeof INVALID=} err error or invalid flag\n\t\t\t * @returns {void}\n\t\t\t */\n\t\t\terr => {\n\t\t\t\tif (err === INVALID) {\n\t\t\t\t\treturn callback(null, false);\n\t\t\t\t}\n\t\t\t\tif (err) {\n\t\t\t\t\treturn callback(err);\n\t\t\t\t}\n\t\t\t\treturn callback(null, true);\n\t\t\t}\n\t\t);\n\t}\n\n\t/**\n\t *\n\t * @param {number} startTime when processing the files has started\n\t * @param {Iterable<string>} files all files\n\t * @param {Iterable<string>} directories all directories\n\t * @param {Iterable<string>} missing all missing files or directories\n\t * @param {Object} options options object (for future extensions)\n\t * @param {boolean=} options.hash should use hash to snapshot\n\t * @param {boolean=} options.timestamp should use timestamp to snapshot\n\t * @param {function((WebpackError | null)=, (Snapshot | null)=): void} callback callback function\n\t * @returns {void}\n\t */\n\tcreateSnapshot(startTime, files, directories, missing, options, callback) {\n\t\t/** @type {Map<string, FileSystemInfoEntry | null>} */\n\t\tconst fileTimestamps = new Map();\n\t\t/** @type {Map<string, string | null>} */\n\t\tconst fileHashes = new Map();\n\t\t/** @type {Map<string, TimestampAndHash | string | null>} */\n\t\tconst fileTshs = new Map();\n\t\t/** @type {Map<string, FileSystemInfoEntry | null>} */\n\t\tconst contextTimestamps = new Map();\n\t\t/** @type {Map<string, string | null>} */\n\t\tconst contextHashes = new Map();\n\t\t/** @type {Map<string, ResolvedContextTimestampAndHash | null>} */\n\t\tconst contextTshs = new Map();\n\t\t/** @type {Map<string, boolean>} */\n\t\tconst missingExistence = new Map();\n\t\t/** @type {Map<string, string>} */\n\t\tconst managedItemInfo = new Map();\n\t\t/** @type {Set<string>} */\n\t\tconst managedFiles = new Set();\n\t\t/** @type {Set<string>} */\n\t\tconst managedContexts = new Set();\n\t\t/** @type {Set<string>} */\n\t\tconst managedMissing = new Set();\n\t\t/** @type {Set<Snapshot>} */\n\t\tconst children = new Set();\n\n\t\tconst snapshot = new Snapshot();\n\t\tif (startTime) snapshot.setStartTime(startTime);\n\n\t\t/** @type {Set<string>} */\n\t\tconst managedItems = new Set();\n\n\t\t/** 1 = timestamp, 2 = hash, 3 = timestamp + hash */\n\t\tconst mode = options && options.hash ? (options.timestamp ? 3 : 2) : 1;\n\n\t\tlet jobs = 1;\n\t\tconst jobDone = () => {\n\t\t\tif (--jobs === 0) {\n\t\t\t\tif (fileTimestamps.size !== 0) {\n\t\t\t\t\tsnapshot.setFileTimestamps(fileTimestamps);\n\t\t\t\t}\n\t\t\t\tif (fileHashes.size !== 0) {\n\t\t\t\t\tsnapshot.setFileHashes(fileHashes);\n\t\t\t\t}\n\t\t\t\tif (fileTshs.size !== 0) {\n\t\t\t\t\tsnapshot.setFileTshs(fileTshs);\n\t\t\t\t}\n\t\t\t\tif (contextTimestamps.size !== 0) {\n\t\t\t\t\tsnapshot.setContextTimestamps(contextTimestamps);\n\t\t\t\t}\n\t\t\t\tif (contextHashes.size !== 0) {\n\t\t\t\t\tsnapshot.setContextHashes(contextHashes);\n\t\t\t\t}\n\t\t\t\tif (contextTshs.size !== 0) {\n\t\t\t\t\tsnapshot.setContextTshs(contextTshs);\n\t\t\t\t}\n\t\t\t\tif (missingExistence.size !== 0) {\n\t\t\t\t\tsnapshot.setMissingExistence(missingExistence);\n\t\t\t\t}\n\t\t\t\tif (managedItemInfo.size !== 0) {\n\t\t\t\t\tsnapshot.setManagedItemInfo(managedItemInfo);\n\t\t\t\t}\n\t\t\t\tthis._managedFilesOptimization.optimize(snapshot, managedFiles);\n\t\t\t\tif (managedFiles.size !== 0) {\n\t\t\t\t\tsnapshot.setManagedFiles(managedFiles);\n\t\t\t\t}\n\t\t\t\tthis._managedContextsOptimization.optimize(snapshot, managedContexts);\n\t\t\t\tif (managedContexts.size !== 0) {\n\t\t\t\t\tsnapshot.setManagedContexts(managedContexts);\n\t\t\t\t}\n\t\t\t\tthis._managedMissingOptimization.optimize(snapshot, managedMissing);\n\t\t\t\tif (managedMissing.size !== 0) {\n\t\t\t\t\tsnapshot.setManagedMissing(managedMissing);\n\t\t\t\t}\n\t\t\t\tif (children.size !== 0) {\n\t\t\t\t\tsnapshot.setChildren(children);\n\t\t\t\t}\n\t\t\t\tthis._snapshotCache.set(snapshot, true);\n\t\t\t\tthis._statCreatedSnapshots++;\n\n\t\t\t\tcallback(null, snapshot);\n\t\t\t}\n\t\t};\n\t\tconst jobError = () => {\n\t\t\tif (jobs > 0) {\n\t\t\t\t// large negative number instead of NaN or something else to keep jobs to stay a SMI (v8)\n\t\t\t\tjobs = -100000000;\n\t\t\t\tcallback(null, null);\n\t\t\t}\n\t\t};\n\t\tconst checkManaged = (path, managedSet) => {\n\t\t\tfor (const immutablePath of this.immutablePathsRegExps) {\n\t\t\t\tif (immutablePath.test(path)) {\n\t\t\t\t\tmanagedSet.add(path);\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\t\t\tfor (const immutablePath of this.immutablePathsWithSlash) {\n\t\t\t\tif (path.startsWith(immutablePath)) {\n\t\t\t\t\tmanagedSet.add(path);\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\t\t\tfor (const managedPath of this.managedPathsRegExps) {\n\t\t\t\tconst match = managedPath.exec(path);\n\t\t\t\tif (match) {\n\t\t\t\t\tconst managedItem = getManagedItem(match[1], path);\n\t\t\t\t\tif (managedItem) {\n\t\t\t\t\t\tmanagedItems.add(managedItem);\n\t\t\t\t\t\tmanagedSet.add(path);\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tfor (const managedPath of this.managedPathsWithSlash) {\n\t\t\t\tif (path.startsWith(managedPath)) {\n\t\t\t\t\tconst managedItem = getManagedItem(managedPath, path);\n\t\t\t\t\tif (managedItem) {\n\t\t\t\t\t\tmanagedItems.add(managedItem);\n\t\t\t\t\t\tmanagedSet.add(path);\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn false;\n\t\t};\n\t\tconst captureNonManaged = (items, managedSet) => {\n\t\t\tconst capturedItems = new Set();\n\t\t\tfor (const path of items) {\n\t\t\t\tif (!checkManaged(path, managedSet)) capturedItems.add(path);\n\t\t\t}\n\t\t\treturn capturedItems;\n\t\t};\n\t\tconst processCapturedFiles = capturedFiles => {\n\t\t\tswitch (mode) {\n\t\t\t\tcase 3:\n\t\t\t\t\tthis._fileTshsOptimization.optimize(snapshot, capturedFiles);\n\t\t\t\t\tfor (const path of capturedFiles) {\n\t\t\t\t\t\tconst cache = this._fileTshs.get(path);\n\t\t\t\t\t\tif (cache !== undefined) {\n\t\t\t\t\t\t\tfileTshs.set(path, cache);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tjobs++;\n\t\t\t\t\t\t\tthis._getFileTimestampAndHash(path, (err, entry) => {\n\t\t\t\t\t\t\t\tif (err) {\n\t\t\t\t\t\t\t\t\tif (this.logger) {\n\t\t\t\t\t\t\t\t\t\tthis.logger.debug(\n\t\t\t\t\t\t\t\t\t\t\t`Error snapshotting file timestamp hash combination of ${path}: ${err.stack}`\n\t\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tjobError();\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\tfileTshs.set(path, entry);\n\t\t\t\t\t\t\t\t\tjobDone();\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tcase 2:\n\t\t\t\t\tthis._fileHashesOptimization.optimize(snapshot, capturedFiles);\n\t\t\t\t\tfor (const path of capturedFiles) {\n\t\t\t\t\t\tconst cache = this._fileHashes.get(path);\n\t\t\t\t\t\tif (cache !== undefined) {\n\t\t\t\t\t\t\tfileHashes.set(path, cache);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tjobs++;\n\t\t\t\t\t\t\tthis.fileHashQueue.add(path, (err, entry) => {\n\t\t\t\t\t\t\t\tif (err) {\n\t\t\t\t\t\t\t\t\tif (this.logger) {\n\t\t\t\t\t\t\t\t\t\tthis.logger.debug(\n\t\t\t\t\t\t\t\t\t\t\t`Error snapshotting file hash of ${path}: ${err.stack}`\n\t\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tjobError();\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\tfileHashes.set(path, entry);\n\t\t\t\t\t\t\t\t\tjobDone();\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tcase 1:\n\t\t\t\t\tthis._fileTimestampsOptimization.optimize(snapshot, capturedFiles);\n\t\t\t\t\tfor (const path of capturedFiles) {\n\t\t\t\t\t\tconst cache = this._fileTimestamps.get(path);\n\t\t\t\t\t\tif (cache !== undefined) {\n\t\t\t\t\t\t\tif (cache !== \"ignore\") {\n\t\t\t\t\t\t\t\tfileTimestamps.set(path, cache);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tjobs++;\n\t\t\t\t\t\t\tthis.fileTimestampQueue.add(path, (err, entry) => {\n\t\t\t\t\t\t\t\tif (err) {\n\t\t\t\t\t\t\t\t\tif (this.logger) {\n\t\t\t\t\t\t\t\t\t\tthis.logger.debug(\n\t\t\t\t\t\t\t\t\t\t\t`Error snapshotting file timestamp of ${path}: ${err.stack}`\n\t\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tjobError();\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\tfileTimestamps.set(path, entry);\n\t\t\t\t\t\t\t\t\tjobDone();\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t};\n\t\tif (files) {\n\t\t\tprocessCapturedFiles(captureNonManaged(files, managedFiles));\n\t\t}\n\t\tconst processCapturedDirectories = capturedDirectories => {\n\t\t\tswitch (mode) {\n\t\t\t\tcase 3:\n\t\t\t\t\tthis._contextTshsOptimization.optimize(snapshot, capturedDirectories);\n\t\t\t\t\tfor (const path of capturedDirectories) {\n\t\t\t\t\t\tconst cache = this._contextTshs.get(path);\n\t\t\t\t\t\t/** @type {ResolvedContextTimestampAndHash} */\n\t\t\t\t\t\tlet resolved;\n\t\t\t\t\t\tif (\n\t\t\t\t\t\t\tcache !== undefined &&\n\t\t\t\t\t\t\t(resolved = getResolvedTimestamp(cache)) !== undefined\n\t\t\t\t\t\t) {\n\t\t\t\t\t\t\tcontextTshs.set(path, resolved);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tjobs++;\n\t\t\t\t\t\t\t/**\n\t\t\t\t\t\t\t * @param {Error=} err error\n\t\t\t\t\t\t\t * @param {ResolvedContextTimestampAndHash=} entry entry\n\t\t\t\t\t\t\t * @returns {void}\n\t\t\t\t\t\t\t */\n\t\t\t\t\t\t\tconst callback = (err, entry) => {\n\t\t\t\t\t\t\t\tif (err) {\n\t\t\t\t\t\t\t\t\tif (this.logger) {\n\t\t\t\t\t\t\t\t\t\tthis.logger.debug(\n\t\t\t\t\t\t\t\t\t\t\t`Error snapshotting context timestamp hash combination of ${path}: ${err.stack}`\n\t\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tjobError();\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\tcontextTshs.set(path, entry);\n\t\t\t\t\t\t\t\t\tjobDone();\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\tif (cache !== undefined) {\n\t\t\t\t\t\t\t\tthis._resolveContextTsh(cache, callback);\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tthis.getContextTsh(path, callback);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tcase 2:\n\t\t\t\t\tthis._contextHashesOptimization.optimize(\n\t\t\t\t\t\tsnapshot,\n\t\t\t\t\t\tcapturedDirectories\n\t\t\t\t\t);\n\t\t\t\t\tfor (const path of capturedDirectories) {\n\t\t\t\t\t\tconst cache = this._contextHashes.get(path);\n\t\t\t\t\t\tlet resolved;\n\t\t\t\t\t\tif (\n\t\t\t\t\t\t\tcache !== undefined &&\n\t\t\t\t\t\t\t(resolved = getResolvedHash(cache)) !== undefined\n\t\t\t\t\t\t) {\n\t\t\t\t\t\t\tcontextHashes.set(path, resolved);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tjobs++;\n\t\t\t\t\t\t\tconst callback = (err, entry) => {\n\t\t\t\t\t\t\t\tif (err) {\n\t\t\t\t\t\t\t\t\tif (this.logger) {\n\t\t\t\t\t\t\t\t\t\tthis.logger.debug(\n\t\t\t\t\t\t\t\t\t\t\t`Error snapshotting context hash of ${path}: ${err.stack}`\n\t\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tjobError();\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\tcontextHashes.set(path, entry);\n\t\t\t\t\t\t\t\t\tjobDone();\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\tif (cache !== undefined) {\n\t\t\t\t\t\t\t\tthis._resolveContextHash(cache, callback);\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tthis.getContextHash(path, callback);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tcase 1:\n\t\t\t\t\tthis._contextTimestampsOptimization.optimize(\n\t\t\t\t\t\tsnapshot,\n\t\t\t\t\t\tcapturedDirectories\n\t\t\t\t\t);\n\t\t\t\t\tfor (const path of capturedDirectories) {\n\t\t\t\t\t\tconst cache = this._contextTimestamps.get(path);\n\t\t\t\t\t\tif (cache === \"ignore\") continue;\n\t\t\t\t\t\tlet resolved;\n\t\t\t\t\t\tif (\n\t\t\t\t\t\t\tcache !== undefined &&\n\t\t\t\t\t\t\t(resolved = getResolvedTimestamp(cache)) !== undefined\n\t\t\t\t\t\t) {\n\t\t\t\t\t\t\tcontextTimestamps.set(path, resolved);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tjobs++;\n\t\t\t\t\t\t\t/**\n\t\t\t\t\t\t\t * @param {Error=} err error\n\t\t\t\t\t\t\t * @param {ResolvedContextFileSystemInfoEntry=} entry entry\n\t\t\t\t\t\t\t * @returns {void}\n\t\t\t\t\t\t\t */\n\t\t\t\t\t\t\tconst callback = (err, entry) => {\n\t\t\t\t\t\t\t\tif (err) {\n\t\t\t\t\t\t\t\t\tif (this.logger) {\n\t\t\t\t\t\t\t\t\t\tthis.logger.debug(\n\t\t\t\t\t\t\t\t\t\t\t`Error snapshotting context timestamp of ${path}: ${err.stack}`\n\t\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tjobError();\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\tcontextTimestamps.set(path, entry);\n\t\t\t\t\t\t\t\t\tjobDone();\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\tif (cache !== undefined) {\n\t\t\t\t\t\t\t\tthis._resolveContextTimestamp(cache, callback);\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tthis.getContextTimestamp(path, callback);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t};\n\t\tif (directories) {\n\t\t\tprocessCapturedDirectories(\n\t\t\t\tcaptureNonManaged(directories, managedContexts)\n\t\t\t);\n\t\t}\n\t\tconst processCapturedMissing = capturedMissing => {\n\t\t\tthis._missingExistenceOptimization.optimize(snapshot, capturedMissing);\n\t\t\tfor (const path of capturedMissing) {\n\t\t\t\tconst cache = this._fileTimestamps.get(path);\n\t\t\t\tif (cache !== undefined) {\n\t\t\t\t\tif (cache !== \"ignore\") {\n\t\t\t\t\t\tmissingExistence.set(path, Boolean(cache));\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tjobs++;\n\t\t\t\t\tthis.fileTimestampQueue.add(path, (err, entry) => {\n\t\t\t\t\t\tif (err) {\n\t\t\t\t\t\t\tif (this.logger) {\n\t\t\t\t\t\t\t\tthis.logger.debug(\n\t\t\t\t\t\t\t\t\t`Error snapshotting missing timestamp of ${path}: ${err.stack}`\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tjobError();\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tmissingExistence.set(path, Boolean(entry));\n\t\t\t\t\t\t\tjobDone();\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\t\tif (missing) {\n\t\t\tprocessCapturedMissing(captureNonManaged(missing, managedMissing));\n\t\t}\n\t\tthis._managedItemInfoOptimization.optimize(snapshot, managedItems);\n\t\tfor (const path of managedItems) {\n\t\t\tconst cache = this._managedItems.get(path);\n\t\t\tif (cache !== undefined) {\n\t\t\t\tif (!cache.startsWith(\"*\")) {\n\t\t\t\t\tmanagedFiles.add(join(this.fs, path, \"package.json\"));\n\t\t\t\t} else if (cache === \"*nested\") {\n\t\t\t\t\tmanagedMissing.add(join(this.fs, path, \"package.json\"));\n\t\t\t\t}\n\t\t\t\tmanagedItemInfo.set(path, cache);\n\t\t\t} else {\n\t\t\t\tjobs++;\n\t\t\t\tthis.managedItemQueue.add(path, (err, entry) => {\n\t\t\t\t\tif (err) {\n\t\t\t\t\t\tif (this.logger) {\n\t\t\t\t\t\t\tthis.logger.debug(\n\t\t\t\t\t\t\t\t`Error snapshotting managed item ${path}: ${err.stack}`\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tjobError();\n\t\t\t\t\t} else if (entry) {\n\t\t\t\t\t\tif (!entry.startsWith(\"*\")) {\n\t\t\t\t\t\t\tmanagedFiles.add(join(this.fs, path, \"package.json\"));\n\t\t\t\t\t\t} else if (cache === \"*nested\") {\n\t\t\t\t\t\t\tmanagedMissing.add(join(this.fs, path, \"package.json\"));\n\t\t\t\t\t\t}\n\t\t\t\t\t\tmanagedItemInfo.set(path, entry);\n\t\t\t\t\t\tjobDone();\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// Fallback to normal snapshotting\n\t\t\t\t\t\tconst process = (set, fn) => {\n\t\t\t\t\t\t\tif (set.size === 0) return;\n\t\t\t\t\t\t\tconst captured = new Set();\n\t\t\t\t\t\t\tfor (const file of set) {\n\t\t\t\t\t\t\t\tif (file.startsWith(path)) captured.add(file);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif (captured.size > 0) fn(captured);\n\t\t\t\t\t\t};\n\t\t\t\t\t\tprocess(managedFiles, processCapturedFiles);\n\t\t\t\t\t\tprocess(managedContexts, processCapturedDirectories);\n\t\t\t\t\t\tprocess(managedMissing, processCapturedMissing);\n\t\t\t\t\t\tjobDone();\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t\tjobDone();\n\t}\n\n\t/**\n\t * @param {Snapshot} snapshot1 a snapshot\n\t * @param {Snapshot} snapshot2 a snapshot\n\t * @returns {Snapshot} merged snapshot\n\t */\n\tmergeSnapshots(snapshot1, snapshot2) {\n\t\tconst snapshot = new Snapshot();\n\t\tif (snapshot1.hasStartTime() && snapshot2.hasStartTime())\n\t\t\tsnapshot.setStartTime(Math.min(snapshot1.startTime, snapshot2.startTime));\n\t\telse if (snapshot2.hasStartTime()) snapshot.startTime = snapshot2.startTime;\n\t\telse if (snapshot1.hasStartTime()) snapshot.startTime = snapshot1.startTime;\n\t\tif (snapshot1.hasFileTimestamps() || snapshot2.hasFileTimestamps()) {\n\t\t\tsnapshot.setFileTimestamps(\n\t\t\t\tmergeMaps(snapshot1.fileTimestamps, snapshot2.fileTimestamps)\n\t\t\t);\n\t\t}\n\t\tif (snapshot1.hasFileHashes() || snapshot2.hasFileHashes()) {\n\t\t\tsnapshot.setFileHashes(\n\t\t\t\tmergeMaps(snapshot1.fileHashes, snapshot2.fileHashes)\n\t\t\t);\n\t\t}\n\t\tif (snapshot1.hasFileTshs() || snapshot2.hasFileTshs()) {\n\t\t\tsnapshot.setFileTshs(mergeMaps(snapshot1.fileTshs, snapshot2.fileTshs));\n\t\t}\n\t\tif (snapshot1.hasContextTimestamps() || snapshot2.hasContextTimestamps()) {\n\t\t\tsnapshot.setContextTimestamps(\n\t\t\t\tmergeMaps(snapshot1.contextTimestamps, snapshot2.contextTimestamps)\n\t\t\t);\n\t\t}\n\t\tif (snapshot1.hasContextHashes() || snapshot2.hasContextHashes()) {\n\t\t\tsnapshot.setContextHashes(\n\t\t\t\tmergeMaps(snapshot1.contextHashes, snapshot2.contextHashes)\n\t\t\t);\n\t\t}\n\t\tif (snapshot1.hasContextTshs() || snapshot2.hasContextTshs()) {\n\t\t\tsnapshot.setContextTshs(\n\t\t\t\tmergeMaps(snapshot1.contextTshs, snapshot2.contextTshs)\n\t\t\t);\n\t\t}\n\t\tif (snapshot1.hasMissingExistence() || snapshot2.hasMissingExistence()) {\n\t\t\tsnapshot.setMissingExistence(\n\t\t\t\tmergeMaps(snapshot1.missingExistence, snapshot2.missingExistence)\n\t\t\t);\n\t\t}\n\t\tif (snapshot1.hasManagedItemInfo() || snapshot2.hasManagedItemInfo()) {\n\t\t\tsnapshot.setManagedItemInfo(\n\t\t\t\tmergeMaps(snapshot1.managedItemInfo, snapshot2.managedItemInfo)\n\t\t\t);\n\t\t}\n\t\tif (snapshot1.hasManagedFiles() || snapshot2.hasManagedFiles()) {\n\t\t\tsnapshot.setManagedFiles(\n\t\t\t\tmergeSets(snapshot1.managedFiles, snapshot2.managedFiles)\n\t\t\t);\n\t\t}\n\t\tif (snapshot1.hasManagedContexts() || snapshot2.hasManagedContexts()) {\n\t\t\tsnapshot.setManagedContexts(\n\t\t\t\tmergeSets(snapshot1.managedContexts, snapshot2.managedContexts)\n\t\t\t);\n\t\t}\n\t\tif (snapshot1.hasManagedMissing() || snapshot2.hasManagedMissing()) {\n\t\t\tsnapshot.setManagedMissing(\n\t\t\t\tmergeSets(snapshot1.managedMissing, snapshot2.managedMissing)\n\t\t\t);\n\t\t}\n\t\tif (snapshot1.hasChildren() || snapshot2.hasChildren()) {\n\t\t\tsnapshot.setChildren(mergeSets(snapshot1.children, snapshot2.children));\n\t\t}\n\t\tif (\n\t\t\tthis._snapshotCache.get(snapshot1) === true &&\n\t\t\tthis._snapshotCache.get(snapshot2) === true\n\t\t) {\n\t\t\tthis._snapshotCache.set(snapshot, true);\n\t\t}\n\t\treturn snapshot;\n\t}\n\n\t/**\n\t * @param {Snapshot} snapshot the snapshot made\n\t * @param {function((WebpackError | null)=, boolean=): void} callback callback function\n\t * @returns {void}\n\t */\n\tcheckSnapshotValid(snapshot, callback) {\n\t\tconst cachedResult = this._snapshotCache.get(snapshot);\n\t\tif (cachedResult !== undefined) {\n\t\t\tthis._statTestedSnapshotsCached++;\n\t\t\tif (typeof cachedResult === \"boolean\") {\n\t\t\t\tcallback(null, cachedResult);\n\t\t\t} else {\n\t\t\t\tcachedResult.push(callback);\n\t\t\t}\n\t\t\treturn;\n\t\t}\n\t\tthis._statTestedSnapshotsNotCached++;\n\t\tthis._checkSnapshotValidNoCache(snapshot, callback);\n\t}\n\n\t/**\n\t * @param {Snapshot} snapshot the snapshot made\n\t * @param {function((WebpackError | null)=, boolean=): void} callback callback function\n\t * @returns {void}\n\t */\n\t_checkSnapshotValidNoCache(snapshot, callback) {\n\t\t/** @type {number | undefined} */\n\t\tlet startTime = undefined;\n\t\tif (snapshot.hasStartTime()) {\n\t\t\tstartTime = snapshot.startTime;\n\t\t}\n\t\tlet jobs = 1;\n\t\tconst jobDone = () => {\n\t\t\tif (--jobs === 0) {\n\t\t\t\tthis._snapshotCache.set(snapshot, true);\n\t\t\t\tcallback(null, true);\n\t\t\t}\n\t\t};\n\t\tconst invalid = () => {\n\t\t\tif (jobs > 0) {\n\t\t\t\t// large negative number instead of NaN or something else to keep jobs to stay a SMI (v8)\n\t\t\t\tjobs = -100000000;\n\t\t\t\tthis._snapshotCache.set(snapshot, false);\n\t\t\t\tcallback(null, false);\n\t\t\t}\n\t\t};\n\t\tconst invalidWithError = (path, err) => {\n\t\t\tif (this._remainingLogs > 0) {\n\t\t\t\tthis._log(path, `error occurred: %s`, err);\n\t\t\t}\n\t\t\tinvalid();\n\t\t};\n\t\t/**\n\t\t * @param {string} path file path\n\t\t * @param {string} current current hash\n\t\t * @param {string} snap snapshot hash\n\t\t * @returns {boolean} true, if ok\n\t\t */\n\t\tconst checkHash = (path, current, snap) => {\n\t\t\tif (current !== snap) {\n\t\t\t\t// If hash differ it's invalid\n\t\t\t\tif (this._remainingLogs > 0) {\n\t\t\t\t\tthis._log(path, `hashes differ (%s != %s)`, current, snap);\n\t\t\t\t}\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\treturn true;\n\t\t};\n\t\t/**\n\t\t * @param {string} path file path\n\t\t * @param {boolean} current current entry\n\t\t * @param {boolean} snap entry from snapshot\n\t\t * @returns {boolean} true, if ok\n\t\t */\n\t\tconst checkExistence = (path, current, snap) => {\n\t\t\tif (!current !== !snap) {\n\t\t\t\t// If existence of item differs\n\t\t\t\t// it's invalid\n\t\t\t\tif (this._remainingLogs > 0) {\n\t\t\t\t\tthis._log(\n\t\t\t\t\t\tpath,\n\t\t\t\t\t\tcurrent ? \"it didn't exist before\" : \"it does no longer exist\"\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\treturn true;\n\t\t};\n\t\t/**\n\t\t * @param {string} path file path\n\t\t * @param {FileSystemInfoEntry} current current entry\n\t\t * @param {FileSystemInfoEntry} snap entry from snapshot\n\t\t * @param {boolean} log log reason\n\t\t * @returns {boolean} true, if ok\n\t\t */\n\t\tconst checkFile = (path, current, snap, log = true) => {\n\t\t\tif (current === snap) return true;\n\t\t\tif (!checkExistence(path, Boolean(current), Boolean(snap))) return false;\n\t\t\tif (current) {\n\t\t\t\t// For existing items only\n\t\t\t\tif (typeof startTime === \"number\" && current.safeTime > startTime) {\n\t\t\t\t\t// If a change happened after starting reading the item\n\t\t\t\t\t// this may no longer be valid\n\t\t\t\t\tif (log && this._remainingLogs > 0) {\n\t\t\t\t\t\tthis._log(\n\t\t\t\t\t\t\tpath,\n\t\t\t\t\t\t\t`it may have changed (%d) after the start time of the snapshot (%d)`,\n\t\t\t\t\t\t\tcurrent.safeTime,\n\t\t\t\t\t\t\tstartTime\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t\tif (\n\t\t\t\t\tsnap.timestamp !== undefined &&\n\t\t\t\t\tcurrent.timestamp !== snap.timestamp\n\t\t\t\t) {\n\t\t\t\t\t// If we have a timestamp (it was a file or symlink) and it differs from current timestamp\n\t\t\t\t\t// it's invalid\n\t\t\t\t\tif (log && this._remainingLogs > 0) {\n\t\t\t\t\t\tthis._log(\n\t\t\t\t\t\t\tpath,\n\t\t\t\t\t\t\t`timestamps differ (%d != %d)`,\n\t\t\t\t\t\t\tcurrent.timestamp,\n\t\t\t\t\t\t\tsnap.timestamp\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn true;\n\t\t};\n\t\t/**\n\t\t * @param {string} path file path\n\t\t * @param {ResolvedContextFileSystemInfoEntry} current current entry\n\t\t * @param {ResolvedContextFileSystemInfoEntry} snap entry from snapshot\n\t\t * @param {boolean} log log reason\n\t\t * @returns {boolean} true, if ok\n\t\t */\n\t\tconst checkContext = (path, current, snap, log = true) => {\n\t\t\tif (current === snap) return true;\n\t\t\tif (!checkExistence(path, Boolean(current), Boolean(snap))) return false;\n\t\t\tif (current) {\n\t\t\t\t// For existing items only\n\t\t\t\tif (typeof startTime === \"number\" && current.safeTime > startTime) {\n\t\t\t\t\t// If a change happened after starting reading the item\n\t\t\t\t\t// this may no longer be valid\n\t\t\t\t\tif (log && this._remainingLogs > 0) {\n\t\t\t\t\t\tthis._log(\n\t\t\t\t\t\t\tpath,\n\t\t\t\t\t\t\t`it may have changed (%d) after the start time of the snapshot (%d)`,\n\t\t\t\t\t\t\tcurrent.safeTime,\n\t\t\t\t\t\t\tstartTime\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t\tif (\n\t\t\t\t\tsnap.timestampHash !== undefined &&\n\t\t\t\t\tcurrent.timestampHash !== snap.timestampHash\n\t\t\t\t) {\n\t\t\t\t\t// If we have a timestampHash (it was a directory) and it differs from current timestampHash\n\t\t\t\t\t// it's invalid\n\t\t\t\t\tif (log && this._remainingLogs > 0) {\n\t\t\t\t\t\tthis._log(\n\t\t\t\t\t\t\tpath,\n\t\t\t\t\t\t\t`timestamps hashes differ (%s != %s)`,\n\t\t\t\t\t\t\tcurrent.timestampHash,\n\t\t\t\t\t\t\tsnap.timestampHash\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn true;\n\t\t};\n\t\tif (snapshot.hasChildren()) {\n\t\t\tconst childCallback = (err, result) => {\n\t\t\t\tif (err || !result) return invalid();\n\t\t\t\telse jobDone();\n\t\t\t};\n\t\t\tfor (const child of snapshot.children) {\n\t\t\t\tconst cache = this._snapshotCache.get(child);\n\t\t\t\tif (cache !== undefined) {\n\t\t\t\t\tthis._statTestedChildrenCached++;\n\t\t\t\t\t/* istanbul ignore else */\n\t\t\t\t\tif (typeof cache === \"boolean\") {\n\t\t\t\t\t\tif (cache === false) {\n\t\t\t\t\t\t\tinvalid();\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tjobs++;\n\t\t\t\t\t\tcache.push(childCallback);\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tthis._statTestedChildrenNotCached++;\n\t\t\t\t\tjobs++;\n\t\t\t\t\tthis._checkSnapshotValidNoCache(child, childCallback);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif (snapshot.hasFileTimestamps()) {\n\t\t\tconst { fileTimestamps } = snapshot;\n\t\t\tthis._statTestedEntries += fileTimestamps.size;\n\t\t\tfor (const [path, ts] of fileTimestamps) {\n\t\t\t\tconst cache = this._fileTimestamps.get(path);\n\t\t\t\tif (cache !== undefined) {\n\t\t\t\t\tif (cache !== \"ignore\" && !checkFile(path, cache, ts)) {\n\t\t\t\t\t\tinvalid();\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tjobs++;\n\t\t\t\t\tthis.fileTimestampQueue.add(path, (err, entry) => {\n\t\t\t\t\t\tif (err) return invalidWithError(path, err);\n\t\t\t\t\t\tif (!checkFile(path, entry, ts)) {\n\t\t\t\t\t\t\tinvalid();\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tjobDone();\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tconst processFileHashSnapshot = (path, hash) => {\n\t\t\tconst cache = this._fileHashes.get(path);\n\t\t\tif (cache !== undefined) {\n\t\t\t\tif (cache !== \"ignore\" && !checkHash(path, cache, hash)) {\n\t\t\t\t\tinvalid();\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tjobs++;\n\t\t\t\tthis.fileHashQueue.add(path, (err, entry) => {\n\t\t\t\t\tif (err) return invalidWithError(path, err);\n\t\t\t\t\tif (!checkHash(path, entry, hash)) {\n\t\t\t\t\t\tinvalid();\n\t\t\t\t\t} else {\n\t\t\t\t\t\tjobDone();\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}\n\t\t};\n\t\tif (snapshot.hasFileHashes()) {\n\t\t\tconst { fileHashes } = snapshot;\n\t\t\tthis._statTestedEntries += fileHashes.size;\n\t\t\tfor (const [path, hash] of fileHashes) {\n\t\t\t\tprocessFileHashSnapshot(path, hash);\n\t\t\t}\n\t\t}\n\t\tif (snapshot.hasFileTshs()) {\n\t\t\tconst { fileTshs } = snapshot;\n\t\t\tthis._statTestedEntries += fileTshs.size;\n\t\t\tfor (const [path, tsh] of fileTshs) {\n\t\t\t\tif (typeof tsh === \"string\") {\n\t\t\t\t\tprocessFileHashSnapshot(path, tsh);\n\t\t\t\t} else {\n\t\t\t\t\tconst cache = this._fileTimestamps.get(path);\n\t\t\t\t\tif (cache !== undefined) {\n\t\t\t\t\t\tif (cache === \"ignore\" || !checkFile(path, cache, tsh, false)) {\n\t\t\t\t\t\t\tprocessFileHashSnapshot(path, tsh && tsh.hash);\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tjobs++;\n\t\t\t\t\t\tthis.fileTimestampQueue.add(path, (err, entry) => {\n\t\t\t\t\t\t\tif (err) return invalidWithError(path, err);\n\t\t\t\t\t\t\tif (!checkFile(path, entry, tsh, false)) {\n\t\t\t\t\t\t\t\tprocessFileHashSnapshot(path, tsh && tsh.hash);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tjobDone();\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif (snapshot.hasContextTimestamps()) {\n\t\t\tconst { contextTimestamps } = snapshot;\n\t\t\tthis._statTestedEntries += contextTimestamps.size;\n\t\t\tfor (const [path, ts] of contextTimestamps) {\n\t\t\t\tconst cache = this._contextTimestamps.get(path);\n\t\t\t\tif (cache === \"ignore\") continue;\n\t\t\t\tlet resolved;\n\t\t\t\tif (\n\t\t\t\t\tcache !== undefined &&\n\t\t\t\t\t(resolved = getResolvedTimestamp(cache)) !== undefined\n\t\t\t\t) {\n\t\t\t\t\tif (!checkContext(path, resolved, ts)) {\n\t\t\t\t\t\tinvalid();\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tjobs++;\n\t\t\t\t\t/**\n\t\t\t\t\t * @param {Error=} err error\n\t\t\t\t\t * @param {ResolvedContextFileSystemInfoEntry=} entry entry\n\t\t\t\t\t * @returns {void}\n\t\t\t\t\t */\n\t\t\t\t\tconst callback = (err, entry) => {\n\t\t\t\t\t\tif (err) return invalidWithError(path, err);\n\t\t\t\t\t\tif (!checkContext(path, entry, ts)) {\n\t\t\t\t\t\t\tinvalid();\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tjobDone();\n\t\t\t\t\t\t}\n\t\t\t\t\t};\n\t\t\t\t\tif (cache !== undefined) {\n\t\t\t\t\t\tthis._resolveContextTimestamp(cache, callback);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthis.getContextTimestamp(path, callback);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tconst processContextHashSnapshot = (path, hash) => {\n\t\t\tconst cache = this._contextHashes.get(path);\n\t\t\tlet resolved;\n\t\t\tif (\n\t\t\t\tcache !== undefined &&\n\t\t\t\t(resolved = getResolvedHash(cache)) !== undefined\n\t\t\t) {\n\t\t\t\tif (!checkHash(path, resolved, hash)) {\n\t\t\t\t\tinvalid();\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tjobs++;\n\t\t\t\tconst callback = (err, entry) => {\n\t\t\t\t\tif (err) return invalidWithError(path, err);\n\t\t\t\t\tif (!checkHash(path, entry, hash)) {\n\t\t\t\t\t\tinvalid();\n\t\t\t\t\t} else {\n\t\t\t\t\t\tjobDone();\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t\tif (cache !== undefined) {\n\t\t\t\t\tthis._resolveContextHash(cache, callback);\n\t\t\t\t} else {\n\t\t\t\t\tthis.getContextHash(path, callback);\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\t\tif (snapshot.hasContextHashes()) {\n\t\t\tconst { contextHashes } = snapshot;\n\t\t\tthis._statTestedEntries += contextHashes.size;\n\t\t\tfor (const [path, hash] of contextHashes) {\n\t\t\t\tprocessContextHashSnapshot(path, hash);\n\t\t\t}\n\t\t}\n\t\tif (snapshot.hasContextTshs()) {\n\t\t\tconst { contextTshs } = snapshot;\n\t\t\tthis._statTestedEntries += contextTshs.size;\n\t\t\tfor (const [path, tsh] of contextTshs) {\n\t\t\t\tif (typeof tsh === \"string\") {\n\t\t\t\t\tprocessContextHashSnapshot(path, tsh);\n\t\t\t\t} else {\n\t\t\t\t\tconst cache = this._contextTimestamps.get(path);\n\t\t\t\t\tif (cache === \"ignore\") continue;\n\t\t\t\t\tlet resolved;\n\t\t\t\t\tif (\n\t\t\t\t\t\tcache !== undefined &&\n\t\t\t\t\t\t(resolved = getResolvedTimestamp(cache)) !== undefined\n\t\t\t\t\t) {\n\t\t\t\t\t\tif (!checkContext(path, resolved, tsh, false)) {\n\t\t\t\t\t\t\tprocessContextHashSnapshot(path, tsh && tsh.hash);\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tjobs++;\n\t\t\t\t\t\t/**\n\t\t\t\t\t\t * @param {Error=} err error\n\t\t\t\t\t\t * @param {ResolvedContextFileSystemInfoEntry=} entry entry\n\t\t\t\t\t\t * @returns {void}\n\t\t\t\t\t\t */\n\t\t\t\t\t\tconst callback = (err, entry) => {\n\t\t\t\t\t\t\tif (err) return invalidWithError(path, err);\n\t\t\t\t\t\t\tif (!checkContext(path, entry, tsh, false)) {\n\t\t\t\t\t\t\t\tprocessContextHashSnapshot(path, tsh && tsh.hash);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tjobDone();\n\t\t\t\t\t\t};\n\t\t\t\t\t\tif (cache !== undefined) {\n\t\t\t\t\t\t\tthis._resolveContextTimestamp(cache, callback);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tthis.getContextTimestamp(path, callback);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif (snapshot.hasMissingExistence()) {\n\t\t\tconst { missingExistence } = snapshot;\n\t\t\tthis._statTestedEntries += missingExistence.size;\n\t\t\tfor (const [path, existence] of missingExistence) {\n\t\t\t\tconst cache = this._fileTimestamps.get(path);\n\t\t\t\tif (cache !== undefined) {\n\t\t\t\t\tif (\n\t\t\t\t\t\tcache !== \"ignore\" &&\n\t\t\t\t\t\t!checkExistence(path, Boolean(cache), Boolean(existence))\n\t\t\t\t\t) {\n\t\t\t\t\t\tinvalid();\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tjobs++;\n\t\t\t\t\tthis.fileTimestampQueue.add(path, (err, entry) => {\n\t\t\t\t\t\tif (err) return invalidWithError(path, err);\n\t\t\t\t\t\tif (!checkExistence(path, Boolean(entry), Boolean(existence))) {\n\t\t\t\t\t\t\tinvalid();\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tjobDone();\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif (snapshot.hasManagedItemInfo()) {\n\t\t\tconst { managedItemInfo } = snapshot;\n\t\t\tthis._statTestedEntries += managedItemInfo.size;\n\t\t\tfor (const [path, info] of managedItemInfo) {\n\t\t\t\tconst cache = this._managedItems.get(path);\n\t\t\t\tif (cache !== undefined) {\n\t\t\t\t\tif (!checkHash(path, cache, info)) {\n\t\t\t\t\t\tinvalid();\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tjobs++;\n\t\t\t\t\tthis.managedItemQueue.add(path, (err, entry) => {\n\t\t\t\t\t\tif (err) return invalidWithError(path, err);\n\t\t\t\t\t\tif (!checkHash(path, entry, info)) {\n\t\t\t\t\t\t\tinvalid();\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tjobDone();\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tjobDone();\n\n\t\t// if there was an async action\n\t\t// try to join multiple concurrent request for this snapshot\n\t\tif (jobs > 0) {\n\t\t\tconst callbacks = [callback];\n\t\t\tcallback = (err, result) => {\n\t\t\t\tfor (const callback of callbacks) callback(err, result);\n\t\t\t};\n\t\t\tthis._snapshotCache.set(snapshot, callbacks);\n\t\t}\n\t}\n\n\t_readFileTimestamp(path, callback) {\n\t\tthis.fs.stat(path, (err, stat) => {\n\t\t\tif (err) {\n\t\t\t\tif (err.code === \"ENOENT\") {\n\t\t\t\t\tthis._fileTimestamps.set(path, null);\n\t\t\t\t\tthis._cachedDeprecatedFileTimestamps = undefined;\n\t\t\t\t\treturn callback(null, null);\n\t\t\t\t}\n\t\t\t\treturn callback(err);\n\t\t\t}\n\n\t\t\tlet ts;\n\t\t\tif (stat.isDirectory()) {\n\t\t\t\tts = {\n\t\t\t\t\tsafeTime: 0,\n\t\t\t\t\ttimestamp: undefined\n\t\t\t\t};\n\t\t\t} else {\n\t\t\t\tconst mtime = +stat.mtime;\n\n\t\t\t\tif (mtime) applyMtime(mtime);\n\n\t\t\t\tts = {\n\t\t\t\t\tsafeTime: mtime ? mtime + FS_ACCURACY : Infinity,\n\t\t\t\t\ttimestamp: mtime\n\t\t\t\t};\n\t\t\t}\n\n\t\t\tthis._fileTimestamps.set(path, ts);\n\t\t\tthis._cachedDeprecatedFileTimestamps = undefined;\n\n\t\t\tcallback(null, ts);\n\t\t});\n\t}\n\n\t_readFileHash(path, callback) {\n\t\tthis.fs.readFile(path, (err, content) => {\n\t\t\tif (err) {\n\t\t\t\tif (err.code === \"EISDIR\") {\n\t\t\t\t\tthis._fileHashes.set(path, \"directory\");\n\t\t\t\t\treturn callback(null, \"directory\");\n\t\t\t\t}\n\t\t\t\tif (err.code === \"ENOENT\") {\n\t\t\t\t\tthis._fileHashes.set(path, null);\n\t\t\t\t\treturn callback(null, null);\n\t\t\t\t}\n\t\t\t\tif (err.code === \"ERR_FS_FILE_TOO_LARGE\") {\n\t\t\t\t\tthis.logger.warn(`Ignoring ${path} for hashing as it's very large`);\n\t\t\t\t\tthis._fileHashes.set(path, \"too large\");\n\t\t\t\t\treturn callback(null, \"too large\");\n\t\t\t\t}\n\t\t\t\treturn callback(err);\n\t\t\t}\n\n\t\t\tconst hash = createHash(this._hashFunction);\n\n\t\t\thash.update(content);\n\n\t\t\tconst digest = /** @type {string} */ (hash.digest(\"hex\"));\n\n\t\t\tthis._fileHashes.set(path, digest);\n\n\t\t\tcallback(null, digest);\n\t\t});\n\t}\n\n\t_getFileTimestampAndHash(path, callback) {\n\t\tconst continueWithHash = hash => {\n\t\t\tconst cache = this._fileTimestamps.get(path);\n\t\t\tif (cache !== undefined) {\n\t\t\t\tif (cache !== \"ignore\") {\n\t\t\t\t\tconst result = {\n\t\t\t\t\t\t...cache,\n\t\t\t\t\t\thash\n\t\t\t\t\t};\n\t\t\t\t\tthis._fileTshs.set(path, result);\n\t\t\t\t\treturn callback(null, result);\n\t\t\t\t} else {\n\t\t\t\t\tthis._fileTshs.set(path, hash);\n\t\t\t\t\treturn callback(null, hash);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tthis.fileTimestampQueue.add(path, (err, entry) => {\n\t\t\t\t\tif (err) {\n\t\t\t\t\t\treturn callback(err);\n\t\t\t\t\t}\n\t\t\t\t\tconst result = {\n\t\t\t\t\t\t...entry,\n\t\t\t\t\t\thash\n\t\t\t\t\t};\n\t\t\t\t\tthis._fileTshs.set(path, result);\n\t\t\t\t\treturn callback(null, result);\n\t\t\t\t});\n\t\t\t}\n\t\t};\n\n\t\tconst cache = this._fileHashes.get(path);\n\t\tif (cache !== undefined) {\n\t\t\tcontinueWithHash(cache);\n\t\t} else {\n\t\t\tthis.fileHashQueue.add(path, (err, entry) => {\n\t\t\t\tif (err) {\n\t\t\t\t\treturn callback(err);\n\t\t\t\t}\n\t\t\t\tcontinueWithHash(entry);\n\t\t\t});\n\t\t}\n\t}\n\n\t/**\n\t * @template T\n\t * @template ItemType\n\t * @param {Object} options options\n\t * @param {string} options.path path\n\t * @param {function(string): ItemType} options.fromImmutablePath called when context item is an immutable path\n\t * @param {function(string): ItemType} options.fromManagedItem called when context item is a managed path\n\t * @param {function(string, string, function(Error=, ItemType=): void): void} options.fromSymlink called when context item is a symlink\n\t * @param {function(string, IStats, function(Error=, ItemType=): void): void} options.fromFile called when context item is a file\n\t * @param {function(string, IStats, function(Error=, ItemType=): void): void} options.fromDirectory called when context item is a directory\n\t * @param {function(string[], ItemType[]): T} options.reduce called from all context items\n\t * @param {function((Error | null)=, (T)=): void} callback callback\n\t */\n\t_readContext(\n\t\t{\n\t\t\tpath,\n\t\t\tfromImmutablePath,\n\t\t\tfromManagedItem,\n\t\t\tfromSymlink,\n\t\t\tfromFile,\n\t\t\tfromDirectory,\n\t\t\treduce\n\t\t},\n\t\tcallback\n\t) {\n\t\tthis.fs.readdir(path, (err, _files) => {\n\t\t\tif (err) {\n\t\t\t\tif (err.code === \"ENOENT\") {\n\t\t\t\t\treturn callback(null, null);\n\t\t\t\t}\n\t\t\t\treturn callback(err);\n\t\t\t}\n\t\t\tconst files = /** @type {string[]} */ (_files)\n\t\t\t\t.map(file => file.normalize(\"NFC\"))\n\t\t\t\t.filter(file => !/^\\./.test(file))\n\t\t\t\t.sort();\n\t\t\tasyncLib.map(\n\t\t\t\tfiles,\n\t\t\t\t(file, callback) => {\n\t\t\t\t\tconst child = join(this.fs, path, file);\n\t\t\t\t\tfor (const immutablePath of this.immutablePathsRegExps) {\n\t\t\t\t\t\tif (immutablePath.test(path)) {\n\t\t\t\t\t\t\t// ignore any immutable path for timestamping\n\t\t\t\t\t\t\treturn callback(null, fromImmutablePath(path));\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tfor (const immutablePath of this.immutablePathsWithSlash) {\n\t\t\t\t\t\tif (path.startsWith(immutablePath)) {\n\t\t\t\t\t\t\t// ignore any immutable path for timestamping\n\t\t\t\t\t\t\treturn callback(null, fromImmutablePath(path));\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tfor (const managedPath of this.managedPathsRegExps) {\n\t\t\t\t\t\tconst match = managedPath.exec(path);\n\t\t\t\t\t\tif (match) {\n\t\t\t\t\t\t\tconst managedItem = getManagedItem(match[1], path);\n\t\t\t\t\t\t\tif (managedItem) {\n\t\t\t\t\t\t\t\t// construct timestampHash from managed info\n\t\t\t\t\t\t\t\treturn this.managedItemQueue.add(managedItem, (err, info) => {\n\t\t\t\t\t\t\t\t\tif (err) return callback(err);\n\t\t\t\t\t\t\t\t\treturn callback(null, fromManagedItem(info));\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tfor (const managedPath of this.managedPathsWithSlash) {\n\t\t\t\t\t\tif (path.startsWith(managedPath)) {\n\t\t\t\t\t\t\tconst managedItem = getManagedItem(managedPath, child);\n\t\t\t\t\t\t\tif (managedItem) {\n\t\t\t\t\t\t\t\t// construct timestampHash from managed info\n\t\t\t\t\t\t\t\treturn this.managedItemQueue.add(managedItem, (err, info) => {\n\t\t\t\t\t\t\t\t\tif (err) return callback(err);\n\t\t\t\t\t\t\t\t\treturn callback(null, fromManagedItem(info));\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tlstatReadlinkAbsolute(this.fs, child, (err, stat) => {\n\t\t\t\t\t\tif (err) return callback(err);\n\n\t\t\t\t\t\tif (typeof stat === \"string\") {\n\t\t\t\t\t\t\treturn fromSymlink(child, stat, callback);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (stat.isFile()) {\n\t\t\t\t\t\t\treturn fromFile(child, stat, callback);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (stat.isDirectory()) {\n\t\t\t\t\t\t\treturn fromDirectory(child, stat, callback);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tcallback(null, null);\n\t\t\t\t\t});\n\t\t\t\t},\n\t\t\t\t(err, results) => {\n\t\t\t\t\tif (err) return callback(err);\n\t\t\t\t\tconst result = reduce(files, results);\n\t\t\t\t\tcallback(null, result);\n\t\t\t\t}\n\t\t\t);\n\t\t});\n\t}\n\n\t_readContextTimestamp(path, callback) {\n\t\tthis._readContext(\n\t\t\t{\n\t\t\t\tpath,\n\t\t\t\tfromImmutablePath: () => null,\n\t\t\t\tfromManagedItem: info => ({\n\t\t\t\t\tsafeTime: 0,\n\t\t\t\t\ttimestampHash: info\n\t\t\t\t}),\n\t\t\t\tfromSymlink: (file, target, callback) => {\n\t\t\t\t\tcallback(null, {\n\t\t\t\t\t\ttimestampHash: target,\n\t\t\t\t\t\tsymlinks: new Set([target])\n\t\t\t\t\t});\n\t\t\t\t},\n\t\t\t\tfromFile: (file, stat, callback) => {\n\t\t\t\t\t// Prefer the cached value over our new stat to report consistent results\n\t\t\t\t\tconst cache = this._fileTimestamps.get(file);\n\t\t\t\t\tif (cache !== undefined)\n\t\t\t\t\t\treturn callback(null, cache === \"ignore\" ? null : cache);\n\n\t\t\t\t\tconst mtime = +stat.mtime;\n\n\t\t\t\t\tif (mtime) applyMtime(mtime);\n\n\t\t\t\t\tconst ts = {\n\t\t\t\t\t\tsafeTime: mtime ? mtime + FS_ACCURACY : Infinity,\n\t\t\t\t\t\ttimestamp: mtime\n\t\t\t\t\t};\n\n\t\t\t\t\tthis._fileTimestamps.set(file, ts);\n\t\t\t\t\tthis._cachedDeprecatedFileTimestamps = undefined;\n\t\t\t\t\tcallback(null, ts);\n\t\t\t\t},\n\t\t\t\tfromDirectory: (directory, stat, callback) => {\n\t\t\t\t\tthis.contextTimestampQueue.increaseParallelism();\n\t\t\t\t\tthis._getUnresolvedContextTimestamp(directory, (err, tsEntry) => {\n\t\t\t\t\t\tthis.contextTimestampQueue.decreaseParallelism();\n\t\t\t\t\t\tcallback(err, tsEntry);\n\t\t\t\t\t});\n\t\t\t\t},\n\t\t\t\treduce: (files, tsEntries) => {\n\t\t\t\t\tlet symlinks = undefined;\n\n\t\t\t\t\tconst hash = createHash(this._hashFunction);\n\n\t\t\t\t\tfor (const file of files) hash.update(file);\n\t\t\t\t\tlet safeTime = 0;\n\t\t\t\t\tfor (const entry of tsEntries) {\n\t\t\t\t\t\tif (!entry) {\n\t\t\t\t\t\t\thash.update(\"n\");\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (entry.timestamp) {\n\t\t\t\t\t\t\thash.update(\"f\");\n\t\t\t\t\t\t\thash.update(`${entry.timestamp}`);\n\t\t\t\t\t\t} else if (entry.timestampHash) {\n\t\t\t\t\t\t\thash.update(\"d\");\n\t\t\t\t\t\t\thash.update(`${entry.timestampHash}`);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (entry.symlinks !== undefined) {\n\t\t\t\t\t\t\tif (symlinks === undefined) symlinks = new Set();\n\t\t\t\t\t\t\taddAll(entry.symlinks, symlinks);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (entry.safeTime) {\n\t\t\t\t\t\t\tsafeTime = Math.max(safeTime, entry.safeTime);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tconst digest = /** @type {string} */ (hash.digest(\"hex\"));\n\n\t\t\t\t\tconst result = {\n\t\t\t\t\t\tsafeTime,\n\t\t\t\t\t\ttimestampHash: digest\n\t\t\t\t\t};\n\t\t\t\t\tif (symlinks) result.symlinks = symlinks;\n\t\t\t\t\treturn result;\n\t\t\t\t}\n\t\t\t},\n\t\t\t(err, result) => {\n\t\t\t\tif (err) return callback(err);\n\t\t\t\tthis._contextTimestamps.set(path, result);\n\t\t\t\tthis._cachedDeprecatedContextTimestamps = undefined;\n\n\t\t\t\tcallback(null, result);\n\t\t\t}\n\t\t);\n\t}\n\n\t/**\n\t * @param {ContextFileSystemInfoEntry} entry entry\n\t * @param {function((Error | null)=, ResolvedContextFileSystemInfoEntry=): void} callback callback\n\t * @returns {void}\n\t */\n\t_resolveContextTimestamp(entry, callback) {\n\t\tconst hashes = [];\n\t\tlet safeTime = 0;\n\t\tprocessAsyncTree(\n\t\t\tentry.symlinks,\n\t\t\t10,\n\t\t\t(target, push, callback) => {\n\t\t\t\tthis._getUnresolvedContextTimestamp(target, (err, entry) => {\n\t\t\t\t\tif (err) return callback(err);\n\t\t\t\t\tif (entry && entry !== \"ignore\") {\n\t\t\t\t\t\thashes.push(entry.timestampHash);\n\t\t\t\t\t\tif (entry.safeTime) {\n\t\t\t\t\t\t\tsafeTime = Math.max(safeTime, entry.safeTime);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (entry.symlinks !== undefined) {\n\t\t\t\t\t\t\tfor (const target of entry.symlinks) push(target);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tcallback();\n\t\t\t\t});\n\t\t\t},\n\t\t\terr => {\n\t\t\t\tif (err) return callback(err);\n\t\t\t\tconst hash = createHash(this._hashFunction);\n\t\t\t\thash.update(entry.timestampHash);\n\t\t\t\tif (entry.safeTime) {\n\t\t\t\t\tsafeTime = Math.max(safeTime, entry.safeTime);\n\t\t\t\t}\n\t\t\t\thashes.sort();\n\t\t\t\tfor (const h of hashes) {\n\t\t\t\t\thash.update(h);\n\t\t\t\t}\n\t\t\t\tcallback(\n\t\t\t\t\tnull,\n\t\t\t\t\t(entry.resolved = {\n\t\t\t\t\t\tsafeTime,\n\t\t\t\t\t\ttimestampHash: /** @type {string} */ (hash.digest(\"hex\"))\n\t\t\t\t\t})\n\t\t\t\t);\n\t\t\t}\n\t\t);\n\t}\n\n\t_readContextHash(path, callback) {\n\t\tthis._readContext(\n\t\t\t{\n\t\t\t\tpath,\n\t\t\t\tfromImmutablePath: () => \"\",\n\t\t\t\tfromManagedItem: info => info || \"\",\n\t\t\t\tfromSymlink: (file, target, callback) => {\n\t\t\t\t\tcallback(null, {\n\t\t\t\t\t\thash: target,\n\t\t\t\t\t\tsymlinks: new Set([target])\n\t\t\t\t\t});\n\t\t\t\t},\n\t\t\t\tfromFile: (file, stat, callback) =>\n\t\t\t\t\tthis.getFileHash(file, (err, hash) => {\n\t\t\t\t\t\tcallback(err, hash || \"\");\n\t\t\t\t\t}),\n\t\t\t\tfromDirectory: (directory, stat, callback) => {\n\t\t\t\t\tthis.contextHashQueue.increaseParallelism();\n\t\t\t\t\tthis._getUnresolvedContextHash(directory, (err, hash) => {\n\t\t\t\t\t\tthis.contextHashQueue.decreaseParallelism();\n\t\t\t\t\t\tcallback(err, hash || \"\");\n\t\t\t\t\t});\n\t\t\t\t},\n\t\t\t\t/**\n\t\t\t\t * @param {string[]} files files\n\t\t\t\t * @param {(string | ContextHash)[]} fileHashes hashes\n\t\t\t\t * @returns {ContextHash} reduced hash\n\t\t\t\t */\n\t\t\t\treduce: (files, fileHashes) => {\n\t\t\t\t\tlet symlinks = undefined;\n\t\t\t\t\tconst hash = createHash(this._hashFunction);\n\n\t\t\t\t\tfor (const file of files) hash.update(file);\n\t\t\t\t\tfor (const entry of fileHashes) {\n\t\t\t\t\t\tif (typeof entry === \"string\") {\n\t\t\t\t\t\t\thash.update(entry);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\thash.update(entry.hash);\n\t\t\t\t\t\t\tif (entry.symlinks) {\n\t\t\t\t\t\t\t\tif (symlinks === undefined) symlinks = new Set();\n\t\t\t\t\t\t\t\taddAll(entry.symlinks, symlinks);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tconst result = {\n\t\t\t\t\t\thash: /** @type {string} */ (hash.digest(\"hex\"))\n\t\t\t\t\t};\n\t\t\t\t\tif (symlinks) result.symlinks = symlinks;\n\t\t\t\t\treturn result;\n\t\t\t\t}\n\t\t\t},\n\t\t\t(err, result) => {\n\t\t\t\tif (err) return callback(err);\n\t\t\t\tthis._contextHashes.set(path, result);\n\t\t\t\treturn callback(null, result);\n\t\t\t}\n\t\t);\n\t}\n\n\t/**\n\t * @param {ContextHash} entry context hash\n\t * @param {function((Error | null)=, string=): void} callback callback\n\t * @returns {void}\n\t */\n\t_resolveContextHash(entry, callback) {\n\t\tconst hashes = [];\n\t\tprocessAsyncTree(\n\t\t\tentry.symlinks,\n\t\t\t10,\n\t\t\t(target, push, callback) => {\n\t\t\t\tthis._getUnresolvedContextHash(target, (err, hash) => {\n\t\t\t\t\tif (err) return callback(err);\n\t\t\t\t\tif (hash) {\n\t\t\t\t\t\thashes.push(hash.hash);\n\t\t\t\t\t\tif (hash.symlinks !== undefined) {\n\t\t\t\t\t\t\tfor (const target of hash.symlinks) push(target);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tcallback();\n\t\t\t\t});\n\t\t\t},\n\t\t\terr => {\n\t\t\t\tif (err) return callback(err);\n\t\t\t\tconst hash = createHash(this._hashFunction);\n\t\t\t\thash.update(entry.hash);\n\t\t\t\thashes.sort();\n\t\t\t\tfor (const h of hashes) {\n\t\t\t\t\thash.update(h);\n\t\t\t\t}\n\t\t\t\tcallback(\n\t\t\t\t\tnull,\n\t\t\t\t\t(entry.resolved = /** @type {string} */ (hash.digest(\"hex\")))\n\t\t\t\t);\n\t\t\t}\n\t\t);\n\t}\n\n\t_readContextTimestampAndHash(path, callback) {\n\t\tconst finalize = (timestamp, hash) => {\n\t\t\tconst result =\n\t\t\t\ttimestamp === \"ignore\"\n\t\t\t\t\t? hash\n\t\t\t\t\t: {\n\t\t\t\t\t\t\t...timestamp,\n\t\t\t\t\t\t\t...hash\n\t\t\t\t\t  };\n\t\t\tthis._contextTshs.set(path, result);\n\t\t\tcallback(null, result);\n\t\t};\n\t\tconst cachedHash = this._contextHashes.get(path);\n\t\tconst cachedTimestamp = this._contextTimestamps.get(path);\n\t\tif (cachedHash !== undefined) {\n\t\t\tif (cachedTimestamp !== undefined) {\n\t\t\t\tfinalize(cachedTimestamp, cachedHash);\n\t\t\t} else {\n\t\t\t\tthis.contextTimestampQueue.add(path, (err, entry) => {\n\t\t\t\t\tif (err) return callback(err);\n\t\t\t\t\tfinalize(entry, cachedHash);\n\t\t\t\t});\n\t\t\t}\n\t\t} else {\n\t\t\tif (cachedTimestamp !== undefined) {\n\t\t\t\tthis.contextHashQueue.add(path, (err, entry) => {\n\t\t\t\t\tif (err) return callback(err);\n\t\t\t\t\tfinalize(cachedTimestamp, entry);\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\tthis._readContext(\n\t\t\t\t\t{\n\t\t\t\t\t\tpath,\n\t\t\t\t\t\tfromImmutablePath: () => null,\n\t\t\t\t\t\tfromManagedItem: info => ({\n\t\t\t\t\t\t\tsafeTime: 0,\n\t\t\t\t\t\t\ttimestampHash: info,\n\t\t\t\t\t\t\thash: info || \"\"\n\t\t\t\t\t\t}),\n\t\t\t\t\t\tfromSymlink: (fle, target, callback) => {\n\t\t\t\t\t\t\tcallback(null, {\n\t\t\t\t\t\t\t\ttimestampHash: target,\n\t\t\t\t\t\t\t\thash: target,\n\t\t\t\t\t\t\t\tsymlinks: new Set([target])\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t},\n\t\t\t\t\t\tfromFile: (file, stat, callback) => {\n\t\t\t\t\t\t\tthis._getFileTimestampAndHash(file, callback);\n\t\t\t\t\t\t},\n\t\t\t\t\t\tfromDirectory: (directory, stat, callback) => {\n\t\t\t\t\t\t\tthis.contextTshQueue.increaseParallelism();\n\t\t\t\t\t\t\tthis.contextTshQueue.add(directory, (err, result) => {\n\t\t\t\t\t\t\t\tthis.contextTshQueue.decreaseParallelism();\n\t\t\t\t\t\t\t\tcallback(err, result);\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t},\n\t\t\t\t\t\t/**\n\t\t\t\t\t\t * @param {string[]} files files\n\t\t\t\t\t\t * @param {(Partial<TimestampAndHash> & Partial<ContextTimestampAndHash> | string | null)[]} results results\n\t\t\t\t\t\t * @returns {ContextTimestampAndHash} tsh\n\t\t\t\t\t\t */\n\t\t\t\t\t\treduce: (files, results) => {\n\t\t\t\t\t\t\tlet symlinks = undefined;\n\n\t\t\t\t\t\t\tconst tsHash = createHash(this._hashFunction);\n\t\t\t\t\t\t\tconst hash = createHash(this._hashFunction);\n\n\t\t\t\t\t\t\tfor (const file of files) {\n\t\t\t\t\t\t\t\ttsHash.update(file);\n\t\t\t\t\t\t\t\thash.update(file);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tlet safeTime = 0;\n\t\t\t\t\t\t\tfor (const entry of results) {\n\t\t\t\t\t\t\t\tif (!entry) {\n\t\t\t\t\t\t\t\t\ttsHash.update(\"n\");\n\t\t\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tif (typeof entry === \"string\") {\n\t\t\t\t\t\t\t\t\ttsHash.update(\"n\");\n\t\t\t\t\t\t\t\t\thash.update(entry);\n\t\t\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tif (entry.timestamp) {\n\t\t\t\t\t\t\t\t\ttsHash.update(\"f\");\n\t\t\t\t\t\t\t\t\ttsHash.update(`${entry.timestamp}`);\n\t\t\t\t\t\t\t\t} else if (entry.timestampHash) {\n\t\t\t\t\t\t\t\t\ttsHash.update(\"d\");\n\t\t\t\t\t\t\t\t\ttsHash.update(`${entry.timestampHash}`);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tif (entry.symlinks !== undefined) {\n\t\t\t\t\t\t\t\t\tif (symlinks === undefined) symlinks = new Set();\n\t\t\t\t\t\t\t\t\taddAll(entry.symlinks, symlinks);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tif (entry.safeTime) {\n\t\t\t\t\t\t\t\t\tsafeTime = Math.max(safeTime, entry.safeTime);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\thash.update(entry.hash);\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tconst result = {\n\t\t\t\t\t\t\t\tsafeTime,\n\t\t\t\t\t\t\t\ttimestampHash: /** @type {string} */ (tsHash.digest(\"hex\")),\n\t\t\t\t\t\t\t\thash: /** @type {string} */ (hash.digest(\"hex\"))\n\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\tif (symlinks) result.symlinks = symlinks;\n\t\t\t\t\t\t\treturn result;\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\t(err, result) => {\n\t\t\t\t\t\tif (err) return callback(err);\n\t\t\t\t\t\tthis._contextTshs.set(path, result);\n\t\t\t\t\t\treturn callback(null, result);\n\t\t\t\t\t}\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * @param {ContextTimestampAndHash} entry entry\n\t * @param {function((Error | null)=, ResolvedContextTimestampAndHash=): void} callback callback\n\t * @returns {void}\n\t */\n\t_resolveContextTsh(entry, callback) {\n\t\tconst hashes = [];\n\t\tconst tsHashes = [];\n\t\tlet safeTime = 0;\n\t\tprocessAsyncTree(\n\t\t\tentry.symlinks,\n\t\t\t10,\n\t\t\t(target, push, callback) => {\n\t\t\t\tthis._getUnresolvedContextTsh(target, (err, entry) => {\n\t\t\t\t\tif (err) return callback(err);\n\t\t\t\t\tif (entry) {\n\t\t\t\t\t\thashes.push(entry.hash);\n\t\t\t\t\t\tif (entry.timestampHash) tsHashes.push(entry.timestampHash);\n\t\t\t\t\t\tif (entry.safeTime) {\n\t\t\t\t\t\t\tsafeTime = Math.max(safeTime, entry.safeTime);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (entry.symlinks !== undefined) {\n\t\t\t\t\t\t\tfor (const target of entry.symlinks) push(target);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tcallback();\n\t\t\t\t});\n\t\t\t},\n\t\t\terr => {\n\t\t\t\tif (err) return callback(err);\n\t\t\t\tconst hash = createHash(this._hashFunction);\n\t\t\t\tconst tsHash = createHash(this._hashFunction);\n\t\t\t\thash.update(entry.hash);\n\t\t\t\tif (entry.timestampHash) tsHash.update(entry.timestampHash);\n\t\t\t\tif (entry.safeTime) {\n\t\t\t\t\tsafeTime = Math.max(safeTime, entry.safeTime);\n\t\t\t\t}\n\t\t\t\thashes.sort();\n\t\t\t\tfor (const h of hashes) {\n\t\t\t\t\thash.update(h);\n\t\t\t\t}\n\t\t\t\ttsHashes.sort();\n\t\t\t\tfor (const h of tsHashes) {\n\t\t\t\t\ttsHash.update(h);\n\t\t\t\t}\n\t\t\t\tcallback(\n\t\t\t\t\tnull,\n\t\t\t\t\t(entry.resolved = {\n\t\t\t\t\t\tsafeTime,\n\t\t\t\t\t\ttimestampHash: /** @type {string} */ (tsHash.digest(\"hex\")),\n\t\t\t\t\t\thash: /** @type {string} */ (hash.digest(\"hex\"))\n\t\t\t\t\t})\n\t\t\t\t);\n\t\t\t}\n\t\t);\n\t}\n\n\t_getManagedItemDirectoryInfo(path, callback) {\n\t\tthis.fs.readdir(path, (err, elements) => {\n\t\t\tif (err) {\n\t\t\t\tif (err.code === \"ENOENT\" || err.code === \"ENOTDIR\") {\n\t\t\t\t\treturn callback(null, EMPTY_SET);\n\t\t\t\t}\n\t\t\t\treturn callback(err);\n\t\t\t}\n\t\t\tconst set = new Set(\n\t\t\t\t/** @type {string[]} */ (elements).map(element =>\n\t\t\t\t\tjoin(this.fs, path, element)\n\t\t\t\t)\n\t\t\t);\n\t\t\tcallback(null, set);\n\t\t});\n\t}\n\n\t_getManagedItemInfo(path, callback) {\n\t\tconst dir = dirname(this.fs, path);\n\t\tthis.managedItemDirectoryQueue.add(dir, (err, elements) => {\n\t\t\tif (err) {\n\t\t\t\treturn callback(err);\n\t\t\t}\n\t\t\tif (!elements.has(path)) {\n\t\t\t\t// file or directory doesn't exist\n\t\t\t\tthis._managedItems.set(path, \"*missing\");\n\t\t\t\treturn callback(null, \"*missing\");\n\t\t\t}\n\t\t\t// something exists\n\t\t\t// it may be a file or directory\n\t\t\tif (\n\t\t\t\tpath.endsWith(\"node_modules\") &&\n\t\t\t\t(path.endsWith(\"/node_modules\") || path.endsWith(\"\\\\node_modules\"))\n\t\t\t) {\n\t\t\t\t// we are only interested in existence of this special directory\n\t\t\t\tthis._managedItems.set(path, \"*node_modules\");\n\t\t\t\treturn callback(null, \"*node_modules\");\n\t\t\t}\n\n\t\t\t// we assume it's a directory, as files shouldn't occur in managed paths\n\t\t\tconst packageJsonPath = join(this.fs, path, \"package.json\");\n\t\t\tthis.fs.readFile(packageJsonPath, (err, content) => {\n\t\t\t\tif (err) {\n\t\t\t\t\tif (err.code === \"ENOENT\" || err.code === \"ENOTDIR\") {\n\t\t\t\t\t\t// no package.json or path is not a directory\n\t\t\t\t\t\tthis.fs.readdir(path, (err, elements) => {\n\t\t\t\t\t\t\tif (\n\t\t\t\t\t\t\t\t!err &&\n\t\t\t\t\t\t\t\telements.length === 1 &&\n\t\t\t\t\t\t\t\telements[0] === \"node_modules\"\n\t\t\t\t\t\t\t) {\n\t\t\t\t\t\t\t\t// This is only a grouping folder e. g. used by yarn\n\t\t\t\t\t\t\t\t// we are only interested in existence of this special directory\n\t\t\t\t\t\t\t\tthis._managedItems.set(path, \"*nested\");\n\t\t\t\t\t\t\t\treturn callback(null, \"*nested\");\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tthis.logger.warn(\n\t\t\t\t\t\t\t\t`Managed item ${path} isn't a directory or doesn't contain a package.json (see snapshot.managedPaths option)`\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\treturn callback();\n\t\t\t\t\t\t});\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t\treturn callback(err);\n\t\t\t\t}\n\t\t\t\tlet data;\n\t\t\t\ttry {\n\t\t\t\t\tdata = JSON.parse(content.toString(\"utf-8\"));\n\t\t\t\t} catch (e) {\n\t\t\t\t\treturn callback(e);\n\t\t\t\t}\n\t\t\t\tif (!data.name) {\n\t\t\t\t\tthis.logger.warn(\n\t\t\t\t\t\t`${packageJsonPath} doesn't contain a \"name\" property (see snapshot.managedPaths option)`\n\t\t\t\t\t);\n\t\t\t\t\treturn callback();\n\t\t\t\t}\n\t\t\t\tconst info = `${data.name || \"\"}@${data.version || \"\"}`;\n\t\t\t\tthis._managedItems.set(path, info);\n\t\t\t\tcallback(null, info);\n\t\t\t});\n\t\t});\n\t}\n\n\tgetDeprecatedFileTimestamps() {\n\t\tif (this._cachedDeprecatedFileTimestamps !== undefined)\n\t\t\treturn this._cachedDeprecatedFileTimestamps;\n\t\tconst map = new Map();\n\t\tfor (const [path, info] of this._fileTimestamps) {\n\t\t\tif (info) map.set(path, typeof info === \"object\" ? info.safeTime : null);\n\t\t}\n\t\treturn (this._cachedDeprecatedFileTimestamps = map);\n\t}\n\n\tgetDeprecatedContextTimestamps() {\n\t\tif (this._cachedDeprecatedContextTimestamps !== undefined)\n\t\t\treturn this._cachedDeprecatedContextTimestamps;\n\t\tconst map = new Map();\n\t\tfor (const [path, info] of this._contextTimestamps) {\n\t\t\tif (info) map.set(path, typeof info === \"object\" ? info.safeTime : null);\n\t\t}\n\t\treturn (this._cachedDeprecatedContextTimestamps = map);\n\t}\n}\n\nmodule.exports = FileSystemInfo;\nmodule.exports.Snapshot = Snapshot;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}