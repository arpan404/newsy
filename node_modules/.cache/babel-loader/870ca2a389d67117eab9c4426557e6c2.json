{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nconst {\n  pathToFileURL\n} = require(\"url\");\n\nconst AsyncDependenciesBlock = require(\"../AsyncDependenciesBlock\");\n\nconst CommentCompilationWarning = require(\"../CommentCompilationWarning\");\n\nconst UnsupportedFeatureWarning = require(\"../UnsupportedFeatureWarning\");\n\nconst EnableChunkLoadingPlugin = require(\"../javascript/EnableChunkLoadingPlugin\");\n\nconst {\n  equals\n} = require(\"../util/ArrayHelpers\");\n\nconst createHash = require(\"../util/createHash\");\n\nconst {\n  contextify\n} = require(\"../util/identifier\");\n\nconst EnableWasmLoadingPlugin = require(\"../wasm/EnableWasmLoadingPlugin\");\n\nconst ConstDependency = require(\"./ConstDependency\");\n\nconst CreateScriptUrlDependency = require(\"./CreateScriptUrlDependency\");\n\nconst {\n  harmonySpecifierTag\n} = require(\"./HarmonyImportDependencyParserPlugin\");\n\nconst WorkerDependency = require(\"./WorkerDependency\");\n/** @typedef {import(\"estree\").Expression} Expression */\n\n/** @typedef {import(\"estree\").ObjectExpression} ObjectExpression */\n\n/** @typedef {import(\"estree\").Pattern} Pattern */\n\n/** @typedef {import(\"estree\").Property} Property */\n\n/** @typedef {import(\"estree\").SpreadElement} SpreadElement */\n\n/** @typedef {import(\"../Compiler\")} Compiler */\n\n/** @typedef {import(\"../Entrypoint\").EntryOptions} EntryOptions */\n\n/** @typedef {import(\"../Parser\").ParserState} ParserState */\n\n/** @typedef {import(\"../javascript/BasicEvaluatedExpression\")} BasicEvaluatedExpression */\n\n/** @typedef {import(\"../javascript/JavascriptParser\")} JavascriptParser */\n\n/** @typedef {import(\"./HarmonyImportDependencyParserPlugin\").HarmonySettings} HarmonySettings */\n\n\nconst getUrl = module => {\n  return pathToFileURL(module.resource).toString();\n};\n\nconst DEFAULT_SYNTAX = [\"Worker\", \"SharedWorker\", \"navigator.serviceWorker.register()\", \"Worker from worker_threads\"];\n/** @type {WeakMap<ParserState, number>} */\n\nconst workerIndexMap = new WeakMap();\n\nclass WorkerPlugin {\n  constructor(chunkLoading, wasmLoading, module) {\n    this._chunkLoading = chunkLoading;\n    this._wasmLoading = wasmLoading;\n    this._module = module;\n  }\n  /**\n   * Apply the plugin\n   * @param {Compiler} compiler the compiler instance\n   * @returns {void}\n   */\n\n\n  apply(compiler) {\n    if (this._chunkLoading) {\n      new EnableChunkLoadingPlugin(this._chunkLoading).apply(compiler);\n    }\n\n    if (this._wasmLoading) {\n      new EnableWasmLoadingPlugin(this._wasmLoading).apply(compiler);\n    }\n\n    const cachedContextify = contextify.bindContextCache(compiler.context, compiler.root);\n    compiler.hooks.thisCompilation.tap(\"WorkerPlugin\", (compilation, _ref) => {\n      let {\n        normalModuleFactory\n      } = _ref;\n      compilation.dependencyFactories.set(WorkerDependency, normalModuleFactory);\n      compilation.dependencyTemplates.set(WorkerDependency, new WorkerDependency.Template());\n      compilation.dependencyTemplates.set(CreateScriptUrlDependency, new CreateScriptUrlDependency.Template());\n      /**\n       * @param {JavascriptParser} parser the parser\n       * @param {Expression} expr expression\n       * @returns {[BasicEvaluatedExpression, [number, number]]} parsed\n       */\n\n      const parseModuleUrl = (parser, expr) => {\n        if (expr.type !== \"NewExpression\" || expr.callee.type === \"Super\" || expr.arguments.length !== 2) return;\n        const [arg1, arg2] = expr.arguments;\n        if (arg1.type === \"SpreadElement\") return;\n        if (arg2.type === \"SpreadElement\") return;\n        const callee = parser.evaluateExpression(expr.callee);\n        if (!callee.isIdentifier() || callee.identifier !== \"URL\") return;\n        const arg2Value = parser.evaluateExpression(arg2);\n\n        if (!arg2Value.isString() || !arg2Value.string.startsWith(\"file://\") || arg2Value.string !== getUrl(parser.state.module)) {\n          return;\n        }\n\n        const arg1Value = parser.evaluateExpression(arg1);\n        return [arg1Value, [arg1.range[0], arg2.range[1]]];\n      };\n      /**\n       * @param {JavascriptParser} parser the parser\n       * @param {ObjectExpression} expr expression\n       * @returns {{ expressions: Record<string, Expression | Pattern>, otherElements: (Property | SpreadElement)[], values: Record<string, any>, spread: boolean, insertType: \"comma\" | \"single\", insertLocation: number }} parsed object\n       */\n\n\n      const parseObjectExpression = (parser, expr) => {\n        /** @type {Record<string, any>} */\n        const values = {};\n        /** @type {Record<string, Expression | Pattern>} */\n\n        const expressions = {};\n        /** @type {(Property | SpreadElement)[]} */\n\n        const otherElements = [];\n        let spread = false;\n\n        for (const prop of expr.properties) {\n          if (prop.type === \"SpreadElement\") {\n            spread = true;\n          } else if (prop.type === \"Property\" && !prop.method && !prop.computed && prop.key.type === \"Identifier\") {\n            expressions[prop.key.name] = prop.value;\n\n            if (!prop.shorthand && !prop.value.type.endsWith(\"Pattern\")) {\n              const value = parser.evaluateExpression(\n              /** @type {Expression} */\n              prop.value);\n              if (value.isCompileTimeValue()) values[prop.key.name] = value.asCompileTimeValue();\n            }\n          } else {\n            otherElements.push(prop);\n          }\n        }\n\n        const insertType = expr.properties.length > 0 ? \"comma\" : \"single\";\n        const insertLocation = expr.properties[expr.properties.length - 1].range[1];\n        return {\n          expressions,\n          otherElements,\n          values,\n          spread,\n          insertType,\n          insertLocation\n        };\n      };\n      /**\n       * @param {JavascriptParser} parser the parser\n       * @param {object} parserOptions options\n       */\n\n\n      const parserPlugin = (parser, parserOptions) => {\n        if (parserOptions.worker === false) return;\n        const options = !Array.isArray(parserOptions.worker) ? [\"...\"] : parserOptions.worker;\n\n        const handleNewWorker = expr => {\n          if (expr.arguments.length === 0 || expr.arguments.length > 2) return;\n          const [arg1, arg2] = expr.arguments;\n          if (arg1.type === \"SpreadElement\") return;\n          if (arg2 && arg2.type === \"SpreadElement\") return;\n          const parsedUrl = parseModuleUrl(parser, arg1);\n          if (!parsedUrl) return;\n          const [url, range] = parsedUrl;\n          if (!url.isString()) return;\n          const {\n            expressions,\n            otherElements,\n            values: options,\n            spread: hasSpreadInOptions,\n            insertType,\n            insertLocation\n          } = arg2 && arg2.type === \"ObjectExpression\" ? parseObjectExpression(parser, arg2) : {\n            expressions: {},\n            otherElements: [],\n            values: {},\n            spread: false,\n            insertType: arg2 ? \"spread\" : \"argument\",\n            insertLocation: arg2 ? arg2.range : arg1.range[1]\n          };\n          const {\n            options: importOptions,\n            errors: commentErrors\n          } = parser.parseCommentOptions(expr.range);\n\n          if (commentErrors) {\n            for (const e of commentErrors) {\n              const {\n                comment\n              } = e;\n              parser.state.module.addWarning(new CommentCompilationWarning(`Compilation error while processing magic comment(-s): /*${comment.value}*/: ${e.message}`, comment.loc));\n            }\n          }\n          /** @type {EntryOptions} */\n\n\n          let entryOptions = {};\n\n          if (importOptions) {\n            if (importOptions.webpackIgnore !== undefined) {\n              if (typeof importOptions.webpackIgnore !== \"boolean\") {\n                parser.state.module.addWarning(new UnsupportedFeatureWarning(`\\`webpackIgnore\\` expected a boolean, but received: ${importOptions.webpackIgnore}.`, expr.loc));\n              } else {\n                if (importOptions.webpackIgnore) {\n                  return false;\n                }\n              }\n            }\n\n            if (importOptions.webpackEntryOptions !== undefined) {\n              if (typeof importOptions.webpackEntryOptions !== \"object\" || importOptions.webpackEntryOptions === null) {\n                parser.state.module.addWarning(new UnsupportedFeatureWarning(`\\`webpackEntryOptions\\` expected a object, but received: ${importOptions.webpackEntryOptions}.`, expr.loc));\n              } else {\n                Object.assign(entryOptions, importOptions.webpackEntryOptions);\n              }\n            }\n\n            if (importOptions.webpackChunkName !== undefined) {\n              if (typeof importOptions.webpackChunkName !== \"string\") {\n                parser.state.module.addWarning(new UnsupportedFeatureWarning(`\\`webpackChunkName\\` expected a string, but received: ${importOptions.webpackChunkName}.`, expr.loc));\n              } else {\n                entryOptions.name = importOptions.webpackChunkName;\n              }\n            }\n          }\n\n          if (!Object.prototype.hasOwnProperty.call(entryOptions, \"name\") && options && typeof options.name === \"string\") {\n            entryOptions.name = options.name;\n          }\n\n          if (entryOptions.runtime === undefined) {\n            let i = workerIndexMap.get(parser.state) || 0;\n            workerIndexMap.set(parser.state, i + 1);\n            let name = `${cachedContextify(parser.state.module.identifier())}|${i}`;\n            const hash = createHash(compilation.outputOptions.hashFunction);\n            hash.update(name);\n            const digest =\n            /** @type {string} */\n            hash.digest(compilation.outputOptions.hashDigest);\n            entryOptions.runtime = digest.slice(0, compilation.outputOptions.hashDigestLength);\n          }\n\n          const block = new AsyncDependenciesBlock({\n            name: entryOptions.name,\n            entryOptions: {\n              chunkLoading: this._chunkLoading,\n              wasmLoading: this._wasmLoading,\n              ...entryOptions\n            }\n          });\n          block.loc = expr.loc;\n          const dep = new WorkerDependency(url.string, range);\n          dep.loc = expr.loc;\n          block.addDependency(dep);\n          parser.state.module.addBlock(block);\n\n          if (compilation.outputOptions.trustedTypes) {\n            const dep = new CreateScriptUrlDependency(expr.arguments[0].range);\n            dep.loc = expr.loc;\n            parser.state.module.addDependency(dep);\n          }\n\n          if (expressions.type) {\n            const expr = expressions.type;\n\n            if (options.type !== false) {\n              const dep = new ConstDependency(this._module ? '\"module\"' : \"undefined\", expr.range);\n              dep.loc = expr.loc;\n              parser.state.module.addPresentationalDependency(dep);\n              expressions.type = undefined;\n            }\n          } else if (insertType === \"comma\") {\n            if (this._module || hasSpreadInOptions) {\n              const dep = new ConstDependency(`, type: ${this._module ? '\"module\"' : \"undefined\"}`, insertLocation);\n              dep.loc = expr.loc;\n              parser.state.module.addPresentationalDependency(dep);\n            }\n          } else if (insertType === \"spread\") {\n            const dep1 = new ConstDependency(\"Object.assign({}, \", insertLocation[0]);\n            const dep2 = new ConstDependency(`, { type: ${this._module ? '\"module\"' : \"undefined\"} })`, insertLocation[1]);\n            dep1.loc = expr.loc;\n            dep2.loc = expr.loc;\n            parser.state.module.addPresentationalDependency(dep1);\n            parser.state.module.addPresentationalDependency(dep2);\n          } else if (insertType === \"argument\") {\n            if (this._module) {\n              const dep = new ConstDependency(', { type: \"module\" }', insertLocation);\n              dep.loc = expr.loc;\n              parser.state.module.addPresentationalDependency(dep);\n            }\n          }\n\n          parser.walkExpression(expr.callee);\n\n          for (const key of Object.keys(expressions)) {\n            if (expressions[key]) parser.walkExpression(expressions[key]);\n          }\n\n          for (const prop of otherElements) {\n            parser.walkProperty(prop);\n          }\n\n          if (insertType === \"spread\") {\n            parser.walkExpression(arg2);\n          }\n\n          return true;\n        };\n\n        const processItem = item => {\n          if (item.endsWith(\"()\")) {\n            parser.hooks.call.for(item.slice(0, -2)).tap(\"WorkerPlugin\", handleNewWorker);\n          } else {\n            const match = /^(.+?)(\\(\\))?\\s+from\\s+(.+)$/.exec(item);\n\n            if (match) {\n              const ids = match[1].split(\".\");\n              const call = match[2];\n              const source = match[3];\n              (call ? parser.hooks.call : parser.hooks.new).for(harmonySpecifierTag).tap(\"WorkerPlugin\", expr => {\n                const settings =\n                /** @type {HarmonySettings} */\n                parser.currentTagData;\n\n                if (!settings || settings.source !== source || !equals(settings.ids, ids)) {\n                  return;\n                }\n\n                return handleNewWorker(expr);\n              });\n            } else {\n              parser.hooks.new.for(item).tap(\"WorkerPlugin\", handleNewWorker);\n            }\n          }\n        };\n\n        for (const item of options) {\n          if (item === \"...\") {\n            DEFAULT_SYNTAX.forEach(processItem);\n          } else processItem(item);\n        }\n      };\n\n      normalModuleFactory.hooks.parser.for(\"javascript/auto\").tap(\"WorkerPlugin\", parserPlugin);\n      normalModuleFactory.hooks.parser.for(\"javascript/esm\").tap(\"WorkerPlugin\", parserPlugin);\n    });\n  }\n\n}\n\nmodule.exports = WorkerPlugin;","map":{"version":3,"names":["pathToFileURL","require","AsyncDependenciesBlock","CommentCompilationWarning","UnsupportedFeatureWarning","EnableChunkLoadingPlugin","equals","createHash","contextify","EnableWasmLoadingPlugin","ConstDependency","CreateScriptUrlDependency","harmonySpecifierTag","WorkerDependency","getUrl","module","resource","toString","DEFAULT_SYNTAX","workerIndexMap","WeakMap","WorkerPlugin","constructor","chunkLoading","wasmLoading","_chunkLoading","_wasmLoading","_module","apply","compiler","cachedContextify","bindContextCache","context","root","hooks","thisCompilation","tap","compilation","normalModuleFactory","dependencyFactories","set","dependencyTemplates","Template","parseModuleUrl","parser","expr","type","callee","arguments","length","arg1","arg2","evaluateExpression","isIdentifier","identifier","arg2Value","isString","string","startsWith","state","arg1Value","range","parseObjectExpression","values","expressions","otherElements","spread","prop","properties","method","computed","key","name","value","shorthand","endsWith","isCompileTimeValue","asCompileTimeValue","push","insertType","insertLocation","parserPlugin","parserOptions","worker","options","Array","isArray","handleNewWorker","parsedUrl","url","hasSpreadInOptions","importOptions","errors","commentErrors","parseCommentOptions","e","comment","addWarning","message","loc","entryOptions","webpackIgnore","undefined","webpackEntryOptions","Object","assign","webpackChunkName","prototype","hasOwnProperty","call","runtime","i","get","hash","outputOptions","hashFunction","update","digest","hashDigest","slice","hashDigestLength","block","dep","addDependency","addBlock","trustedTypes","addPresentationalDependency","dep1","dep2","walkExpression","keys","walkProperty","processItem","item","for","match","exec","ids","split","source","new","settings","currentTagData","forEach","exports"],"sources":["/Users/arpanbhandari/Documents/cod-ing/React/newsapp/node_modules/webpack/lib/dependencies/WorkerPlugin.js"],"sourcesContent":["/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\n\"use strict\";\n\nconst { pathToFileURL } = require(\"url\");\nconst AsyncDependenciesBlock = require(\"../AsyncDependenciesBlock\");\nconst CommentCompilationWarning = require(\"../CommentCompilationWarning\");\nconst UnsupportedFeatureWarning = require(\"../UnsupportedFeatureWarning\");\nconst EnableChunkLoadingPlugin = require(\"../javascript/EnableChunkLoadingPlugin\");\nconst { equals } = require(\"../util/ArrayHelpers\");\nconst createHash = require(\"../util/createHash\");\nconst { contextify } = require(\"../util/identifier\");\nconst EnableWasmLoadingPlugin = require(\"../wasm/EnableWasmLoadingPlugin\");\nconst ConstDependency = require(\"./ConstDependency\");\nconst CreateScriptUrlDependency = require(\"./CreateScriptUrlDependency\");\nconst {\n\tharmonySpecifierTag\n} = require(\"./HarmonyImportDependencyParserPlugin\");\nconst WorkerDependency = require(\"./WorkerDependency\");\n\n/** @typedef {import(\"estree\").Expression} Expression */\n/** @typedef {import(\"estree\").ObjectExpression} ObjectExpression */\n/** @typedef {import(\"estree\").Pattern} Pattern */\n/** @typedef {import(\"estree\").Property} Property */\n/** @typedef {import(\"estree\").SpreadElement} SpreadElement */\n/** @typedef {import(\"../Compiler\")} Compiler */\n/** @typedef {import(\"../Entrypoint\").EntryOptions} EntryOptions */\n/** @typedef {import(\"../Parser\").ParserState} ParserState */\n/** @typedef {import(\"../javascript/BasicEvaluatedExpression\")} BasicEvaluatedExpression */\n/** @typedef {import(\"../javascript/JavascriptParser\")} JavascriptParser */\n/** @typedef {import(\"./HarmonyImportDependencyParserPlugin\").HarmonySettings} HarmonySettings */\n\nconst getUrl = module => {\n\treturn pathToFileURL(module.resource).toString();\n};\n\nconst DEFAULT_SYNTAX = [\n\t\"Worker\",\n\t\"SharedWorker\",\n\t\"navigator.serviceWorker.register()\",\n\t\"Worker from worker_threads\"\n];\n\n/** @type {WeakMap<ParserState, number>} */\nconst workerIndexMap = new WeakMap();\n\nclass WorkerPlugin {\n\tconstructor(chunkLoading, wasmLoading, module) {\n\t\tthis._chunkLoading = chunkLoading;\n\t\tthis._wasmLoading = wasmLoading;\n\t\tthis._module = module;\n\t}\n\t/**\n\t * Apply the plugin\n\t * @param {Compiler} compiler the compiler instance\n\t * @returns {void}\n\t */\n\tapply(compiler) {\n\t\tif (this._chunkLoading) {\n\t\t\tnew EnableChunkLoadingPlugin(this._chunkLoading).apply(compiler);\n\t\t}\n\t\tif (this._wasmLoading) {\n\t\t\tnew EnableWasmLoadingPlugin(this._wasmLoading).apply(compiler);\n\t\t}\n\t\tconst cachedContextify = contextify.bindContextCache(\n\t\t\tcompiler.context,\n\t\t\tcompiler.root\n\t\t);\n\t\tcompiler.hooks.thisCompilation.tap(\n\t\t\t\"WorkerPlugin\",\n\t\t\t(compilation, { normalModuleFactory }) => {\n\t\t\t\tcompilation.dependencyFactories.set(\n\t\t\t\t\tWorkerDependency,\n\t\t\t\t\tnormalModuleFactory\n\t\t\t\t);\n\t\t\t\tcompilation.dependencyTemplates.set(\n\t\t\t\t\tWorkerDependency,\n\t\t\t\t\tnew WorkerDependency.Template()\n\t\t\t\t);\n\t\t\t\tcompilation.dependencyTemplates.set(\n\t\t\t\t\tCreateScriptUrlDependency,\n\t\t\t\t\tnew CreateScriptUrlDependency.Template()\n\t\t\t\t);\n\n\t\t\t\t/**\n\t\t\t\t * @param {JavascriptParser} parser the parser\n\t\t\t\t * @param {Expression} expr expression\n\t\t\t\t * @returns {[BasicEvaluatedExpression, [number, number]]} parsed\n\t\t\t\t */\n\t\t\t\tconst parseModuleUrl = (parser, expr) => {\n\t\t\t\t\tif (\n\t\t\t\t\t\texpr.type !== \"NewExpression\" ||\n\t\t\t\t\t\texpr.callee.type === \"Super\" ||\n\t\t\t\t\t\texpr.arguments.length !== 2\n\t\t\t\t\t)\n\t\t\t\t\t\treturn;\n\t\t\t\t\tconst [arg1, arg2] = expr.arguments;\n\t\t\t\t\tif (arg1.type === \"SpreadElement\") return;\n\t\t\t\t\tif (arg2.type === \"SpreadElement\") return;\n\t\t\t\t\tconst callee = parser.evaluateExpression(expr.callee);\n\t\t\t\t\tif (!callee.isIdentifier() || callee.identifier !== \"URL\") return;\n\t\t\t\t\tconst arg2Value = parser.evaluateExpression(arg2);\n\t\t\t\t\tif (\n\t\t\t\t\t\t!arg2Value.isString() ||\n\t\t\t\t\t\t!arg2Value.string.startsWith(\"file://\") ||\n\t\t\t\t\t\targ2Value.string !== getUrl(parser.state.module)\n\t\t\t\t\t) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t\tconst arg1Value = parser.evaluateExpression(arg1);\n\t\t\t\t\treturn [arg1Value, [arg1.range[0], arg2.range[1]]];\n\t\t\t\t};\n\n\t\t\t\t/**\n\t\t\t\t * @param {JavascriptParser} parser the parser\n\t\t\t\t * @param {ObjectExpression} expr expression\n\t\t\t\t * @returns {{ expressions: Record<string, Expression | Pattern>, otherElements: (Property | SpreadElement)[], values: Record<string, any>, spread: boolean, insertType: \"comma\" | \"single\", insertLocation: number }} parsed object\n\t\t\t\t */\n\t\t\t\tconst parseObjectExpression = (parser, expr) => {\n\t\t\t\t\t/** @type {Record<string, any>} */\n\t\t\t\t\tconst values = {};\n\t\t\t\t\t/** @type {Record<string, Expression | Pattern>} */\n\t\t\t\t\tconst expressions = {};\n\t\t\t\t\t/** @type {(Property | SpreadElement)[]} */\n\t\t\t\t\tconst otherElements = [];\n\t\t\t\t\tlet spread = false;\n\t\t\t\t\tfor (const prop of expr.properties) {\n\t\t\t\t\t\tif (prop.type === \"SpreadElement\") {\n\t\t\t\t\t\t\tspread = true;\n\t\t\t\t\t\t} else if (\n\t\t\t\t\t\t\tprop.type === \"Property\" &&\n\t\t\t\t\t\t\t!prop.method &&\n\t\t\t\t\t\t\t!prop.computed &&\n\t\t\t\t\t\t\tprop.key.type === \"Identifier\"\n\t\t\t\t\t\t) {\n\t\t\t\t\t\t\texpressions[prop.key.name] = prop.value;\n\t\t\t\t\t\t\tif (!prop.shorthand && !prop.value.type.endsWith(\"Pattern\")) {\n\t\t\t\t\t\t\t\tconst value = parser.evaluateExpression(\n\t\t\t\t\t\t\t\t\t/** @type {Expression} */ (prop.value)\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\tif (value.isCompileTimeValue())\n\t\t\t\t\t\t\t\t\tvalues[prop.key.name] = value.asCompileTimeValue();\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\totherElements.push(prop);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tconst insertType = expr.properties.length > 0 ? \"comma\" : \"single\";\n\t\t\t\t\tconst insertLocation =\n\t\t\t\t\t\texpr.properties[expr.properties.length - 1].range[1];\n\t\t\t\t\treturn {\n\t\t\t\t\t\texpressions,\n\t\t\t\t\t\totherElements,\n\t\t\t\t\t\tvalues,\n\t\t\t\t\t\tspread,\n\t\t\t\t\t\tinsertType,\n\t\t\t\t\t\tinsertLocation\n\t\t\t\t\t};\n\t\t\t\t};\n\n\t\t\t\t/**\n\t\t\t\t * @param {JavascriptParser} parser the parser\n\t\t\t\t * @param {object} parserOptions options\n\t\t\t\t */\n\t\t\t\tconst parserPlugin = (parser, parserOptions) => {\n\t\t\t\t\tif (parserOptions.worker === false) return;\n\t\t\t\t\tconst options = !Array.isArray(parserOptions.worker)\n\t\t\t\t\t\t? [\"...\"]\n\t\t\t\t\t\t: parserOptions.worker;\n\t\t\t\t\tconst handleNewWorker = expr => {\n\t\t\t\t\t\tif (expr.arguments.length === 0 || expr.arguments.length > 2)\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\tconst [arg1, arg2] = expr.arguments;\n\t\t\t\t\t\tif (arg1.type === \"SpreadElement\") return;\n\t\t\t\t\t\tif (arg2 && arg2.type === \"SpreadElement\") return;\n\t\t\t\t\t\tconst parsedUrl = parseModuleUrl(parser, arg1);\n\t\t\t\t\t\tif (!parsedUrl) return;\n\t\t\t\t\t\tconst [url, range] = parsedUrl;\n\t\t\t\t\t\tif (!url.isString()) return;\n\t\t\t\t\t\tconst {\n\t\t\t\t\t\t\texpressions,\n\t\t\t\t\t\t\totherElements,\n\t\t\t\t\t\t\tvalues: options,\n\t\t\t\t\t\t\tspread: hasSpreadInOptions,\n\t\t\t\t\t\t\tinsertType,\n\t\t\t\t\t\t\tinsertLocation\n\t\t\t\t\t\t} = arg2 && arg2.type === \"ObjectExpression\"\n\t\t\t\t\t\t\t? parseObjectExpression(parser, arg2)\n\t\t\t\t\t\t\t: {\n\t\t\t\t\t\t\t\t\texpressions: {},\n\t\t\t\t\t\t\t\t\totherElements: [],\n\t\t\t\t\t\t\t\t\tvalues: {},\n\t\t\t\t\t\t\t\t\tspread: false,\n\t\t\t\t\t\t\t\t\tinsertType: arg2 ? \"spread\" : \"argument\",\n\t\t\t\t\t\t\t\t\tinsertLocation: arg2 ? arg2.range : arg1.range[1]\n\t\t\t\t\t\t\t  };\n\t\t\t\t\t\tconst { options: importOptions, errors: commentErrors } =\n\t\t\t\t\t\t\tparser.parseCommentOptions(expr.range);\n\n\t\t\t\t\t\tif (commentErrors) {\n\t\t\t\t\t\t\tfor (const e of commentErrors) {\n\t\t\t\t\t\t\t\tconst { comment } = e;\n\t\t\t\t\t\t\t\tparser.state.module.addWarning(\n\t\t\t\t\t\t\t\t\tnew CommentCompilationWarning(\n\t\t\t\t\t\t\t\t\t\t`Compilation error while processing magic comment(-s): /*${comment.value}*/: ${e.message}`,\n\t\t\t\t\t\t\t\t\t\tcomment.loc\n\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t/** @type {EntryOptions} */\n\t\t\t\t\t\tlet entryOptions = {};\n\n\t\t\t\t\t\tif (importOptions) {\n\t\t\t\t\t\t\tif (importOptions.webpackIgnore !== undefined) {\n\t\t\t\t\t\t\t\tif (typeof importOptions.webpackIgnore !== \"boolean\") {\n\t\t\t\t\t\t\t\t\tparser.state.module.addWarning(\n\t\t\t\t\t\t\t\t\t\tnew UnsupportedFeatureWarning(\n\t\t\t\t\t\t\t\t\t\t\t`\\`webpackIgnore\\` expected a boolean, but received: ${importOptions.webpackIgnore}.`,\n\t\t\t\t\t\t\t\t\t\t\texpr.loc\n\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\tif (importOptions.webpackIgnore) {\n\t\t\t\t\t\t\t\t\t\treturn false;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif (importOptions.webpackEntryOptions !== undefined) {\n\t\t\t\t\t\t\t\tif (\n\t\t\t\t\t\t\t\t\ttypeof importOptions.webpackEntryOptions !== \"object\" ||\n\t\t\t\t\t\t\t\t\timportOptions.webpackEntryOptions === null\n\t\t\t\t\t\t\t\t) {\n\t\t\t\t\t\t\t\t\tparser.state.module.addWarning(\n\t\t\t\t\t\t\t\t\t\tnew UnsupportedFeatureWarning(\n\t\t\t\t\t\t\t\t\t\t\t`\\`webpackEntryOptions\\` expected a object, but received: ${importOptions.webpackEntryOptions}.`,\n\t\t\t\t\t\t\t\t\t\t\texpr.loc\n\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\tObject.assign(\n\t\t\t\t\t\t\t\t\t\tentryOptions,\n\t\t\t\t\t\t\t\t\t\timportOptions.webpackEntryOptions\n\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif (importOptions.webpackChunkName !== undefined) {\n\t\t\t\t\t\t\t\tif (typeof importOptions.webpackChunkName !== \"string\") {\n\t\t\t\t\t\t\t\t\tparser.state.module.addWarning(\n\t\t\t\t\t\t\t\t\t\tnew UnsupportedFeatureWarning(\n\t\t\t\t\t\t\t\t\t\t\t`\\`webpackChunkName\\` expected a string, but received: ${importOptions.webpackChunkName}.`,\n\t\t\t\t\t\t\t\t\t\t\texpr.loc\n\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\tentryOptions.name = importOptions.webpackChunkName;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (\n\t\t\t\t\t\t\t!Object.prototype.hasOwnProperty.call(entryOptions, \"name\") &&\n\t\t\t\t\t\t\toptions &&\n\t\t\t\t\t\t\ttypeof options.name === \"string\"\n\t\t\t\t\t\t) {\n\t\t\t\t\t\t\tentryOptions.name = options.name;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (entryOptions.runtime === undefined) {\n\t\t\t\t\t\t\tlet i = workerIndexMap.get(parser.state) || 0;\n\t\t\t\t\t\t\tworkerIndexMap.set(parser.state, i + 1);\n\t\t\t\t\t\t\tlet name = `${cachedContextify(\n\t\t\t\t\t\t\t\tparser.state.module.identifier()\n\t\t\t\t\t\t\t)}|${i}`;\n\t\t\t\t\t\t\tconst hash = createHash(compilation.outputOptions.hashFunction);\n\t\t\t\t\t\t\thash.update(name);\n\t\t\t\t\t\t\tconst digest = /** @type {string} */ (\n\t\t\t\t\t\t\t\thash.digest(compilation.outputOptions.hashDigest)\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\tentryOptions.runtime = digest.slice(\n\t\t\t\t\t\t\t\t0,\n\t\t\t\t\t\t\t\tcompilation.outputOptions.hashDigestLength\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tconst block = new AsyncDependenciesBlock({\n\t\t\t\t\t\t\tname: entryOptions.name,\n\t\t\t\t\t\t\tentryOptions: {\n\t\t\t\t\t\t\t\tchunkLoading: this._chunkLoading,\n\t\t\t\t\t\t\t\twasmLoading: this._wasmLoading,\n\t\t\t\t\t\t\t\t...entryOptions\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t});\n\t\t\t\t\t\tblock.loc = expr.loc;\n\t\t\t\t\t\tconst dep = new WorkerDependency(url.string, range);\n\t\t\t\t\t\tdep.loc = expr.loc;\n\t\t\t\t\t\tblock.addDependency(dep);\n\t\t\t\t\t\tparser.state.module.addBlock(block);\n\n\t\t\t\t\t\tif (compilation.outputOptions.trustedTypes) {\n\t\t\t\t\t\t\tconst dep = new CreateScriptUrlDependency(\n\t\t\t\t\t\t\t\texpr.arguments[0].range\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\tdep.loc = expr.loc;\n\t\t\t\t\t\t\tparser.state.module.addDependency(dep);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (expressions.type) {\n\t\t\t\t\t\t\tconst expr = expressions.type;\n\t\t\t\t\t\t\tif (options.type !== false) {\n\t\t\t\t\t\t\t\tconst dep = new ConstDependency(\n\t\t\t\t\t\t\t\t\tthis._module ? '\"module\"' : \"undefined\",\n\t\t\t\t\t\t\t\t\texpr.range\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\tdep.loc = expr.loc;\n\t\t\t\t\t\t\t\tparser.state.module.addPresentationalDependency(dep);\n\t\t\t\t\t\t\t\texpressions.type = undefined;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else if (insertType === \"comma\") {\n\t\t\t\t\t\t\tif (this._module || hasSpreadInOptions) {\n\t\t\t\t\t\t\t\tconst dep = new ConstDependency(\n\t\t\t\t\t\t\t\t\t`, type: ${this._module ? '\"module\"' : \"undefined\"}`,\n\t\t\t\t\t\t\t\t\tinsertLocation\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\tdep.loc = expr.loc;\n\t\t\t\t\t\t\t\tparser.state.module.addPresentationalDependency(dep);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else if (insertType === \"spread\") {\n\t\t\t\t\t\t\tconst dep1 = new ConstDependency(\n\t\t\t\t\t\t\t\t\"Object.assign({}, \",\n\t\t\t\t\t\t\t\tinsertLocation[0]\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\tconst dep2 = new ConstDependency(\n\t\t\t\t\t\t\t\t`, { type: ${this._module ? '\"module\"' : \"undefined\"} })`,\n\t\t\t\t\t\t\t\tinsertLocation[1]\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\tdep1.loc = expr.loc;\n\t\t\t\t\t\t\tdep2.loc = expr.loc;\n\t\t\t\t\t\t\tparser.state.module.addPresentationalDependency(dep1);\n\t\t\t\t\t\t\tparser.state.module.addPresentationalDependency(dep2);\n\t\t\t\t\t\t} else if (insertType === \"argument\") {\n\t\t\t\t\t\t\tif (this._module) {\n\t\t\t\t\t\t\t\tconst dep = new ConstDependency(\n\t\t\t\t\t\t\t\t\t', { type: \"module\" }',\n\t\t\t\t\t\t\t\t\tinsertLocation\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\tdep.loc = expr.loc;\n\t\t\t\t\t\t\t\tparser.state.module.addPresentationalDependency(dep);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tparser.walkExpression(expr.callee);\n\t\t\t\t\t\tfor (const key of Object.keys(expressions)) {\n\t\t\t\t\t\t\tif (expressions[key]) parser.walkExpression(expressions[key]);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tfor (const prop of otherElements) {\n\t\t\t\t\t\t\tparser.walkProperty(prop);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (insertType === \"spread\") {\n\t\t\t\t\t\t\tparser.walkExpression(arg2);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t};\n\t\t\t\t\tconst processItem = item => {\n\t\t\t\t\t\tif (item.endsWith(\"()\")) {\n\t\t\t\t\t\t\tparser.hooks.call\n\t\t\t\t\t\t\t\t.for(item.slice(0, -2))\n\t\t\t\t\t\t\t\t.tap(\"WorkerPlugin\", handleNewWorker);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tconst match = /^(.+?)(\\(\\))?\\s+from\\s+(.+)$/.exec(item);\n\t\t\t\t\t\t\tif (match) {\n\t\t\t\t\t\t\t\tconst ids = match[1].split(\".\");\n\t\t\t\t\t\t\t\tconst call = match[2];\n\t\t\t\t\t\t\t\tconst source = match[3];\n\t\t\t\t\t\t\t\t(call ? parser.hooks.call : parser.hooks.new)\n\t\t\t\t\t\t\t\t\t.for(harmonySpecifierTag)\n\t\t\t\t\t\t\t\t\t.tap(\"WorkerPlugin\", expr => {\n\t\t\t\t\t\t\t\t\t\tconst settings = /** @type {HarmonySettings} */ (\n\t\t\t\t\t\t\t\t\t\t\tparser.currentTagData\n\t\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t\t\tif (\n\t\t\t\t\t\t\t\t\t\t\t!settings ||\n\t\t\t\t\t\t\t\t\t\t\tsettings.source !== source ||\n\t\t\t\t\t\t\t\t\t\t\t!equals(settings.ids, ids)\n\t\t\t\t\t\t\t\t\t\t) {\n\t\t\t\t\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\treturn handleNewWorker(expr);\n\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tparser.hooks.new.for(item).tap(\"WorkerPlugin\", handleNewWorker);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t};\n\t\t\t\t\tfor (const item of options) {\n\t\t\t\t\t\tif (item === \"...\") {\n\t\t\t\t\t\t\tDEFAULT_SYNTAX.forEach(processItem);\n\t\t\t\t\t\t} else processItem(item);\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t\tnormalModuleFactory.hooks.parser\n\t\t\t\t\t.for(\"javascript/auto\")\n\t\t\t\t\t.tap(\"WorkerPlugin\", parserPlugin);\n\t\t\t\tnormalModuleFactory.hooks.parser\n\t\t\t\t\t.for(\"javascript/esm\")\n\t\t\t\t\t.tap(\"WorkerPlugin\", parserPlugin);\n\t\t\t}\n\t\t);\n\t}\n}\nmodule.exports = WorkerPlugin;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}