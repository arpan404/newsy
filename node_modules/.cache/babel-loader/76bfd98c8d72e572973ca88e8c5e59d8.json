{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nconst RuntimeGlobals = require(\"../RuntimeGlobals\");\n\nconst StartupChunkDependenciesPlugin = require(\"../runtime/StartupChunkDependenciesPlugin\");\n/** @typedef {import(\"../Compiler\")} Compiler */\n\n\nclass CommonJsChunkLoadingPlugin {\n  constructor(options) {\n    options = options || {};\n    this._asyncChunkLoading = options.asyncChunkLoading;\n  }\n  /**\n   * Apply the plugin\n   * @param {Compiler} compiler the compiler instance\n   * @returns {void}\n   */\n\n\n  apply(compiler) {\n    const ChunkLoadingRuntimeModule = this._asyncChunkLoading ? require(\"./ReadFileChunkLoadingRuntimeModule\") : require(\"./RequireChunkLoadingRuntimeModule\");\n    const chunkLoadingValue = this._asyncChunkLoading ? \"async-node\" : \"require\";\n    new StartupChunkDependenciesPlugin({\n      chunkLoading: chunkLoadingValue,\n      asyncChunkLoading: this._asyncChunkLoading\n    }).apply(compiler);\n    compiler.hooks.thisCompilation.tap(\"CommonJsChunkLoadingPlugin\", compilation => {\n      const globalChunkLoading = compilation.outputOptions.chunkLoading;\n\n      const isEnabledForChunk = chunk => {\n        const options = chunk.getEntryOptions();\n        const chunkLoading = options && options.chunkLoading !== undefined ? options.chunkLoading : globalChunkLoading;\n        return chunkLoading === chunkLoadingValue;\n      };\n\n      const onceForChunkSet = new WeakSet();\n\n      const handler = (chunk, set) => {\n        if (onceForChunkSet.has(chunk)) return;\n        onceForChunkSet.add(chunk);\n        if (!isEnabledForChunk(chunk)) return;\n        set.add(RuntimeGlobals.moduleFactoriesAddOnly);\n        set.add(RuntimeGlobals.hasOwnProperty);\n        compilation.addRuntimeModule(chunk, new ChunkLoadingRuntimeModule(set));\n      };\n\n      compilation.hooks.runtimeRequirementInTree.for(RuntimeGlobals.ensureChunkHandlers).tap(\"CommonJsChunkLoadingPlugin\", handler);\n      compilation.hooks.runtimeRequirementInTree.for(RuntimeGlobals.hmrDownloadUpdateHandlers).tap(\"CommonJsChunkLoadingPlugin\", handler);\n      compilation.hooks.runtimeRequirementInTree.for(RuntimeGlobals.hmrDownloadManifest).tap(\"CommonJsChunkLoadingPlugin\", handler);\n      compilation.hooks.runtimeRequirementInTree.for(RuntimeGlobals.baseURI).tap(\"CommonJsChunkLoadingPlugin\", handler);\n      compilation.hooks.runtimeRequirementInTree.for(RuntimeGlobals.externalInstallChunk).tap(\"CommonJsChunkLoadingPlugin\", handler);\n      compilation.hooks.runtimeRequirementInTree.for(RuntimeGlobals.onChunksLoaded).tap(\"CommonJsChunkLoadingPlugin\", handler);\n      compilation.hooks.runtimeRequirementInTree.for(RuntimeGlobals.ensureChunkHandlers).tap(\"CommonJsChunkLoadingPlugin\", (chunk, set) => {\n        if (!isEnabledForChunk(chunk)) return;\n        set.add(RuntimeGlobals.getChunkScriptFilename);\n      });\n      compilation.hooks.runtimeRequirementInTree.for(RuntimeGlobals.hmrDownloadUpdateHandlers).tap(\"CommonJsChunkLoadingPlugin\", (chunk, set) => {\n        if (!isEnabledForChunk(chunk)) return;\n        set.add(RuntimeGlobals.getChunkUpdateScriptFilename);\n        set.add(RuntimeGlobals.moduleCache);\n        set.add(RuntimeGlobals.hmrModuleData);\n        set.add(RuntimeGlobals.moduleFactoriesAddOnly);\n      });\n      compilation.hooks.runtimeRequirementInTree.for(RuntimeGlobals.hmrDownloadManifest).tap(\"CommonJsChunkLoadingPlugin\", (chunk, set) => {\n        if (!isEnabledForChunk(chunk)) return;\n        set.add(RuntimeGlobals.getUpdateManifestFilename);\n      });\n    });\n  }\n\n}\n\nmodule.exports = CommonJsChunkLoadingPlugin;","map":{"version":3,"names":["RuntimeGlobals","require","StartupChunkDependenciesPlugin","CommonJsChunkLoadingPlugin","constructor","options","_asyncChunkLoading","asyncChunkLoading","apply","compiler","ChunkLoadingRuntimeModule","chunkLoadingValue","chunkLoading","hooks","thisCompilation","tap","compilation","globalChunkLoading","outputOptions","isEnabledForChunk","chunk","getEntryOptions","undefined","onceForChunkSet","WeakSet","handler","set","has","add","moduleFactoriesAddOnly","hasOwnProperty","addRuntimeModule","runtimeRequirementInTree","for","ensureChunkHandlers","hmrDownloadUpdateHandlers","hmrDownloadManifest","baseURI","externalInstallChunk","onChunksLoaded","getChunkScriptFilename","getChunkUpdateScriptFilename","moduleCache","hmrModuleData","getUpdateManifestFilename","module","exports"],"sources":["/Users/arpanbhandari/Documents/cod-ing/React/newsapp/node_modules/webpack/lib/node/CommonJsChunkLoadingPlugin.js"],"sourcesContent":["/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\n\"use strict\";\n\nconst RuntimeGlobals = require(\"../RuntimeGlobals\");\nconst StartupChunkDependenciesPlugin = require(\"../runtime/StartupChunkDependenciesPlugin\");\n\n/** @typedef {import(\"../Compiler\")} Compiler */\n\nclass CommonJsChunkLoadingPlugin {\n\tconstructor(options) {\n\t\toptions = options || {};\n\t\tthis._asyncChunkLoading = options.asyncChunkLoading;\n\t}\n\n\t/**\n\t * Apply the plugin\n\t * @param {Compiler} compiler the compiler instance\n\t * @returns {void}\n\t */\n\tapply(compiler) {\n\t\tconst ChunkLoadingRuntimeModule = this._asyncChunkLoading\n\t\t\t? require(\"./ReadFileChunkLoadingRuntimeModule\")\n\t\t\t: require(\"./RequireChunkLoadingRuntimeModule\");\n\t\tconst chunkLoadingValue = this._asyncChunkLoading\n\t\t\t? \"async-node\"\n\t\t\t: \"require\";\n\t\tnew StartupChunkDependenciesPlugin({\n\t\t\tchunkLoading: chunkLoadingValue,\n\t\t\tasyncChunkLoading: this._asyncChunkLoading\n\t\t}).apply(compiler);\n\t\tcompiler.hooks.thisCompilation.tap(\n\t\t\t\"CommonJsChunkLoadingPlugin\",\n\t\t\tcompilation => {\n\t\t\t\tconst globalChunkLoading = compilation.outputOptions.chunkLoading;\n\t\t\t\tconst isEnabledForChunk = chunk => {\n\t\t\t\t\tconst options = chunk.getEntryOptions();\n\t\t\t\t\tconst chunkLoading =\n\t\t\t\t\t\toptions && options.chunkLoading !== undefined\n\t\t\t\t\t\t\t? options.chunkLoading\n\t\t\t\t\t\t\t: globalChunkLoading;\n\t\t\t\t\treturn chunkLoading === chunkLoadingValue;\n\t\t\t\t};\n\t\t\t\tconst onceForChunkSet = new WeakSet();\n\t\t\t\tconst handler = (chunk, set) => {\n\t\t\t\t\tif (onceForChunkSet.has(chunk)) return;\n\t\t\t\t\tonceForChunkSet.add(chunk);\n\t\t\t\t\tif (!isEnabledForChunk(chunk)) return;\n\t\t\t\t\tset.add(RuntimeGlobals.moduleFactoriesAddOnly);\n\t\t\t\t\tset.add(RuntimeGlobals.hasOwnProperty);\n\t\t\t\t\tcompilation.addRuntimeModule(\n\t\t\t\t\t\tchunk,\n\t\t\t\t\t\tnew ChunkLoadingRuntimeModule(set)\n\t\t\t\t\t);\n\t\t\t\t};\n\n\t\t\t\tcompilation.hooks.runtimeRequirementInTree\n\t\t\t\t\t.for(RuntimeGlobals.ensureChunkHandlers)\n\t\t\t\t\t.tap(\"CommonJsChunkLoadingPlugin\", handler);\n\t\t\t\tcompilation.hooks.runtimeRequirementInTree\n\t\t\t\t\t.for(RuntimeGlobals.hmrDownloadUpdateHandlers)\n\t\t\t\t\t.tap(\"CommonJsChunkLoadingPlugin\", handler);\n\t\t\t\tcompilation.hooks.runtimeRequirementInTree\n\t\t\t\t\t.for(RuntimeGlobals.hmrDownloadManifest)\n\t\t\t\t\t.tap(\"CommonJsChunkLoadingPlugin\", handler);\n\t\t\t\tcompilation.hooks.runtimeRequirementInTree\n\t\t\t\t\t.for(RuntimeGlobals.baseURI)\n\t\t\t\t\t.tap(\"CommonJsChunkLoadingPlugin\", handler);\n\t\t\t\tcompilation.hooks.runtimeRequirementInTree\n\t\t\t\t\t.for(RuntimeGlobals.externalInstallChunk)\n\t\t\t\t\t.tap(\"CommonJsChunkLoadingPlugin\", handler);\n\t\t\t\tcompilation.hooks.runtimeRequirementInTree\n\t\t\t\t\t.for(RuntimeGlobals.onChunksLoaded)\n\t\t\t\t\t.tap(\"CommonJsChunkLoadingPlugin\", handler);\n\n\t\t\t\tcompilation.hooks.runtimeRequirementInTree\n\t\t\t\t\t.for(RuntimeGlobals.ensureChunkHandlers)\n\t\t\t\t\t.tap(\"CommonJsChunkLoadingPlugin\", (chunk, set) => {\n\t\t\t\t\t\tif (!isEnabledForChunk(chunk)) return;\n\t\t\t\t\t\tset.add(RuntimeGlobals.getChunkScriptFilename);\n\t\t\t\t\t});\n\t\t\t\tcompilation.hooks.runtimeRequirementInTree\n\t\t\t\t\t.for(RuntimeGlobals.hmrDownloadUpdateHandlers)\n\t\t\t\t\t.tap(\"CommonJsChunkLoadingPlugin\", (chunk, set) => {\n\t\t\t\t\t\tif (!isEnabledForChunk(chunk)) return;\n\t\t\t\t\t\tset.add(RuntimeGlobals.getChunkUpdateScriptFilename);\n\t\t\t\t\t\tset.add(RuntimeGlobals.moduleCache);\n\t\t\t\t\t\tset.add(RuntimeGlobals.hmrModuleData);\n\t\t\t\t\t\tset.add(RuntimeGlobals.moduleFactoriesAddOnly);\n\t\t\t\t\t});\n\t\t\t\tcompilation.hooks.runtimeRequirementInTree\n\t\t\t\t\t.for(RuntimeGlobals.hmrDownloadManifest)\n\t\t\t\t\t.tap(\"CommonJsChunkLoadingPlugin\", (chunk, set) => {\n\t\t\t\t\t\tif (!isEnabledForChunk(chunk)) return;\n\t\t\t\t\t\tset.add(RuntimeGlobals.getUpdateManifestFilename);\n\t\t\t\t\t});\n\t\t\t}\n\t\t);\n\t}\n}\n\nmodule.exports = CommonJsChunkLoadingPlugin;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}