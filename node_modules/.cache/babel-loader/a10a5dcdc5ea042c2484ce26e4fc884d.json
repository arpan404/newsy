{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n/** @template T @typedef {(string | Record<string, string | string[] | T>)[] | Record<string, string | string[] | T>} ContainerOptionsFormat */\n\n/**\n * @template T\n * @template N\n * @param {ContainerOptionsFormat<T>} options options passed by the user\n * @param {function(string | string[], string) : N} normalizeSimple normalize a simple item\n * @param {function(T, string) : N} normalizeOptions normalize a complex item\n * @param {function(string, N): void} fn processing function\n * @returns {void}\n */\n\nconst process = (options, normalizeSimple, normalizeOptions, fn) => {\n  const array = items => {\n    for (const item of items) {\n      if (typeof item === \"string\") {\n        fn(item, normalizeSimple(item, item));\n      } else if (item && typeof item === \"object\") {\n        object(item);\n      } else {\n        throw new Error(\"Unexpected options format\");\n      }\n    }\n  };\n\n  const object = obj => {\n    for (const [key, value] of Object.entries(obj)) {\n      if (typeof value === \"string\" || Array.isArray(value)) {\n        fn(key, normalizeSimple(value, key));\n      } else {\n        fn(key, normalizeOptions(value, key));\n      }\n    }\n  };\n\n  if (!options) {\n    return;\n  } else if (Array.isArray(options)) {\n    array(options);\n  } else if (typeof options === \"object\") {\n    object(options);\n  } else {\n    throw new Error(\"Unexpected options format\");\n  }\n};\n/**\n * @template T\n * @template R\n * @param {ContainerOptionsFormat<T>} options options passed by the user\n * @param {function(string | string[], string) : R} normalizeSimple normalize a simple item\n * @param {function(T, string) : R} normalizeOptions normalize a complex item\n * @returns {[string, R][]} parsed options\n */\n\n\nconst parseOptions = (options, normalizeSimple, normalizeOptions) => {\n  /** @type {[string, R][]} */\n  const items = [];\n  process(options, normalizeSimple, normalizeOptions, (key, value) => {\n    items.push([key, value]);\n  });\n  return items;\n};\n/**\n * @template T\n * @param {string} scope scope name\n * @param {ContainerOptionsFormat<T>} options options passed by the user\n * @returns {Record<string, string | string[] | T>} options to spread or pass\n */\n\n\nconst scope = (scope, options) => {\n  /** @type {Record<string, string | string[] | T>} */\n  const obj = {};\n  process(options, item =>\n  /** @type {string | string[] | T} */\n  item, item =>\n  /** @type {string | string[] | T} */\n  item, (key, value) => {\n    obj[key.startsWith(\"./\") ? `${scope}${key.slice(1)}` : `${scope}/${key}`] = value;\n  });\n  return obj;\n};\n\nexports.parseOptions = parseOptions;\nexports.scope = scope;","map":{"version":3,"names":["process","options","normalizeSimple","normalizeOptions","fn","array","items","item","object","Error","obj","key","value","Object","entries","Array","isArray","parseOptions","push","scope","startsWith","slice","exports"],"sources":["/Users/arpanbhandari/Documents/cod-ing/React/newsapp/node_modules/webpack/lib/container/options.js"],"sourcesContent":["/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\n\"use strict\";\n\n/** @template T @typedef {(string | Record<string, string | string[] | T>)[] | Record<string, string | string[] | T>} ContainerOptionsFormat */\n\n/**\n * @template T\n * @template N\n * @param {ContainerOptionsFormat<T>} options options passed by the user\n * @param {function(string | string[], string) : N} normalizeSimple normalize a simple item\n * @param {function(T, string) : N} normalizeOptions normalize a complex item\n * @param {function(string, N): void} fn processing function\n * @returns {void}\n */\nconst process = (options, normalizeSimple, normalizeOptions, fn) => {\n\tconst array = items => {\n\t\tfor (const item of items) {\n\t\t\tif (typeof item === \"string\") {\n\t\t\t\tfn(item, normalizeSimple(item, item));\n\t\t\t} else if (item && typeof item === \"object\") {\n\t\t\t\tobject(item);\n\t\t\t} else {\n\t\t\t\tthrow new Error(\"Unexpected options format\");\n\t\t\t}\n\t\t}\n\t};\n\tconst object = obj => {\n\t\tfor (const [key, value] of Object.entries(obj)) {\n\t\t\tif (typeof value === \"string\" || Array.isArray(value)) {\n\t\t\t\tfn(key, normalizeSimple(value, key));\n\t\t\t} else {\n\t\t\t\tfn(key, normalizeOptions(value, key));\n\t\t\t}\n\t\t}\n\t};\n\tif (!options) {\n\t\treturn;\n\t} else if (Array.isArray(options)) {\n\t\tarray(options);\n\t} else if (typeof options === \"object\") {\n\t\tobject(options);\n\t} else {\n\t\tthrow new Error(\"Unexpected options format\");\n\t}\n};\n\n/**\n * @template T\n * @template R\n * @param {ContainerOptionsFormat<T>} options options passed by the user\n * @param {function(string | string[], string) : R} normalizeSimple normalize a simple item\n * @param {function(T, string) : R} normalizeOptions normalize a complex item\n * @returns {[string, R][]} parsed options\n */\nconst parseOptions = (options, normalizeSimple, normalizeOptions) => {\n\t/** @type {[string, R][]} */\n\tconst items = [];\n\tprocess(options, normalizeSimple, normalizeOptions, (key, value) => {\n\t\titems.push([key, value]);\n\t});\n\treturn items;\n};\n\n/**\n * @template T\n * @param {string} scope scope name\n * @param {ContainerOptionsFormat<T>} options options passed by the user\n * @returns {Record<string, string | string[] | T>} options to spread or pass\n */\nconst scope = (scope, options) => {\n\t/** @type {Record<string, string | string[] | T>} */\n\tconst obj = {};\n\tprocess(\n\t\toptions,\n\t\titem => /** @type {string | string[] | T} */ (item),\n\t\titem => /** @type {string | string[] | T} */ (item),\n\t\t(key, value) => {\n\t\t\tobj[\n\t\t\t\tkey.startsWith(\"./\") ? `${scope}${key.slice(1)}` : `${scope}/${key}`\n\t\t\t] = value;\n\t\t}\n\t);\n\treturn obj;\n};\n\nexports.parseOptions = parseOptions;\nexports.scope = scope;\n"],"mappings":"AAAA;AACA;AACA;AACA;AAEA;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,MAAMA,OAAO,GAAG,CAACC,OAAD,EAAUC,eAAV,EAA2BC,gBAA3B,EAA6CC,EAA7C,KAAoD;EACnE,MAAMC,KAAK,GAAGC,KAAK,IAAI;IACtB,KAAK,MAAMC,IAAX,IAAmBD,KAAnB,EAA0B;MACzB,IAAI,OAAOC,IAAP,KAAgB,QAApB,EAA8B;QAC7BH,EAAE,CAACG,IAAD,EAAOL,eAAe,CAACK,IAAD,EAAOA,IAAP,CAAtB,CAAF;MACA,CAFD,MAEO,IAAIA,IAAI,IAAI,OAAOA,IAAP,KAAgB,QAA5B,EAAsC;QAC5CC,MAAM,CAACD,IAAD,CAAN;MACA,CAFM,MAEA;QACN,MAAM,IAAIE,KAAJ,CAAU,2BAAV,CAAN;MACA;IACD;EACD,CAVD;;EAWA,MAAMD,MAAM,GAAGE,GAAG,IAAI;IACrB,KAAK,MAAM,CAACC,GAAD,EAAMC,KAAN,CAAX,IAA2BC,MAAM,CAACC,OAAP,CAAeJ,GAAf,CAA3B,EAAgD;MAC/C,IAAI,OAAOE,KAAP,KAAiB,QAAjB,IAA6BG,KAAK,CAACC,OAAN,CAAcJ,KAAd,CAAjC,EAAuD;QACtDR,EAAE,CAACO,GAAD,EAAMT,eAAe,CAACU,KAAD,EAAQD,GAAR,CAArB,CAAF;MACA,CAFD,MAEO;QACNP,EAAE,CAACO,GAAD,EAAMR,gBAAgB,CAACS,KAAD,EAAQD,GAAR,CAAtB,CAAF;MACA;IACD;EACD,CARD;;EASA,IAAI,CAACV,OAAL,EAAc;IACb;EACA,CAFD,MAEO,IAAIc,KAAK,CAACC,OAAN,CAAcf,OAAd,CAAJ,EAA4B;IAClCI,KAAK,CAACJ,OAAD,CAAL;EACA,CAFM,MAEA,IAAI,OAAOA,OAAP,KAAmB,QAAvB,EAAiC;IACvCO,MAAM,CAACP,OAAD,CAAN;EACA,CAFM,MAEA;IACN,MAAM,IAAIQ,KAAJ,CAAU,2BAAV,CAAN;EACA;AACD,CA9BD;AAgCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,MAAMQ,YAAY,GAAG,CAAChB,OAAD,EAAUC,eAAV,EAA2BC,gBAA3B,KAAgD;EACpE;EACA,MAAMG,KAAK,GAAG,EAAd;EACAN,OAAO,CAACC,OAAD,EAAUC,eAAV,EAA2BC,gBAA3B,EAA6C,CAACQ,GAAD,EAAMC,KAAN,KAAgB;IACnEN,KAAK,CAACY,IAAN,CAAW,CAACP,GAAD,EAAMC,KAAN,CAAX;EACA,CAFM,CAAP;EAGA,OAAON,KAAP;AACA,CAPD;AASA;AACA;AACA;AACA;AACA;AACA;;;AACA,MAAMa,KAAK,GAAG,CAACA,KAAD,EAAQlB,OAAR,KAAoB;EACjC;EACA,MAAMS,GAAG,GAAG,EAAZ;EACAV,OAAO,CACNC,OADM,EAENM,IAAI;EAAI;EAAsCA,IAFxC,EAGNA,IAAI;EAAI;EAAsCA,IAHxC,EAIN,CAACI,GAAD,EAAMC,KAAN,KAAgB;IACfF,GAAG,CACFC,GAAG,CAACS,UAAJ,CAAe,IAAf,IAAwB,GAAED,KAAM,GAAER,GAAG,CAACU,KAAJ,CAAU,CAAV,CAAa,EAA/C,GAAoD,GAAEF,KAAM,IAAGR,GAAI,EADjE,CAAH,GAEIC,KAFJ;EAGA,CARK,CAAP;EAUA,OAAOF,GAAP;AACA,CAdD;;AAgBAY,OAAO,CAACL,YAAR,GAAuBA,YAAvB;AACAK,OAAO,CAACH,KAAR,GAAgBA,KAAhB"},"metadata":{},"sourceType":"script"}