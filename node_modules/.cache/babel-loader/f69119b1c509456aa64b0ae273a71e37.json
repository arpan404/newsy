{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nconst RuntimeGlobals = require(\"../RuntimeGlobals\");\n\nconst WasmChunkLoadingRuntimeModule = require(\"../wasm-sync/WasmChunkLoadingRuntimeModule\");\n/** @typedef {import(\"../Compiler\")} Compiler */\n// TODO webpack 6 remove\n\n\nclass FetchCompileWasmPlugin {\n  constructor(options) {\n    this.options = options || {};\n  }\n  /**\n   * Apply the plugin\n   * @param {Compiler} compiler the compiler instance\n   * @returns {void}\n   */\n\n\n  apply(compiler) {\n    compiler.hooks.thisCompilation.tap(\"FetchCompileWasmPlugin\", compilation => {\n      const globalWasmLoading = compilation.outputOptions.wasmLoading;\n\n      const isEnabledForChunk = chunk => {\n        const options = chunk.getEntryOptions();\n        const wasmLoading = options && options.wasmLoading !== undefined ? options.wasmLoading : globalWasmLoading;\n        return wasmLoading === \"fetch\";\n      };\n\n      const generateLoadBinaryCode = path => `fetch(${RuntimeGlobals.publicPath} + ${path})`;\n\n      compilation.hooks.runtimeRequirementInTree.for(RuntimeGlobals.ensureChunkHandlers).tap(\"FetchCompileWasmPlugin\", (chunk, set) => {\n        if (!isEnabledForChunk(chunk)) return;\n        const chunkGraph = compilation.chunkGraph;\n\n        if (!chunkGraph.hasModuleInGraph(chunk, m => m.type === \"webassembly/sync\")) {\n          return;\n        }\n\n        set.add(RuntimeGlobals.moduleCache);\n        set.add(RuntimeGlobals.publicPath);\n        compilation.addRuntimeModule(chunk, new WasmChunkLoadingRuntimeModule({\n          generateLoadBinaryCode,\n          supportsStreaming: true,\n          mangleImports: this.options.mangleImports,\n          runtimeRequirements: set\n        }));\n      });\n    });\n  }\n\n}\n\nmodule.exports = FetchCompileWasmPlugin;","map":{"version":3,"names":["RuntimeGlobals","require","WasmChunkLoadingRuntimeModule","FetchCompileWasmPlugin","constructor","options","apply","compiler","hooks","thisCompilation","tap","compilation","globalWasmLoading","outputOptions","wasmLoading","isEnabledForChunk","chunk","getEntryOptions","undefined","generateLoadBinaryCode","path","publicPath","runtimeRequirementInTree","for","ensureChunkHandlers","set","chunkGraph","hasModuleInGraph","m","type","add","moduleCache","addRuntimeModule","supportsStreaming","mangleImports","runtimeRequirements","module","exports"],"sources":["/Users/arpanbhandari/Documents/cod-ing/React/newsapp/node_modules/webpack/lib/web/FetchCompileWasmPlugin.js"],"sourcesContent":["/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\n\"use strict\";\n\nconst RuntimeGlobals = require(\"../RuntimeGlobals\");\nconst WasmChunkLoadingRuntimeModule = require(\"../wasm-sync/WasmChunkLoadingRuntimeModule\");\n\n/** @typedef {import(\"../Compiler\")} Compiler */\n\n// TODO webpack 6 remove\n\nclass FetchCompileWasmPlugin {\n\tconstructor(options) {\n\t\tthis.options = options || {};\n\t}\n\n\t/**\n\t * Apply the plugin\n\t * @param {Compiler} compiler the compiler instance\n\t * @returns {void}\n\t */\n\tapply(compiler) {\n\t\tcompiler.hooks.thisCompilation.tap(\n\t\t\t\"FetchCompileWasmPlugin\",\n\t\t\tcompilation => {\n\t\t\t\tconst globalWasmLoading = compilation.outputOptions.wasmLoading;\n\t\t\t\tconst isEnabledForChunk = chunk => {\n\t\t\t\t\tconst options = chunk.getEntryOptions();\n\t\t\t\t\tconst wasmLoading =\n\t\t\t\t\t\toptions && options.wasmLoading !== undefined\n\t\t\t\t\t\t\t? options.wasmLoading\n\t\t\t\t\t\t\t: globalWasmLoading;\n\t\t\t\t\treturn wasmLoading === \"fetch\";\n\t\t\t\t};\n\t\t\t\tconst generateLoadBinaryCode = path =>\n\t\t\t\t\t`fetch(${RuntimeGlobals.publicPath} + ${path})`;\n\n\t\t\t\tcompilation.hooks.runtimeRequirementInTree\n\t\t\t\t\t.for(RuntimeGlobals.ensureChunkHandlers)\n\t\t\t\t\t.tap(\"FetchCompileWasmPlugin\", (chunk, set) => {\n\t\t\t\t\t\tif (!isEnabledForChunk(chunk)) return;\n\t\t\t\t\t\tconst chunkGraph = compilation.chunkGraph;\n\t\t\t\t\t\tif (\n\t\t\t\t\t\t\t!chunkGraph.hasModuleInGraph(\n\t\t\t\t\t\t\t\tchunk,\n\t\t\t\t\t\t\t\tm => m.type === \"webassembly/sync\"\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t) {\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tset.add(RuntimeGlobals.moduleCache);\n\t\t\t\t\t\tset.add(RuntimeGlobals.publicPath);\n\t\t\t\t\t\tcompilation.addRuntimeModule(\n\t\t\t\t\t\t\tchunk,\n\t\t\t\t\t\t\tnew WasmChunkLoadingRuntimeModule({\n\t\t\t\t\t\t\t\tgenerateLoadBinaryCode,\n\t\t\t\t\t\t\t\tsupportsStreaming: true,\n\t\t\t\t\t\t\t\tmangleImports: this.options.mangleImports,\n\t\t\t\t\t\t\t\truntimeRequirements: set\n\t\t\t\t\t\t\t})\n\t\t\t\t\t\t);\n\t\t\t\t\t});\n\t\t\t}\n\t\t);\n\t}\n}\n\nmodule.exports = FetchCompileWasmPlugin;\n"],"mappings":"AAAA;AACA;AACA;AACA;AAEA;;AAEA,MAAMA,cAAc,GAAGC,OAAO,CAAC,mBAAD,CAA9B;;AACA,MAAMC,6BAA6B,GAAGD,OAAO,CAAC,4CAAD,CAA7C;AAEA;AAEA;;;AAEA,MAAME,sBAAN,CAA6B;EAC5BC,WAAW,CAACC,OAAD,EAAU;IACpB,KAAKA,OAAL,GAAeA,OAAO,IAAI,EAA1B;EACA;EAED;AACD;AACA;AACA;AACA;;;EACCC,KAAK,CAACC,QAAD,EAAW;IACfA,QAAQ,CAACC,KAAT,CAAeC,eAAf,CAA+BC,GAA/B,CACC,wBADD,EAECC,WAAW,IAAI;MACd,MAAMC,iBAAiB,GAAGD,WAAW,CAACE,aAAZ,CAA0BC,WAApD;;MACA,MAAMC,iBAAiB,GAAGC,KAAK,IAAI;QAClC,MAAMX,OAAO,GAAGW,KAAK,CAACC,eAAN,EAAhB;QACA,MAAMH,WAAW,GAChBT,OAAO,IAAIA,OAAO,CAACS,WAAR,KAAwBI,SAAnC,GACGb,OAAO,CAACS,WADX,GAEGF,iBAHJ;QAIA,OAAOE,WAAW,KAAK,OAAvB;MACA,CAPD;;MAQA,MAAMK,sBAAsB,GAAGC,IAAI,IACjC,SAAQpB,cAAc,CAACqB,UAAW,MAAKD,IAAK,GAD9C;;MAGAT,WAAW,CAACH,KAAZ,CAAkBc,wBAAlB,CACEC,GADF,CACMvB,cAAc,CAACwB,mBADrB,EAEEd,GAFF,CAEM,wBAFN,EAEgC,CAACM,KAAD,EAAQS,GAAR,KAAgB;QAC9C,IAAI,CAACV,iBAAiB,CAACC,KAAD,CAAtB,EAA+B;QAC/B,MAAMU,UAAU,GAAGf,WAAW,CAACe,UAA/B;;QACA,IACC,CAACA,UAAU,CAACC,gBAAX,CACAX,KADA,EAEAY,CAAC,IAAIA,CAAC,CAACC,IAAF,KAAW,kBAFhB,CADF,EAKE;UACD;QACA;;QACDJ,GAAG,CAACK,GAAJ,CAAQ9B,cAAc,CAAC+B,WAAvB;QACAN,GAAG,CAACK,GAAJ,CAAQ9B,cAAc,CAACqB,UAAvB;QACAV,WAAW,CAACqB,gBAAZ,CACChB,KADD,EAEC,IAAId,6BAAJ,CAAkC;UACjCiB,sBADiC;UAEjCc,iBAAiB,EAAE,IAFc;UAGjCC,aAAa,EAAE,KAAK7B,OAAL,CAAa6B,aAHK;UAIjCC,mBAAmB,EAAEV;QAJY,CAAlC,CAFD;MASA,CAxBF;IAyBA,CAxCF;EA0CA;;AArD2B;;AAwD7BW,MAAM,CAACC,OAAP,GAAiBlC,sBAAjB"},"metadata":{},"sourceType":"script"}