{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n*/\n\"use strict\";\n\nconst memoize = require(\"../util/memoize\");\n\nconst SerializerMiddleware = require(\"./SerializerMiddleware\");\n/** @typedef {import(\"./types\").BufferSerializableType} BufferSerializableType */\n\n/** @typedef {import(\"./types\").PrimitiveSerializableType} PrimitiveSerializableType */\n\n/*\nFormat:\n\nFile -> Section*\n\nSection -> NullsSection |\n\t\t\t\t\t BooleansSection |\n\t\t\t\t\t F64NumbersSection |\n\t\t\t\t\t I32NumbersSection |\n\t\t\t\t\t I8NumbersSection |\n\t\t\t\t\t ShortStringSection |\n\t\t\t\t\t StringSection |\n\t\t\t\t\t BufferSection |\n\t\t\t\t\t NopSection\n\n\n\nNullsSection ->\n\tNullHeaderByte | Null2HeaderByte | Null3HeaderByte |\n\tNulls8HeaderByte 0xnn (n:count - 4) |\n\tNulls32HeaderByte n:ui32 (n:count - 260) |\nBooleansSection -> TrueHeaderByte | FalseHeaderByte | BooleansSectionHeaderByte BooleansCountAndBitsByte\nF64NumbersSection -> F64NumbersSectionHeaderByte f64*\nI32NumbersSection -> I32NumbersSectionHeaderByte i32*\nI8NumbersSection -> I8NumbersSectionHeaderByte i8*\nShortStringSection -> ShortStringSectionHeaderByte ascii-byte*\nStringSection -> StringSectionHeaderByte i32:length utf8-byte*\nBufferSection -> BufferSectionHeaderByte i32:length byte*\nNopSection --> NopSectionHeaderByte\n\nShortStringSectionHeaderByte -> 0b1nnn_nnnn (n:length)\n\nF64NumbersSectionHeaderByte -> 0b001n_nnnn (n:count - 1)\nI32NumbersSectionHeaderByte -> 0b010n_nnnn (n:count - 1)\nI8NumbersSectionHeaderByte -> 0b011n_nnnn (n:count - 1)\n\nNullsSectionHeaderByte -> 0b0001_nnnn (n:count - 1)\nBooleansCountAndBitsByte ->\n\t0b0000_1xxx (count = 3) |\n\t0b0001_xxxx (count = 4) |\n\t0b001x_xxxx (count = 5) |\n\t0b01xx_xxxx (count = 6) |\n\t0b1nnn_nnnn (n:count - 7, 7 <= count <= 133)\n\t0xff n:ui32 (n:count, 134 <= count < 2^32)\n\nStringSectionHeaderByte -> 0b0000_1110\nBufferSectionHeaderByte -> 0b0000_1111\nNopSectionHeaderByte -> 0b0000_1011\nFalseHeaderByte -> 0b0000_1100\nTrueHeaderByte -> 0b0000_1101\n\nRawNumber -> n (n <= 10)\n\n*/\n\n\nconst LAZY_HEADER = 0x0b;\nconst TRUE_HEADER = 0x0c;\nconst FALSE_HEADER = 0x0d;\nconst BOOLEANS_HEADER = 0x0e;\nconst NULL_HEADER = 0x10;\nconst NULL2_HEADER = 0x11;\nconst NULL3_HEADER = 0x12;\nconst NULLS8_HEADER = 0x13;\nconst NULLS32_HEADER = 0x14;\nconst NULL_AND_I8_HEADER = 0x15;\nconst NULL_AND_I32_HEADER = 0x16;\nconst NULL_AND_TRUE_HEADER = 0x17;\nconst NULL_AND_FALSE_HEADER = 0x18;\nconst STRING_HEADER = 0x1e;\nconst BUFFER_HEADER = 0x1f;\nconst I8_HEADER = 0x60;\nconst I32_HEADER = 0x40;\nconst F64_HEADER = 0x20;\nconst SHORT_STRING_HEADER = 0x80;\n/** Uplift high-order bits */\n\nconst NUMBERS_HEADER_MASK = 0xe0;\nconst NUMBERS_COUNT_MASK = 0x1f; // 0b0001_1111\n\nconst SHORT_STRING_LENGTH_MASK = 0x7f; // 0b0111_1111\n\nconst HEADER_SIZE = 1;\nconst I8_SIZE = 1;\nconst I32_SIZE = 4;\nconst F64_SIZE = 8;\nconst MEASURE_START_OPERATION = Symbol(\"MEASURE_START_OPERATION\");\nconst MEASURE_END_OPERATION = Symbol(\"MEASURE_END_OPERATION\");\n/** @typedef {typeof MEASURE_START_OPERATION} MEASURE_START_OPERATION_TYPE */\n\n/** @typedef {typeof MEASURE_END_OPERATION} MEASURE_END_OPERATION_TYPE */\n\nconst identifyNumber = n => {\n  if (n === (n | 0)) {\n    if (n <= 127 && n >= -128) return 0;\n    if (n <= 2147483647 && n >= -2147483648) return 1;\n  }\n\n  return 2;\n};\n/**\n * @typedef {PrimitiveSerializableType[]} DeserializedType\n * @typedef {BufferSerializableType[]} SerializedType\n * @extends {SerializerMiddleware<DeserializedType, SerializedType>}\n */\n\n\nclass BinaryMiddleware extends SerializerMiddleware {\n  /**\n   * @param {DeserializedType} data data\n   * @param {Object} context context object\n   * @returns {SerializedType|Promise<SerializedType>} serialized data\n   */\n  serialize(data, context) {\n    return this._serialize(data, context);\n  }\n\n  _serializeLazy(fn, context) {\n    return SerializerMiddleware.serializeLazy(fn, data => this._serialize(data, context));\n  }\n  /**\n   * @param {DeserializedType} data data\n   * @param {Object} context context object\n   * @param {{ leftOverBuffer: Buffer | null, allocationSize: number, increaseCounter: number }} allocationScope allocation scope\n   * @returns {SerializedType} serialized data\n   */\n\n\n  _serialize(data, context) {\n    let allocationScope = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {\n      allocationSize: 1024,\n      increaseCounter: 0,\n      leftOverBuffer: null\n    };\n\n    /** @type {Buffer} */\n    let leftOverBuffer = null;\n    /** @type {BufferSerializableType[]} */\n\n    let buffers = [];\n    /** @type {Buffer} */\n\n    let currentBuffer = allocationScope ? allocationScope.leftOverBuffer : null;\n    allocationScope.leftOverBuffer = null;\n    let currentPosition = 0;\n\n    if (currentBuffer === null) {\n      currentBuffer = Buffer.allocUnsafe(allocationScope.allocationSize);\n    }\n\n    const allocate = bytesNeeded => {\n      if (currentBuffer !== null) {\n        if (currentBuffer.length - currentPosition >= bytesNeeded) return;\n        flush();\n      }\n\n      if (leftOverBuffer && leftOverBuffer.length >= bytesNeeded) {\n        currentBuffer = leftOverBuffer;\n        leftOverBuffer = null;\n      } else {\n        currentBuffer = Buffer.allocUnsafe(Math.max(bytesNeeded, allocationScope.allocationSize));\n\n        if (!(allocationScope.increaseCounter = (allocationScope.increaseCounter + 1) % 4) && allocationScope.allocationSize < 16777216) {\n          allocationScope.allocationSize = allocationScope.allocationSize << 1;\n        }\n      }\n    };\n\n    const flush = () => {\n      if (currentBuffer !== null) {\n        if (currentPosition > 0) {\n          buffers.push(Buffer.from(currentBuffer.buffer, currentBuffer.byteOffset, currentPosition));\n        }\n\n        if (!leftOverBuffer || leftOverBuffer.length < currentBuffer.length - currentPosition) {\n          leftOverBuffer = Buffer.from(currentBuffer.buffer, currentBuffer.byteOffset + currentPosition, currentBuffer.byteLength - currentPosition);\n        }\n\n        currentBuffer = null;\n        currentPosition = 0;\n      }\n    };\n\n    const writeU8 = byte => {\n      currentBuffer.writeUInt8(byte, currentPosition++);\n    };\n\n    const writeU32 = ui32 => {\n      currentBuffer.writeUInt32LE(ui32, currentPosition);\n      currentPosition += 4;\n    };\n\n    const measureStack = [];\n\n    const measureStart = () => {\n      measureStack.push(buffers.length, currentPosition);\n    };\n\n    const measureEnd = () => {\n      const oldPos = measureStack.pop();\n      const buffersIndex = measureStack.pop();\n      let size = currentPosition - oldPos;\n\n      for (let i = buffersIndex; i < buffers.length; i++) {\n        size += buffers[i].length;\n      }\n\n      return size;\n    };\n\n    for (let i = 0; i < data.length; i++) {\n      const thing = data[i];\n\n      switch (typeof thing) {\n        case \"function\":\n          {\n            if (!SerializerMiddleware.isLazy(thing)) throw new Error(\"Unexpected function \" + thing);\n            /** @type {SerializedType | (() => SerializedType)} */\n\n            let serializedData = SerializerMiddleware.getLazySerializedValue(thing);\n\n            if (serializedData === undefined) {\n              if (SerializerMiddleware.isLazy(thing, this)) {\n                flush();\n                allocationScope.leftOverBuffer = leftOverBuffer;\n                const result =\n                /** @type {(Exclude<PrimitiveSerializableType, Promise<PrimitiveSerializableType>>)[]} */\n                thing();\n\n                const data = this._serialize(result, context, allocationScope);\n\n                leftOverBuffer = allocationScope.leftOverBuffer;\n                allocationScope.leftOverBuffer = null;\n                SerializerMiddleware.setLazySerializedValue(thing, data);\n                serializedData = data;\n              } else {\n                serializedData = this._serializeLazy(thing, context);\n                flush();\n                buffers.push(serializedData);\n                break;\n              }\n            } else {\n              if (typeof serializedData === \"function\") {\n                flush();\n                buffers.push(serializedData);\n                break;\n              }\n            }\n\n            const lengths = [];\n\n            for (const item of serializedData) {\n              let last;\n\n              if (typeof item === \"function\") {\n                lengths.push(0);\n              } else if (item.length === 0) {// ignore\n              } else if (lengths.length > 0 && (last = lengths[lengths.length - 1]) !== 0) {\n                const remaining = 0xffffffff - last;\n\n                if (remaining >= item.length) {\n                  lengths[lengths.length - 1] += item.length;\n                } else {\n                  lengths.push(item.length - remaining);\n                  lengths[lengths.length - 2] = 0xffffffff;\n                }\n              } else {\n                lengths.push(item.length);\n              }\n            }\n\n            allocate(5 + lengths.length * 4);\n            writeU8(LAZY_HEADER);\n            writeU32(lengths.length);\n\n            for (const l of lengths) {\n              writeU32(l);\n            }\n\n            flush();\n\n            for (const item of serializedData) {\n              buffers.push(item);\n            }\n\n            break;\n          }\n\n        case \"string\":\n          {\n            const len = Buffer.byteLength(thing);\n\n            if (len >= 128 || len !== thing.length) {\n              allocate(len + HEADER_SIZE + I32_SIZE);\n              writeU8(STRING_HEADER);\n              writeU32(len);\n              currentBuffer.write(thing, currentPosition);\n              currentPosition += len;\n            } else if (len >= 70) {\n              allocate(len + HEADER_SIZE);\n              writeU8(SHORT_STRING_HEADER | len);\n              currentBuffer.write(thing, currentPosition, \"latin1\");\n              currentPosition += len;\n            } else {\n              allocate(len + HEADER_SIZE);\n              writeU8(SHORT_STRING_HEADER | len);\n\n              for (let i = 0; i < len; i++) {\n                currentBuffer[currentPosition++] = thing.charCodeAt(i);\n              }\n            }\n\n            break;\n          }\n\n        case \"number\":\n          {\n            const type = identifyNumber(thing);\n\n            if (type === 0 && thing >= 0 && thing <= 10) {\n              // shortcut for very small numbers\n              allocate(I8_SIZE);\n              writeU8(thing);\n              break;\n            }\n            /**\n             * amount of numbers to write\n             * @type {number}\n             */\n\n\n            let n = 1;\n\n            for (; n < 32 && i + n < data.length; n++) {\n              const item = data[i + n];\n              if (typeof item !== \"number\") break;\n              if (identifyNumber(item) !== type) break;\n            }\n\n            switch (type) {\n              case 0:\n                allocate(HEADER_SIZE + I8_SIZE * n);\n                writeU8(I8_HEADER | n - 1);\n\n                while (n > 0) {\n                  currentBuffer.writeInt8(\n                  /** @type {number} */\n                  data[i], currentPosition);\n                  currentPosition += I8_SIZE;\n                  n--;\n                  i++;\n                }\n\n                break;\n\n              case 1:\n                allocate(HEADER_SIZE + I32_SIZE * n);\n                writeU8(I32_HEADER | n - 1);\n\n                while (n > 0) {\n                  currentBuffer.writeInt32LE(\n                  /** @type {number} */\n                  data[i], currentPosition);\n                  currentPosition += I32_SIZE;\n                  n--;\n                  i++;\n                }\n\n                break;\n\n              case 2:\n                allocate(HEADER_SIZE + F64_SIZE * n);\n                writeU8(F64_HEADER | n - 1);\n\n                while (n > 0) {\n                  currentBuffer.writeDoubleLE(\n                  /** @type {number} */\n                  data[i], currentPosition);\n                  currentPosition += F64_SIZE;\n                  n--;\n                  i++;\n                }\n\n                break;\n            }\n\n            i--;\n            break;\n          }\n\n        case \"boolean\":\n          {\n            let lastByte = thing === true ? 1 : 0;\n            const bytes = [];\n            let count = 1;\n            let n;\n\n            for (n = 1; n < 0xffffffff && i + n < data.length; n++) {\n              const item = data[i + n];\n              if (typeof item !== \"boolean\") break;\n              const pos = count & 0x7;\n\n              if (pos === 0) {\n                bytes.push(lastByte);\n                lastByte = item === true ? 1 : 0;\n              } else if (item === true) {\n                lastByte |= 1 << pos;\n              }\n\n              count++;\n            }\n\n            i += count - 1;\n\n            if (count === 1) {\n              allocate(HEADER_SIZE);\n              writeU8(lastByte === 1 ? TRUE_HEADER : FALSE_HEADER);\n            } else if (count === 2) {\n              allocate(HEADER_SIZE * 2);\n              writeU8(lastByte & 1 ? TRUE_HEADER : FALSE_HEADER);\n              writeU8(lastByte & 2 ? TRUE_HEADER : FALSE_HEADER);\n            } else if (count <= 6) {\n              allocate(HEADER_SIZE + I8_SIZE);\n              writeU8(BOOLEANS_HEADER);\n              writeU8(1 << count | lastByte);\n            } else if (count <= 133) {\n              allocate(HEADER_SIZE + I8_SIZE + I8_SIZE * bytes.length + I8_SIZE);\n              writeU8(BOOLEANS_HEADER);\n              writeU8(0x80 | count - 7);\n\n              for (const byte of bytes) writeU8(byte);\n\n              writeU8(lastByte);\n            } else {\n              allocate(HEADER_SIZE + I8_SIZE + I32_SIZE + I8_SIZE * bytes.length + I8_SIZE);\n              writeU8(BOOLEANS_HEADER);\n              writeU8(0xff);\n              writeU32(count);\n\n              for (const byte of bytes) writeU8(byte);\n\n              writeU8(lastByte);\n            }\n\n            break;\n          }\n\n        case \"object\":\n          {\n            if (thing === null) {\n              let n;\n\n              for (n = 1; n < 0x100000104 && i + n < data.length; n++) {\n                const item = data[i + n];\n                if (item !== null) break;\n              }\n\n              i += n - 1;\n\n              if (n === 1) {\n                if (i + 1 < data.length) {\n                  const next = data[i + 1];\n\n                  if (next === true) {\n                    allocate(HEADER_SIZE);\n                    writeU8(NULL_AND_TRUE_HEADER);\n                    i++;\n                  } else if (next === false) {\n                    allocate(HEADER_SIZE);\n                    writeU8(NULL_AND_FALSE_HEADER);\n                    i++;\n                  } else if (typeof next === \"number\") {\n                    const type = identifyNumber(next);\n\n                    if (type === 0) {\n                      allocate(HEADER_SIZE + I8_SIZE);\n                      writeU8(NULL_AND_I8_HEADER);\n                      currentBuffer.writeInt8(next, currentPosition);\n                      currentPosition += I8_SIZE;\n                      i++;\n                    } else if (type === 1) {\n                      allocate(HEADER_SIZE + I32_SIZE);\n                      writeU8(NULL_AND_I32_HEADER);\n                      currentBuffer.writeInt32LE(next, currentPosition);\n                      currentPosition += I32_SIZE;\n                      i++;\n                    } else {\n                      allocate(HEADER_SIZE);\n                      writeU8(NULL_HEADER);\n                    }\n                  } else {\n                    allocate(HEADER_SIZE);\n                    writeU8(NULL_HEADER);\n                  }\n                } else {\n                  allocate(HEADER_SIZE);\n                  writeU8(NULL_HEADER);\n                }\n              } else if (n === 2) {\n                allocate(HEADER_SIZE);\n                writeU8(NULL2_HEADER);\n              } else if (n === 3) {\n                allocate(HEADER_SIZE);\n                writeU8(NULL3_HEADER);\n              } else if (n < 260) {\n                allocate(HEADER_SIZE + I8_SIZE);\n                writeU8(NULLS8_HEADER);\n                writeU8(n - 4);\n              } else {\n                allocate(HEADER_SIZE + I32_SIZE);\n                writeU8(NULLS32_HEADER);\n                writeU32(n - 260);\n              }\n            } else if (Buffer.isBuffer(thing)) {\n              if (thing.length < 8192) {\n                allocate(HEADER_SIZE + I32_SIZE + thing.length);\n                writeU8(BUFFER_HEADER);\n                writeU32(thing.length);\n                thing.copy(currentBuffer, currentPosition);\n                currentPosition += thing.length;\n              } else {\n                allocate(HEADER_SIZE + I32_SIZE);\n                writeU8(BUFFER_HEADER);\n                writeU32(thing.length);\n                flush();\n                buffers.push(thing);\n              }\n            }\n\n            break;\n          }\n\n        case \"symbol\":\n          {\n            if (thing === MEASURE_START_OPERATION) {\n              measureStart();\n            } else if (thing === MEASURE_END_OPERATION) {\n              const size = measureEnd();\n              allocate(HEADER_SIZE + I32_SIZE);\n              writeU8(I32_HEADER);\n              currentBuffer.writeInt32LE(size, currentPosition);\n              currentPosition += I32_SIZE;\n            }\n\n            break;\n          }\n      }\n    }\n\n    flush();\n    allocationScope.leftOverBuffer = leftOverBuffer; // avoid leaking memory\n\n    currentBuffer = null;\n    leftOverBuffer = null;\n    allocationScope = undefined;\n    const _buffers = buffers;\n    buffers = undefined;\n    return _buffers;\n  }\n  /**\n   * @param {SerializedType} data data\n   * @param {Object} context context object\n   * @returns {DeserializedType|Promise<DeserializedType>} deserialized data\n   */\n\n\n  deserialize(data, context) {\n    return this._deserialize(data, context);\n  }\n\n  _createLazyDeserialized(content, context) {\n    return SerializerMiddleware.createLazy(memoize(() => this._deserialize(content, context)), this, undefined, content);\n  }\n\n  _deserializeLazy(fn, context) {\n    return SerializerMiddleware.deserializeLazy(fn, data => this._deserialize(data, context));\n  }\n  /**\n   * @param {SerializedType} data data\n   * @param {Object} context context object\n   * @returns {DeserializedType} deserialized data\n   */\n\n\n  _deserialize(data, context) {\n    let currentDataItem = 0;\n    let currentBuffer = data[0];\n    let currentIsBuffer = Buffer.isBuffer(currentBuffer);\n    let currentPosition = 0;\n\n    const retainedBuffer = context.retainedBuffer || (x => x);\n\n    const checkOverflow = () => {\n      if (currentPosition >= currentBuffer.length) {\n        currentPosition = 0;\n        currentDataItem++;\n        currentBuffer = currentDataItem < data.length ? data[currentDataItem] : null;\n        currentIsBuffer = Buffer.isBuffer(currentBuffer);\n      }\n    };\n\n    const isInCurrentBuffer = n => {\n      return currentIsBuffer && n + currentPosition <= currentBuffer.length;\n    };\n\n    const ensureBuffer = () => {\n      if (!currentIsBuffer) {\n        throw new Error(currentBuffer === null ? \"Unexpected end of stream\" : \"Unexpected lazy element in stream\");\n      }\n    };\n    /**\n     * Reads n bytes\n     * @param {number} n amount of bytes to read\n     * @returns {Buffer} buffer with bytes\n     */\n\n\n    const read = n => {\n      ensureBuffer();\n      const rem = currentBuffer.length - currentPosition;\n\n      if (rem < n) {\n        const buffers = [read(rem)];\n        n -= rem;\n        ensureBuffer();\n\n        while (currentBuffer.length < n) {\n          const b =\n          /** @type {Buffer} */\n          currentBuffer;\n          buffers.push(b);\n          n -= b.length;\n          currentDataItem++;\n          currentBuffer = currentDataItem < data.length ? data[currentDataItem] : null;\n          currentIsBuffer = Buffer.isBuffer(currentBuffer);\n          ensureBuffer();\n        }\n\n        buffers.push(read(n));\n        return Buffer.concat(buffers);\n      }\n\n      const b =\n      /** @type {Buffer} */\n      currentBuffer;\n      const res = Buffer.from(b.buffer, b.byteOffset + currentPosition, n);\n      currentPosition += n;\n      checkOverflow();\n      return res;\n    };\n    /**\n     * Reads up to n bytes\n     * @param {number} n amount of bytes to read\n     * @returns {Buffer} buffer with bytes\n     */\n\n\n    const readUpTo = n => {\n      ensureBuffer();\n      const rem = currentBuffer.length - currentPosition;\n\n      if (rem < n) {\n        n = rem;\n      }\n\n      const b =\n      /** @type {Buffer} */\n      currentBuffer;\n      const res = Buffer.from(b.buffer, b.byteOffset + currentPosition, n);\n      currentPosition += n;\n      checkOverflow();\n      return res;\n    };\n\n    const readU8 = () => {\n      ensureBuffer();\n      /**\n       * There is no need to check remaining buffer size here\n       * since {@link checkOverflow} guarantees at least one byte remaining\n       */\n\n      const byte =\n      /** @type {Buffer} */\n      currentBuffer.readUInt8(currentPosition);\n      currentPosition += I8_SIZE;\n      checkOverflow();\n      return byte;\n    };\n\n    const readU32 = () => {\n      return read(I32_SIZE).readUInt32LE(0);\n    };\n\n    const readBits = (data, n) => {\n      let mask = 1;\n\n      while (n !== 0) {\n        result.push((data & mask) !== 0);\n        mask = mask << 1;\n        n--;\n      }\n    };\n\n    const dispatchTable = Array.from({\n      length: 256\n    }).map((_, header) => {\n      switch (header) {\n        case LAZY_HEADER:\n          return () => {\n            const count = readU32();\n            const lengths = Array.from({\n              length: count\n            }).map(() => readU32());\n            const content = [];\n\n            for (let l of lengths) {\n              if (l === 0) {\n                if (typeof currentBuffer !== \"function\") {\n                  throw new Error(\"Unexpected non-lazy element in stream\");\n                }\n\n                content.push(currentBuffer);\n                currentDataItem++;\n                currentBuffer = currentDataItem < data.length ? data[currentDataItem] : null;\n                currentIsBuffer = Buffer.isBuffer(currentBuffer);\n              } else {\n                do {\n                  const buf = readUpTo(l);\n                  l -= buf.length;\n                  content.push(retainedBuffer(buf));\n                } while (l > 0);\n              }\n            }\n\n            result.push(this._createLazyDeserialized(content, context));\n          };\n\n        case BUFFER_HEADER:\n          return () => {\n            const len = readU32();\n            result.push(retainedBuffer(read(len)));\n          };\n\n        case TRUE_HEADER:\n          return () => result.push(true);\n\n        case FALSE_HEADER:\n          return () => result.push(false);\n\n        case NULL3_HEADER:\n          return () => result.push(null, null, null);\n\n        case NULL2_HEADER:\n          return () => result.push(null, null);\n\n        case NULL_HEADER:\n          return () => result.push(null);\n\n        case NULL_AND_TRUE_HEADER:\n          return () => result.push(null, true);\n\n        case NULL_AND_FALSE_HEADER:\n          return () => result.push(null, false);\n\n        case NULL_AND_I8_HEADER:\n          return () => {\n            if (currentIsBuffer) {\n              result.push(null,\n              /** @type {Buffer} */\n              currentBuffer.readInt8(currentPosition));\n              currentPosition += I8_SIZE;\n              checkOverflow();\n            } else {\n              result.push(null, read(I8_SIZE).readInt8(0));\n            }\n          };\n\n        case NULL_AND_I32_HEADER:\n          return () => {\n            result.push(null);\n\n            if (isInCurrentBuffer(I32_SIZE)) {\n              result.push(\n              /** @type {Buffer} */\n              currentBuffer.readInt32LE(currentPosition));\n              currentPosition += I32_SIZE;\n              checkOverflow();\n            } else {\n              result.push(read(I32_SIZE).readInt32LE(0));\n            }\n          };\n\n        case NULLS8_HEADER:\n          return () => {\n            const len = readU8() + 4;\n\n            for (let i = 0; i < len; i++) {\n              result.push(null);\n            }\n          };\n\n        case NULLS32_HEADER:\n          return () => {\n            const len = readU32() + 260;\n\n            for (let i = 0; i < len; i++) {\n              result.push(null);\n            }\n          };\n\n        case BOOLEANS_HEADER:\n          return () => {\n            const innerHeader = readU8();\n\n            if ((innerHeader & 0xf0) === 0) {\n              readBits(innerHeader, 3);\n            } else if ((innerHeader & 0xe0) === 0) {\n              readBits(innerHeader, 4);\n            } else if ((innerHeader & 0xc0) === 0) {\n              readBits(innerHeader, 5);\n            } else if ((innerHeader & 0x80) === 0) {\n              readBits(innerHeader, 6);\n            } else if (innerHeader !== 0xff) {\n              let count = (innerHeader & 0x7f) + 7;\n\n              while (count > 8) {\n                readBits(readU8(), 8);\n                count -= 8;\n              }\n\n              readBits(readU8(), count);\n            } else {\n              let count = readU32();\n\n              while (count > 8) {\n                readBits(readU8(), 8);\n                count -= 8;\n              }\n\n              readBits(readU8(), count);\n            }\n          };\n\n        case STRING_HEADER:\n          return () => {\n            const len = readU32();\n\n            if (isInCurrentBuffer(len) && currentPosition + len < 0x7fffffff) {\n              result.push(currentBuffer.toString(undefined, currentPosition, currentPosition + len));\n              currentPosition += len;\n              checkOverflow();\n            } else {\n              result.push(read(len).toString());\n            }\n          };\n\n        case SHORT_STRING_HEADER:\n          return () => result.push(\"\");\n\n        case SHORT_STRING_HEADER | 1:\n          return () => {\n            if (currentIsBuffer && currentPosition < 0x7ffffffe) {\n              result.push(currentBuffer.toString(\"latin1\", currentPosition, currentPosition + 1));\n              currentPosition++;\n              checkOverflow();\n            } else {\n              result.push(read(1).toString(\"latin1\"));\n            }\n          };\n\n        case I8_HEADER:\n          return () => {\n            if (currentIsBuffer) {\n              result.push(\n              /** @type {Buffer} */\n              currentBuffer.readInt8(currentPosition));\n              currentPosition++;\n              checkOverflow();\n            } else {\n              result.push(read(1).readInt8(0));\n            }\n          };\n\n        default:\n          if (header <= 10) {\n            return () => result.push(header);\n          } else if ((header & SHORT_STRING_HEADER) === SHORT_STRING_HEADER) {\n            const len = header & SHORT_STRING_LENGTH_MASK;\n            return () => {\n              if (isInCurrentBuffer(len) && currentPosition + len < 0x7fffffff) {\n                result.push(currentBuffer.toString(\"latin1\", currentPosition, currentPosition + len));\n                currentPosition += len;\n                checkOverflow();\n              } else {\n                result.push(read(len).toString(\"latin1\"));\n              }\n            };\n          } else if ((header & NUMBERS_HEADER_MASK) === F64_HEADER) {\n            const len = (header & NUMBERS_COUNT_MASK) + 1;\n            return () => {\n              const need = F64_SIZE * len;\n\n              if (isInCurrentBuffer(need)) {\n                for (let i = 0; i < len; i++) {\n                  result.push(\n                  /** @type {Buffer} */\n                  currentBuffer.readDoubleLE(currentPosition));\n                  currentPosition += F64_SIZE;\n                }\n\n                checkOverflow();\n              } else {\n                const buf = read(need);\n\n                for (let i = 0; i < len; i++) {\n                  result.push(buf.readDoubleLE(i * F64_SIZE));\n                }\n              }\n            };\n          } else if ((header & NUMBERS_HEADER_MASK) === I32_HEADER) {\n            const len = (header & NUMBERS_COUNT_MASK) + 1;\n            return () => {\n              const need = I32_SIZE * len;\n\n              if (isInCurrentBuffer(need)) {\n                for (let i = 0; i < len; i++) {\n                  result.push(\n                  /** @type {Buffer} */\n                  currentBuffer.readInt32LE(currentPosition));\n                  currentPosition += I32_SIZE;\n                }\n\n                checkOverflow();\n              } else {\n                const buf = read(need);\n\n                for (let i = 0; i < len; i++) {\n                  result.push(buf.readInt32LE(i * I32_SIZE));\n                }\n              }\n            };\n          } else if ((header & NUMBERS_HEADER_MASK) === I8_HEADER) {\n            const len = (header & NUMBERS_COUNT_MASK) + 1;\n            return () => {\n              const need = I8_SIZE * len;\n\n              if (isInCurrentBuffer(need)) {\n                for (let i = 0; i < len; i++) {\n                  result.push(\n                  /** @type {Buffer} */\n                  currentBuffer.readInt8(currentPosition));\n                  currentPosition += I8_SIZE;\n                }\n\n                checkOverflow();\n              } else {\n                const buf = read(need);\n\n                for (let i = 0; i < len; i++) {\n                  result.push(buf.readInt8(i * I8_SIZE));\n                }\n              }\n            };\n          } else {\n            return () => {\n              throw new Error(`Unexpected header byte 0x${header.toString(16)}`);\n            };\n          }\n\n      }\n    });\n    /** @type {DeserializedType} */\n\n    let result = [];\n\n    while (currentBuffer !== null) {\n      if (typeof currentBuffer === \"function\") {\n        result.push(this._deserializeLazy(currentBuffer, context));\n        currentDataItem++;\n        currentBuffer = currentDataItem < data.length ? data[currentDataItem] : null;\n        currentIsBuffer = Buffer.isBuffer(currentBuffer);\n      } else {\n        const header = readU8();\n        dispatchTable[header]();\n      }\n    } // avoid leaking memory in context\n\n\n    let _result = result;\n    result = undefined;\n    return _result;\n  }\n\n}\n\nmodule.exports = BinaryMiddleware;\nmodule.exports.MEASURE_START_OPERATION = MEASURE_START_OPERATION;\nmodule.exports.MEASURE_END_OPERATION = MEASURE_END_OPERATION;","map":{"version":3,"names":["memoize","require","SerializerMiddleware","LAZY_HEADER","TRUE_HEADER","FALSE_HEADER","BOOLEANS_HEADER","NULL_HEADER","NULL2_HEADER","NULL3_HEADER","NULLS8_HEADER","NULLS32_HEADER","NULL_AND_I8_HEADER","NULL_AND_I32_HEADER","NULL_AND_TRUE_HEADER","NULL_AND_FALSE_HEADER","STRING_HEADER","BUFFER_HEADER","I8_HEADER","I32_HEADER","F64_HEADER","SHORT_STRING_HEADER","NUMBERS_HEADER_MASK","NUMBERS_COUNT_MASK","SHORT_STRING_LENGTH_MASK","HEADER_SIZE","I8_SIZE","I32_SIZE","F64_SIZE","MEASURE_START_OPERATION","Symbol","MEASURE_END_OPERATION","identifyNumber","n","BinaryMiddleware","serialize","data","context","_serialize","_serializeLazy","fn","serializeLazy","allocationScope","allocationSize","increaseCounter","leftOverBuffer","buffers","currentBuffer","currentPosition","Buffer","allocUnsafe","allocate","bytesNeeded","length","flush","Math","max","push","from","buffer","byteOffset","byteLength","writeU8","byte","writeUInt8","writeU32","ui32","writeUInt32LE","measureStack","measureStart","measureEnd","oldPos","pop","buffersIndex","size","i","thing","isLazy","Error","serializedData","getLazySerializedValue","undefined","result","setLazySerializedValue","lengths","item","last","remaining","l","len","write","charCodeAt","type","writeInt8","writeInt32LE","writeDoubleLE","lastByte","bytes","count","pos","next","isBuffer","copy","_buffers","deserialize","_deserialize","_createLazyDeserialized","content","createLazy","_deserializeLazy","deserializeLazy","currentDataItem","currentIsBuffer","retainedBuffer","x","checkOverflow","isInCurrentBuffer","ensureBuffer","read","rem","b","concat","res","readUpTo","readU8","readUInt8","readU32","readUInt32LE","readBits","mask","dispatchTable","Array","map","_","header","buf","readInt8","readInt32LE","innerHeader","toString","need","readDoubleLE","_result","module","exports"],"sources":["/Users/arpanbhandari/Documents/cod-ing/React/newsapp/node_modules/webpack/lib/serialization/BinaryMiddleware.js"],"sourcesContent":["/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n*/\n\n\"use strict\";\n\nconst memoize = require(\"../util/memoize\");\nconst SerializerMiddleware = require(\"./SerializerMiddleware\");\n\n/** @typedef {import(\"./types\").BufferSerializableType} BufferSerializableType */\n/** @typedef {import(\"./types\").PrimitiveSerializableType} PrimitiveSerializableType */\n\n/*\nFormat:\n\nFile -> Section*\n\nSection -> NullsSection |\n\t\t\t\t\t BooleansSection |\n\t\t\t\t\t F64NumbersSection |\n\t\t\t\t\t I32NumbersSection |\n\t\t\t\t\t I8NumbersSection |\n\t\t\t\t\t ShortStringSection |\n\t\t\t\t\t StringSection |\n\t\t\t\t\t BufferSection |\n\t\t\t\t\t NopSection\n\n\n\nNullsSection ->\n\tNullHeaderByte | Null2HeaderByte | Null3HeaderByte |\n\tNulls8HeaderByte 0xnn (n:count - 4) |\n\tNulls32HeaderByte n:ui32 (n:count - 260) |\nBooleansSection -> TrueHeaderByte | FalseHeaderByte | BooleansSectionHeaderByte BooleansCountAndBitsByte\nF64NumbersSection -> F64NumbersSectionHeaderByte f64*\nI32NumbersSection -> I32NumbersSectionHeaderByte i32*\nI8NumbersSection -> I8NumbersSectionHeaderByte i8*\nShortStringSection -> ShortStringSectionHeaderByte ascii-byte*\nStringSection -> StringSectionHeaderByte i32:length utf8-byte*\nBufferSection -> BufferSectionHeaderByte i32:length byte*\nNopSection --> NopSectionHeaderByte\n\nShortStringSectionHeaderByte -> 0b1nnn_nnnn (n:length)\n\nF64NumbersSectionHeaderByte -> 0b001n_nnnn (n:count - 1)\nI32NumbersSectionHeaderByte -> 0b010n_nnnn (n:count - 1)\nI8NumbersSectionHeaderByte -> 0b011n_nnnn (n:count - 1)\n\nNullsSectionHeaderByte -> 0b0001_nnnn (n:count - 1)\nBooleansCountAndBitsByte ->\n\t0b0000_1xxx (count = 3) |\n\t0b0001_xxxx (count = 4) |\n\t0b001x_xxxx (count = 5) |\n\t0b01xx_xxxx (count = 6) |\n\t0b1nnn_nnnn (n:count - 7, 7 <= count <= 133)\n\t0xff n:ui32 (n:count, 134 <= count < 2^32)\n\nStringSectionHeaderByte -> 0b0000_1110\nBufferSectionHeaderByte -> 0b0000_1111\nNopSectionHeaderByte -> 0b0000_1011\nFalseHeaderByte -> 0b0000_1100\nTrueHeaderByte -> 0b0000_1101\n\nRawNumber -> n (n <= 10)\n\n*/\n\nconst LAZY_HEADER = 0x0b;\nconst TRUE_HEADER = 0x0c;\nconst FALSE_HEADER = 0x0d;\nconst BOOLEANS_HEADER = 0x0e;\nconst NULL_HEADER = 0x10;\nconst NULL2_HEADER = 0x11;\nconst NULL3_HEADER = 0x12;\nconst NULLS8_HEADER = 0x13;\nconst NULLS32_HEADER = 0x14;\nconst NULL_AND_I8_HEADER = 0x15;\nconst NULL_AND_I32_HEADER = 0x16;\nconst NULL_AND_TRUE_HEADER = 0x17;\nconst NULL_AND_FALSE_HEADER = 0x18;\nconst STRING_HEADER = 0x1e;\nconst BUFFER_HEADER = 0x1f;\nconst I8_HEADER = 0x60;\nconst I32_HEADER = 0x40;\nconst F64_HEADER = 0x20;\nconst SHORT_STRING_HEADER = 0x80;\n\n/** Uplift high-order bits */\nconst NUMBERS_HEADER_MASK = 0xe0;\nconst NUMBERS_COUNT_MASK = 0x1f; // 0b0001_1111\nconst SHORT_STRING_LENGTH_MASK = 0x7f; // 0b0111_1111\n\nconst HEADER_SIZE = 1;\nconst I8_SIZE = 1;\nconst I32_SIZE = 4;\nconst F64_SIZE = 8;\n\nconst MEASURE_START_OPERATION = Symbol(\"MEASURE_START_OPERATION\");\nconst MEASURE_END_OPERATION = Symbol(\"MEASURE_END_OPERATION\");\n\n/** @typedef {typeof MEASURE_START_OPERATION} MEASURE_START_OPERATION_TYPE */\n/** @typedef {typeof MEASURE_END_OPERATION} MEASURE_END_OPERATION_TYPE */\n\nconst identifyNumber = n => {\n\tif (n === (n | 0)) {\n\t\tif (n <= 127 && n >= -128) return 0;\n\t\tif (n <= 2147483647 && n >= -2147483648) return 1;\n\t}\n\treturn 2;\n};\n\n/**\n * @typedef {PrimitiveSerializableType[]} DeserializedType\n * @typedef {BufferSerializableType[]} SerializedType\n * @extends {SerializerMiddleware<DeserializedType, SerializedType>}\n */\nclass BinaryMiddleware extends SerializerMiddleware {\n\t/**\n\t * @param {DeserializedType} data data\n\t * @param {Object} context context object\n\t * @returns {SerializedType|Promise<SerializedType>} serialized data\n\t */\n\tserialize(data, context) {\n\t\treturn this._serialize(data, context);\n\t}\n\n\t_serializeLazy(fn, context) {\n\t\treturn SerializerMiddleware.serializeLazy(fn, data =>\n\t\t\tthis._serialize(data, context)\n\t\t);\n\t}\n\n\t/**\n\t * @param {DeserializedType} data data\n\t * @param {Object} context context object\n\t * @param {{ leftOverBuffer: Buffer | null, allocationSize: number, increaseCounter: number }} allocationScope allocation scope\n\t * @returns {SerializedType} serialized data\n\t */\n\t_serialize(\n\t\tdata,\n\t\tcontext,\n\t\tallocationScope = {\n\t\t\tallocationSize: 1024,\n\t\t\tincreaseCounter: 0,\n\t\t\tleftOverBuffer: null\n\t\t}\n\t) {\n\t\t/** @type {Buffer} */\n\t\tlet leftOverBuffer = null;\n\t\t/** @type {BufferSerializableType[]} */\n\t\tlet buffers = [];\n\t\t/** @type {Buffer} */\n\t\tlet currentBuffer = allocationScope ? allocationScope.leftOverBuffer : null;\n\t\tallocationScope.leftOverBuffer = null;\n\t\tlet currentPosition = 0;\n\t\tif (currentBuffer === null) {\n\t\t\tcurrentBuffer = Buffer.allocUnsafe(allocationScope.allocationSize);\n\t\t}\n\t\tconst allocate = bytesNeeded => {\n\t\t\tif (currentBuffer !== null) {\n\t\t\t\tif (currentBuffer.length - currentPosition >= bytesNeeded) return;\n\t\t\t\tflush();\n\t\t\t}\n\t\t\tif (leftOverBuffer && leftOverBuffer.length >= bytesNeeded) {\n\t\t\t\tcurrentBuffer = leftOverBuffer;\n\t\t\t\tleftOverBuffer = null;\n\t\t\t} else {\n\t\t\t\tcurrentBuffer = Buffer.allocUnsafe(\n\t\t\t\t\tMath.max(bytesNeeded, allocationScope.allocationSize)\n\t\t\t\t);\n\t\t\t\tif (\n\t\t\t\t\t!(allocationScope.increaseCounter =\n\t\t\t\t\t\t(allocationScope.increaseCounter + 1) % 4) &&\n\t\t\t\t\tallocationScope.allocationSize < 16777216\n\t\t\t\t) {\n\t\t\t\t\tallocationScope.allocationSize = allocationScope.allocationSize << 1;\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\t\tconst flush = () => {\n\t\t\tif (currentBuffer !== null) {\n\t\t\t\tif (currentPosition > 0) {\n\t\t\t\t\tbuffers.push(\n\t\t\t\t\t\tBuffer.from(\n\t\t\t\t\t\t\tcurrentBuffer.buffer,\n\t\t\t\t\t\t\tcurrentBuffer.byteOffset,\n\t\t\t\t\t\t\tcurrentPosition\n\t\t\t\t\t\t)\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t\tif (\n\t\t\t\t\t!leftOverBuffer ||\n\t\t\t\t\tleftOverBuffer.length < currentBuffer.length - currentPosition\n\t\t\t\t) {\n\t\t\t\t\tleftOverBuffer = Buffer.from(\n\t\t\t\t\t\tcurrentBuffer.buffer,\n\t\t\t\t\t\tcurrentBuffer.byteOffset + currentPosition,\n\t\t\t\t\t\tcurrentBuffer.byteLength - currentPosition\n\t\t\t\t\t);\n\t\t\t\t}\n\n\t\t\t\tcurrentBuffer = null;\n\t\t\t\tcurrentPosition = 0;\n\t\t\t}\n\t\t};\n\t\tconst writeU8 = byte => {\n\t\t\tcurrentBuffer.writeUInt8(byte, currentPosition++);\n\t\t};\n\t\tconst writeU32 = ui32 => {\n\t\t\tcurrentBuffer.writeUInt32LE(ui32, currentPosition);\n\t\t\tcurrentPosition += 4;\n\t\t};\n\t\tconst measureStack = [];\n\t\tconst measureStart = () => {\n\t\t\tmeasureStack.push(buffers.length, currentPosition);\n\t\t};\n\t\tconst measureEnd = () => {\n\t\t\tconst oldPos = measureStack.pop();\n\t\t\tconst buffersIndex = measureStack.pop();\n\t\t\tlet size = currentPosition - oldPos;\n\t\t\tfor (let i = buffersIndex; i < buffers.length; i++) {\n\t\t\t\tsize += buffers[i].length;\n\t\t\t}\n\t\t\treturn size;\n\t\t};\n\t\tfor (let i = 0; i < data.length; i++) {\n\t\t\tconst thing = data[i];\n\t\t\tswitch (typeof thing) {\n\t\t\t\tcase \"function\": {\n\t\t\t\t\tif (!SerializerMiddleware.isLazy(thing))\n\t\t\t\t\t\tthrow new Error(\"Unexpected function \" + thing);\n\t\t\t\t\t/** @type {SerializedType | (() => SerializedType)} */\n\t\t\t\t\tlet serializedData =\n\t\t\t\t\t\tSerializerMiddleware.getLazySerializedValue(thing);\n\t\t\t\t\tif (serializedData === undefined) {\n\t\t\t\t\t\tif (SerializerMiddleware.isLazy(thing, this)) {\n\t\t\t\t\t\t\tflush();\n\t\t\t\t\t\t\tallocationScope.leftOverBuffer = leftOverBuffer;\n\t\t\t\t\t\t\tconst result =\n\t\t\t\t\t\t\t\t/** @type {(Exclude<PrimitiveSerializableType, Promise<PrimitiveSerializableType>>)[]} */ (\n\t\t\t\t\t\t\t\t\tthing()\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\tconst data = this._serialize(result, context, allocationScope);\n\t\t\t\t\t\t\tleftOverBuffer = allocationScope.leftOverBuffer;\n\t\t\t\t\t\t\tallocationScope.leftOverBuffer = null;\n\t\t\t\t\t\t\tSerializerMiddleware.setLazySerializedValue(thing, data);\n\t\t\t\t\t\t\tserializedData = data;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tserializedData = this._serializeLazy(thing, context);\n\t\t\t\t\t\t\tflush();\n\t\t\t\t\t\t\tbuffers.push(serializedData);\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tif (typeof serializedData === \"function\") {\n\t\t\t\t\t\t\tflush();\n\t\t\t\t\t\t\tbuffers.push(serializedData);\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tconst lengths = [];\n\t\t\t\t\tfor (const item of serializedData) {\n\t\t\t\t\t\tlet last;\n\t\t\t\t\t\tif (typeof item === \"function\") {\n\t\t\t\t\t\t\tlengths.push(0);\n\t\t\t\t\t\t} else if (item.length === 0) {\n\t\t\t\t\t\t\t// ignore\n\t\t\t\t\t\t} else if (\n\t\t\t\t\t\t\tlengths.length > 0 &&\n\t\t\t\t\t\t\t(last = lengths[lengths.length - 1]) !== 0\n\t\t\t\t\t\t) {\n\t\t\t\t\t\t\tconst remaining = 0xffffffff - last;\n\t\t\t\t\t\t\tif (remaining >= item.length) {\n\t\t\t\t\t\t\t\tlengths[lengths.length - 1] += item.length;\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tlengths.push(item.length - remaining);\n\t\t\t\t\t\t\t\tlengths[lengths.length - 2] = 0xffffffff;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tlengths.push(item.length);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tallocate(5 + lengths.length * 4);\n\t\t\t\t\twriteU8(LAZY_HEADER);\n\t\t\t\t\twriteU32(lengths.length);\n\t\t\t\t\tfor (const l of lengths) {\n\t\t\t\t\t\twriteU32(l);\n\t\t\t\t\t}\n\t\t\t\t\tflush();\n\t\t\t\t\tfor (const item of serializedData) {\n\t\t\t\t\t\tbuffers.push(item);\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tcase \"string\": {\n\t\t\t\t\tconst len = Buffer.byteLength(thing);\n\t\t\t\t\tif (len >= 128 || len !== thing.length) {\n\t\t\t\t\t\tallocate(len + HEADER_SIZE + I32_SIZE);\n\t\t\t\t\t\twriteU8(STRING_HEADER);\n\t\t\t\t\t\twriteU32(len);\n\t\t\t\t\t\tcurrentBuffer.write(thing, currentPosition);\n\t\t\t\t\t\tcurrentPosition += len;\n\t\t\t\t\t} else if (len >= 70) {\n\t\t\t\t\t\tallocate(len + HEADER_SIZE);\n\t\t\t\t\t\twriteU8(SHORT_STRING_HEADER | len);\n\n\t\t\t\t\t\tcurrentBuffer.write(thing, currentPosition, \"latin1\");\n\t\t\t\t\t\tcurrentPosition += len;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tallocate(len + HEADER_SIZE);\n\t\t\t\t\t\twriteU8(SHORT_STRING_HEADER | len);\n\n\t\t\t\t\t\tfor (let i = 0; i < len; i++) {\n\t\t\t\t\t\t\tcurrentBuffer[currentPosition++] = thing.charCodeAt(i);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tcase \"number\": {\n\t\t\t\t\tconst type = identifyNumber(thing);\n\t\t\t\t\tif (type === 0 && thing >= 0 && thing <= 10) {\n\t\t\t\t\t\t// shortcut for very small numbers\n\t\t\t\t\t\tallocate(I8_SIZE);\n\t\t\t\t\t\twriteU8(thing);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\t/**\n\t\t\t\t\t * amount of numbers to write\n\t\t\t\t\t * @type {number}\n\t\t\t\t\t */\n\t\t\t\t\tlet n = 1;\n\t\t\t\t\tfor (; n < 32 && i + n < data.length; n++) {\n\t\t\t\t\t\tconst item = data[i + n];\n\t\t\t\t\t\tif (typeof item !== \"number\") break;\n\t\t\t\t\t\tif (identifyNumber(item) !== type) break;\n\t\t\t\t\t}\n\t\t\t\t\tswitch (type) {\n\t\t\t\t\t\tcase 0:\n\t\t\t\t\t\t\tallocate(HEADER_SIZE + I8_SIZE * n);\n\t\t\t\t\t\t\twriteU8(I8_HEADER | (n - 1));\n\t\t\t\t\t\t\twhile (n > 0) {\n\t\t\t\t\t\t\t\tcurrentBuffer.writeInt8(\n\t\t\t\t\t\t\t\t\t/** @type {number} */ (data[i]),\n\t\t\t\t\t\t\t\t\tcurrentPosition\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\tcurrentPosition += I8_SIZE;\n\t\t\t\t\t\t\t\tn--;\n\t\t\t\t\t\t\t\ti++;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 1:\n\t\t\t\t\t\t\tallocate(HEADER_SIZE + I32_SIZE * n);\n\t\t\t\t\t\t\twriteU8(I32_HEADER | (n - 1));\n\t\t\t\t\t\t\twhile (n > 0) {\n\t\t\t\t\t\t\t\tcurrentBuffer.writeInt32LE(\n\t\t\t\t\t\t\t\t\t/** @type {number} */ (data[i]),\n\t\t\t\t\t\t\t\t\tcurrentPosition\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\tcurrentPosition += I32_SIZE;\n\t\t\t\t\t\t\t\tn--;\n\t\t\t\t\t\t\t\ti++;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 2:\n\t\t\t\t\t\t\tallocate(HEADER_SIZE + F64_SIZE * n);\n\t\t\t\t\t\t\twriteU8(F64_HEADER | (n - 1));\n\t\t\t\t\t\t\twhile (n > 0) {\n\t\t\t\t\t\t\t\tcurrentBuffer.writeDoubleLE(\n\t\t\t\t\t\t\t\t\t/** @type {number} */ (data[i]),\n\t\t\t\t\t\t\t\t\tcurrentPosition\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\tcurrentPosition += F64_SIZE;\n\t\t\t\t\t\t\t\tn--;\n\t\t\t\t\t\t\t\ti++;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\n\t\t\t\t\ti--;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tcase \"boolean\": {\n\t\t\t\t\tlet lastByte = thing === true ? 1 : 0;\n\t\t\t\t\tconst bytes = [];\n\t\t\t\t\tlet count = 1;\n\t\t\t\t\tlet n;\n\t\t\t\t\tfor (n = 1; n < 0xffffffff && i + n < data.length; n++) {\n\t\t\t\t\t\tconst item = data[i + n];\n\t\t\t\t\t\tif (typeof item !== \"boolean\") break;\n\t\t\t\t\t\tconst pos = count & 0x7;\n\t\t\t\t\t\tif (pos === 0) {\n\t\t\t\t\t\t\tbytes.push(lastByte);\n\t\t\t\t\t\t\tlastByte = item === true ? 1 : 0;\n\t\t\t\t\t\t} else if (item === true) {\n\t\t\t\t\t\t\tlastByte |= 1 << pos;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tcount++;\n\t\t\t\t\t}\n\t\t\t\t\ti += count - 1;\n\t\t\t\t\tif (count === 1) {\n\t\t\t\t\t\tallocate(HEADER_SIZE);\n\t\t\t\t\t\twriteU8(lastByte === 1 ? TRUE_HEADER : FALSE_HEADER);\n\t\t\t\t\t} else if (count === 2) {\n\t\t\t\t\t\tallocate(HEADER_SIZE * 2);\n\t\t\t\t\t\twriteU8(lastByte & 1 ? TRUE_HEADER : FALSE_HEADER);\n\t\t\t\t\t\twriteU8(lastByte & 2 ? TRUE_HEADER : FALSE_HEADER);\n\t\t\t\t\t} else if (count <= 6) {\n\t\t\t\t\t\tallocate(HEADER_SIZE + I8_SIZE);\n\t\t\t\t\t\twriteU8(BOOLEANS_HEADER);\n\t\t\t\t\t\twriteU8((1 << count) | lastByte);\n\t\t\t\t\t} else if (count <= 133) {\n\t\t\t\t\t\tallocate(HEADER_SIZE + I8_SIZE + I8_SIZE * bytes.length + I8_SIZE);\n\t\t\t\t\t\twriteU8(BOOLEANS_HEADER);\n\t\t\t\t\t\twriteU8(0x80 | (count - 7));\n\t\t\t\t\t\tfor (const byte of bytes) writeU8(byte);\n\t\t\t\t\t\twriteU8(lastByte);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tallocate(\n\t\t\t\t\t\t\tHEADER_SIZE +\n\t\t\t\t\t\t\t\tI8_SIZE +\n\t\t\t\t\t\t\t\tI32_SIZE +\n\t\t\t\t\t\t\t\tI8_SIZE * bytes.length +\n\t\t\t\t\t\t\t\tI8_SIZE\n\t\t\t\t\t\t);\n\t\t\t\t\t\twriteU8(BOOLEANS_HEADER);\n\t\t\t\t\t\twriteU8(0xff);\n\t\t\t\t\t\twriteU32(count);\n\t\t\t\t\t\tfor (const byte of bytes) writeU8(byte);\n\t\t\t\t\t\twriteU8(lastByte);\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tcase \"object\": {\n\t\t\t\t\tif (thing === null) {\n\t\t\t\t\t\tlet n;\n\t\t\t\t\t\tfor (n = 1; n < 0x100000104 && i + n < data.length; n++) {\n\t\t\t\t\t\t\tconst item = data[i + n];\n\t\t\t\t\t\t\tif (item !== null) break;\n\t\t\t\t\t\t}\n\t\t\t\t\t\ti += n - 1;\n\t\t\t\t\t\tif (n === 1) {\n\t\t\t\t\t\t\tif (i + 1 < data.length) {\n\t\t\t\t\t\t\t\tconst next = data[i + 1];\n\t\t\t\t\t\t\t\tif (next === true) {\n\t\t\t\t\t\t\t\t\tallocate(HEADER_SIZE);\n\t\t\t\t\t\t\t\t\twriteU8(NULL_AND_TRUE_HEADER);\n\t\t\t\t\t\t\t\t\ti++;\n\t\t\t\t\t\t\t\t} else if (next === false) {\n\t\t\t\t\t\t\t\t\tallocate(HEADER_SIZE);\n\t\t\t\t\t\t\t\t\twriteU8(NULL_AND_FALSE_HEADER);\n\t\t\t\t\t\t\t\t\ti++;\n\t\t\t\t\t\t\t\t} else if (typeof next === \"number\") {\n\t\t\t\t\t\t\t\t\tconst type = identifyNumber(next);\n\t\t\t\t\t\t\t\t\tif (type === 0) {\n\t\t\t\t\t\t\t\t\t\tallocate(HEADER_SIZE + I8_SIZE);\n\t\t\t\t\t\t\t\t\t\twriteU8(NULL_AND_I8_HEADER);\n\t\t\t\t\t\t\t\t\t\tcurrentBuffer.writeInt8(next, currentPosition);\n\t\t\t\t\t\t\t\t\t\tcurrentPosition += I8_SIZE;\n\t\t\t\t\t\t\t\t\t\ti++;\n\t\t\t\t\t\t\t\t\t} else if (type === 1) {\n\t\t\t\t\t\t\t\t\t\tallocate(HEADER_SIZE + I32_SIZE);\n\t\t\t\t\t\t\t\t\t\twriteU8(NULL_AND_I32_HEADER);\n\t\t\t\t\t\t\t\t\t\tcurrentBuffer.writeInt32LE(next, currentPosition);\n\t\t\t\t\t\t\t\t\t\tcurrentPosition += I32_SIZE;\n\t\t\t\t\t\t\t\t\t\ti++;\n\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\tallocate(HEADER_SIZE);\n\t\t\t\t\t\t\t\t\t\twriteU8(NULL_HEADER);\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\tallocate(HEADER_SIZE);\n\t\t\t\t\t\t\t\t\twriteU8(NULL_HEADER);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tallocate(HEADER_SIZE);\n\t\t\t\t\t\t\t\twriteU8(NULL_HEADER);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else if (n === 2) {\n\t\t\t\t\t\t\tallocate(HEADER_SIZE);\n\t\t\t\t\t\t\twriteU8(NULL2_HEADER);\n\t\t\t\t\t\t} else if (n === 3) {\n\t\t\t\t\t\t\tallocate(HEADER_SIZE);\n\t\t\t\t\t\t\twriteU8(NULL3_HEADER);\n\t\t\t\t\t\t} else if (n < 260) {\n\t\t\t\t\t\t\tallocate(HEADER_SIZE + I8_SIZE);\n\t\t\t\t\t\t\twriteU8(NULLS8_HEADER);\n\t\t\t\t\t\t\twriteU8(n - 4);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tallocate(HEADER_SIZE + I32_SIZE);\n\t\t\t\t\t\t\twriteU8(NULLS32_HEADER);\n\t\t\t\t\t\t\twriteU32(n - 260);\n\t\t\t\t\t\t}\n\t\t\t\t\t} else if (Buffer.isBuffer(thing)) {\n\t\t\t\t\t\tif (thing.length < 8192) {\n\t\t\t\t\t\t\tallocate(HEADER_SIZE + I32_SIZE + thing.length);\n\t\t\t\t\t\t\twriteU8(BUFFER_HEADER);\n\t\t\t\t\t\t\twriteU32(thing.length);\n\t\t\t\t\t\t\tthing.copy(currentBuffer, currentPosition);\n\t\t\t\t\t\t\tcurrentPosition += thing.length;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tallocate(HEADER_SIZE + I32_SIZE);\n\t\t\t\t\t\t\twriteU8(BUFFER_HEADER);\n\t\t\t\t\t\t\twriteU32(thing.length);\n\t\t\t\t\t\t\tflush();\n\t\t\t\t\t\t\tbuffers.push(thing);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tcase \"symbol\": {\n\t\t\t\t\tif (thing === MEASURE_START_OPERATION) {\n\t\t\t\t\t\tmeasureStart();\n\t\t\t\t\t} else if (thing === MEASURE_END_OPERATION) {\n\t\t\t\t\t\tconst size = measureEnd();\n\t\t\t\t\t\tallocate(HEADER_SIZE + I32_SIZE);\n\t\t\t\t\t\twriteU8(I32_HEADER);\n\t\t\t\t\t\tcurrentBuffer.writeInt32LE(size, currentPosition);\n\t\t\t\t\t\tcurrentPosition += I32_SIZE;\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tflush();\n\n\t\tallocationScope.leftOverBuffer = leftOverBuffer;\n\n\t\t// avoid leaking memory\n\t\tcurrentBuffer = null;\n\t\tleftOverBuffer = null;\n\t\tallocationScope = undefined;\n\t\tconst _buffers = buffers;\n\t\tbuffers = undefined;\n\t\treturn _buffers;\n\t}\n\n\t/**\n\t * @param {SerializedType} data data\n\t * @param {Object} context context object\n\t * @returns {DeserializedType|Promise<DeserializedType>} deserialized data\n\t */\n\tdeserialize(data, context) {\n\t\treturn this._deserialize(data, context);\n\t}\n\n\t_createLazyDeserialized(content, context) {\n\t\treturn SerializerMiddleware.createLazy(\n\t\t\tmemoize(() => this._deserialize(content, context)),\n\t\t\tthis,\n\t\t\tundefined,\n\t\t\tcontent\n\t\t);\n\t}\n\n\t_deserializeLazy(fn, context) {\n\t\treturn SerializerMiddleware.deserializeLazy(fn, data =>\n\t\t\tthis._deserialize(data, context)\n\t\t);\n\t}\n\n\t/**\n\t * @param {SerializedType} data data\n\t * @param {Object} context context object\n\t * @returns {DeserializedType} deserialized data\n\t */\n\t_deserialize(data, context) {\n\t\tlet currentDataItem = 0;\n\t\tlet currentBuffer = data[0];\n\t\tlet currentIsBuffer = Buffer.isBuffer(currentBuffer);\n\t\tlet currentPosition = 0;\n\n\t\tconst retainedBuffer = context.retainedBuffer || (x => x);\n\n\t\tconst checkOverflow = () => {\n\t\t\tif (currentPosition >= currentBuffer.length) {\n\t\t\t\tcurrentPosition = 0;\n\t\t\t\tcurrentDataItem++;\n\t\t\t\tcurrentBuffer =\n\t\t\t\t\tcurrentDataItem < data.length ? data[currentDataItem] : null;\n\t\t\t\tcurrentIsBuffer = Buffer.isBuffer(currentBuffer);\n\t\t\t}\n\t\t};\n\t\tconst isInCurrentBuffer = n => {\n\t\t\treturn currentIsBuffer && n + currentPosition <= currentBuffer.length;\n\t\t};\n\t\tconst ensureBuffer = () => {\n\t\t\tif (!currentIsBuffer) {\n\t\t\t\tthrow new Error(\n\t\t\t\t\tcurrentBuffer === null\n\t\t\t\t\t\t? \"Unexpected end of stream\"\n\t\t\t\t\t\t: \"Unexpected lazy element in stream\"\n\t\t\t\t);\n\t\t\t}\n\t\t};\n\t\t/**\n\t\t * Reads n bytes\n\t\t * @param {number} n amount of bytes to read\n\t\t * @returns {Buffer} buffer with bytes\n\t\t */\n\t\tconst read = n => {\n\t\t\tensureBuffer();\n\t\t\tconst rem = currentBuffer.length - currentPosition;\n\t\t\tif (rem < n) {\n\t\t\t\tconst buffers = [read(rem)];\n\t\t\t\tn -= rem;\n\t\t\t\tensureBuffer();\n\t\t\t\twhile (currentBuffer.length < n) {\n\t\t\t\t\tconst b = /** @type {Buffer} */ (currentBuffer);\n\t\t\t\t\tbuffers.push(b);\n\t\t\t\t\tn -= b.length;\n\t\t\t\t\tcurrentDataItem++;\n\t\t\t\t\tcurrentBuffer =\n\t\t\t\t\t\tcurrentDataItem < data.length ? data[currentDataItem] : null;\n\t\t\t\t\tcurrentIsBuffer = Buffer.isBuffer(currentBuffer);\n\t\t\t\t\tensureBuffer();\n\t\t\t\t}\n\t\t\t\tbuffers.push(read(n));\n\t\t\t\treturn Buffer.concat(buffers);\n\t\t\t}\n\t\t\tconst b = /** @type {Buffer} */ (currentBuffer);\n\t\t\tconst res = Buffer.from(b.buffer, b.byteOffset + currentPosition, n);\n\t\t\tcurrentPosition += n;\n\t\t\tcheckOverflow();\n\t\t\treturn res;\n\t\t};\n\t\t/**\n\t\t * Reads up to n bytes\n\t\t * @param {number} n amount of bytes to read\n\t\t * @returns {Buffer} buffer with bytes\n\t\t */\n\t\tconst readUpTo = n => {\n\t\t\tensureBuffer();\n\t\t\tconst rem = currentBuffer.length - currentPosition;\n\t\t\tif (rem < n) {\n\t\t\t\tn = rem;\n\t\t\t}\n\t\t\tconst b = /** @type {Buffer} */ (currentBuffer);\n\t\t\tconst res = Buffer.from(b.buffer, b.byteOffset + currentPosition, n);\n\t\t\tcurrentPosition += n;\n\t\t\tcheckOverflow();\n\t\t\treturn res;\n\t\t};\n\t\tconst readU8 = () => {\n\t\t\tensureBuffer();\n\t\t\t/**\n\t\t\t * There is no need to check remaining buffer size here\n\t\t\t * since {@link checkOverflow} guarantees at least one byte remaining\n\t\t\t */\n\t\t\tconst byte = /** @type {Buffer} */ (currentBuffer).readUInt8(\n\t\t\t\tcurrentPosition\n\t\t\t);\n\t\t\tcurrentPosition += I8_SIZE;\n\t\t\tcheckOverflow();\n\t\t\treturn byte;\n\t\t};\n\t\tconst readU32 = () => {\n\t\t\treturn read(I32_SIZE).readUInt32LE(0);\n\t\t};\n\t\tconst readBits = (data, n) => {\n\t\t\tlet mask = 1;\n\t\t\twhile (n !== 0) {\n\t\t\t\tresult.push((data & mask) !== 0);\n\t\t\t\tmask = mask << 1;\n\t\t\t\tn--;\n\t\t\t}\n\t\t};\n\t\tconst dispatchTable = Array.from({ length: 256 }).map((_, header) => {\n\t\t\tswitch (header) {\n\t\t\t\tcase LAZY_HEADER:\n\t\t\t\t\treturn () => {\n\t\t\t\t\t\tconst count = readU32();\n\t\t\t\t\t\tconst lengths = Array.from({ length: count }).map(() => readU32());\n\t\t\t\t\t\tconst content = [];\n\t\t\t\t\t\tfor (let l of lengths) {\n\t\t\t\t\t\t\tif (l === 0) {\n\t\t\t\t\t\t\t\tif (typeof currentBuffer !== \"function\") {\n\t\t\t\t\t\t\t\t\tthrow new Error(\"Unexpected non-lazy element in stream\");\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tcontent.push(currentBuffer);\n\t\t\t\t\t\t\t\tcurrentDataItem++;\n\t\t\t\t\t\t\t\tcurrentBuffer =\n\t\t\t\t\t\t\t\t\tcurrentDataItem < data.length ? data[currentDataItem] : null;\n\t\t\t\t\t\t\t\tcurrentIsBuffer = Buffer.isBuffer(currentBuffer);\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tdo {\n\t\t\t\t\t\t\t\t\tconst buf = readUpTo(l);\n\t\t\t\t\t\t\t\t\tl -= buf.length;\n\t\t\t\t\t\t\t\t\tcontent.push(retainedBuffer(buf));\n\t\t\t\t\t\t\t\t} while (l > 0);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tresult.push(this._createLazyDeserialized(content, context));\n\t\t\t\t\t};\n\t\t\t\tcase BUFFER_HEADER:\n\t\t\t\t\treturn () => {\n\t\t\t\t\t\tconst len = readU32();\n\t\t\t\t\t\tresult.push(retainedBuffer(read(len)));\n\t\t\t\t\t};\n\t\t\t\tcase TRUE_HEADER:\n\t\t\t\t\treturn () => result.push(true);\n\t\t\t\tcase FALSE_HEADER:\n\t\t\t\t\treturn () => result.push(false);\n\t\t\t\tcase NULL3_HEADER:\n\t\t\t\t\treturn () => result.push(null, null, null);\n\t\t\t\tcase NULL2_HEADER:\n\t\t\t\t\treturn () => result.push(null, null);\n\t\t\t\tcase NULL_HEADER:\n\t\t\t\t\treturn () => result.push(null);\n\t\t\t\tcase NULL_AND_TRUE_HEADER:\n\t\t\t\t\treturn () => result.push(null, true);\n\t\t\t\tcase NULL_AND_FALSE_HEADER:\n\t\t\t\t\treturn () => result.push(null, false);\n\t\t\t\tcase NULL_AND_I8_HEADER:\n\t\t\t\t\treturn () => {\n\t\t\t\t\t\tif (currentIsBuffer) {\n\t\t\t\t\t\t\tresult.push(\n\t\t\t\t\t\t\t\tnull,\n\t\t\t\t\t\t\t\t/** @type {Buffer} */ (currentBuffer).readInt8(currentPosition)\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\tcurrentPosition += I8_SIZE;\n\t\t\t\t\t\t\tcheckOverflow();\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tresult.push(null, read(I8_SIZE).readInt8(0));\n\t\t\t\t\t\t}\n\t\t\t\t\t};\n\t\t\t\tcase NULL_AND_I32_HEADER:\n\t\t\t\t\treturn () => {\n\t\t\t\t\t\tresult.push(null);\n\t\t\t\t\t\tif (isInCurrentBuffer(I32_SIZE)) {\n\t\t\t\t\t\t\tresult.push(\n\t\t\t\t\t\t\t\t/** @type {Buffer} */ (currentBuffer).readInt32LE(\n\t\t\t\t\t\t\t\t\tcurrentPosition\n\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\tcurrentPosition += I32_SIZE;\n\t\t\t\t\t\t\tcheckOverflow();\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tresult.push(read(I32_SIZE).readInt32LE(0));\n\t\t\t\t\t\t}\n\t\t\t\t\t};\n\t\t\t\tcase NULLS8_HEADER:\n\t\t\t\t\treturn () => {\n\t\t\t\t\t\tconst len = readU8() + 4;\n\t\t\t\t\t\tfor (let i = 0; i < len; i++) {\n\t\t\t\t\t\t\tresult.push(null);\n\t\t\t\t\t\t}\n\t\t\t\t\t};\n\t\t\t\tcase NULLS32_HEADER:\n\t\t\t\t\treturn () => {\n\t\t\t\t\t\tconst len = readU32() + 260;\n\t\t\t\t\t\tfor (let i = 0; i < len; i++) {\n\t\t\t\t\t\t\tresult.push(null);\n\t\t\t\t\t\t}\n\t\t\t\t\t};\n\t\t\t\tcase BOOLEANS_HEADER:\n\t\t\t\t\treturn () => {\n\t\t\t\t\t\tconst innerHeader = readU8();\n\t\t\t\t\t\tif ((innerHeader & 0xf0) === 0) {\n\t\t\t\t\t\t\treadBits(innerHeader, 3);\n\t\t\t\t\t\t} else if ((innerHeader & 0xe0) === 0) {\n\t\t\t\t\t\t\treadBits(innerHeader, 4);\n\t\t\t\t\t\t} else if ((innerHeader & 0xc0) === 0) {\n\t\t\t\t\t\t\treadBits(innerHeader, 5);\n\t\t\t\t\t\t} else if ((innerHeader & 0x80) === 0) {\n\t\t\t\t\t\t\treadBits(innerHeader, 6);\n\t\t\t\t\t\t} else if (innerHeader !== 0xff) {\n\t\t\t\t\t\t\tlet count = (innerHeader & 0x7f) + 7;\n\t\t\t\t\t\t\twhile (count > 8) {\n\t\t\t\t\t\t\t\treadBits(readU8(), 8);\n\t\t\t\t\t\t\t\tcount -= 8;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\treadBits(readU8(), count);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tlet count = readU32();\n\t\t\t\t\t\t\twhile (count > 8) {\n\t\t\t\t\t\t\t\treadBits(readU8(), 8);\n\t\t\t\t\t\t\t\tcount -= 8;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\treadBits(readU8(), count);\n\t\t\t\t\t\t}\n\t\t\t\t\t};\n\t\t\t\tcase STRING_HEADER:\n\t\t\t\t\treturn () => {\n\t\t\t\t\t\tconst len = readU32();\n\t\t\t\t\t\tif (isInCurrentBuffer(len) && currentPosition + len < 0x7fffffff) {\n\t\t\t\t\t\t\tresult.push(\n\t\t\t\t\t\t\t\tcurrentBuffer.toString(\n\t\t\t\t\t\t\t\t\tundefined,\n\t\t\t\t\t\t\t\t\tcurrentPosition,\n\t\t\t\t\t\t\t\t\tcurrentPosition + len\n\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\tcurrentPosition += len;\n\t\t\t\t\t\t\tcheckOverflow();\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tresult.push(read(len).toString());\n\t\t\t\t\t\t}\n\t\t\t\t\t};\n\t\t\t\tcase SHORT_STRING_HEADER:\n\t\t\t\t\treturn () => result.push(\"\");\n\t\t\t\tcase SHORT_STRING_HEADER | 1:\n\t\t\t\t\treturn () => {\n\t\t\t\t\t\tif (currentIsBuffer && currentPosition < 0x7ffffffe) {\n\t\t\t\t\t\t\tresult.push(\n\t\t\t\t\t\t\t\tcurrentBuffer.toString(\n\t\t\t\t\t\t\t\t\t\"latin1\",\n\t\t\t\t\t\t\t\t\tcurrentPosition,\n\t\t\t\t\t\t\t\t\tcurrentPosition + 1\n\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\tcurrentPosition++;\n\t\t\t\t\t\t\tcheckOverflow();\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tresult.push(read(1).toString(\"latin1\"));\n\t\t\t\t\t\t}\n\t\t\t\t\t};\n\t\t\t\tcase I8_HEADER:\n\t\t\t\t\treturn () => {\n\t\t\t\t\t\tif (currentIsBuffer) {\n\t\t\t\t\t\t\tresult.push(\n\t\t\t\t\t\t\t\t/** @type {Buffer} */ (currentBuffer).readInt8(currentPosition)\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\tcurrentPosition++;\n\t\t\t\t\t\t\tcheckOverflow();\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tresult.push(read(1).readInt8(0));\n\t\t\t\t\t\t}\n\t\t\t\t\t};\n\t\t\t\tdefault:\n\t\t\t\t\tif (header <= 10) {\n\t\t\t\t\t\treturn () => result.push(header);\n\t\t\t\t\t} else if ((header & SHORT_STRING_HEADER) === SHORT_STRING_HEADER) {\n\t\t\t\t\t\tconst len = header & SHORT_STRING_LENGTH_MASK;\n\t\t\t\t\t\treturn () => {\n\t\t\t\t\t\t\tif (\n\t\t\t\t\t\t\t\tisInCurrentBuffer(len) &&\n\t\t\t\t\t\t\t\tcurrentPosition + len < 0x7fffffff\n\t\t\t\t\t\t\t) {\n\t\t\t\t\t\t\t\tresult.push(\n\t\t\t\t\t\t\t\t\tcurrentBuffer.toString(\n\t\t\t\t\t\t\t\t\t\t\"latin1\",\n\t\t\t\t\t\t\t\t\t\tcurrentPosition,\n\t\t\t\t\t\t\t\t\t\tcurrentPosition + len\n\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\tcurrentPosition += len;\n\t\t\t\t\t\t\t\tcheckOverflow();\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tresult.push(read(len).toString(\"latin1\"));\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t};\n\t\t\t\t\t} else if ((header & NUMBERS_HEADER_MASK) === F64_HEADER) {\n\t\t\t\t\t\tconst len = (header & NUMBERS_COUNT_MASK) + 1;\n\t\t\t\t\t\treturn () => {\n\t\t\t\t\t\t\tconst need = F64_SIZE * len;\n\t\t\t\t\t\t\tif (isInCurrentBuffer(need)) {\n\t\t\t\t\t\t\t\tfor (let i = 0; i < len; i++) {\n\t\t\t\t\t\t\t\t\tresult.push(\n\t\t\t\t\t\t\t\t\t\t/** @type {Buffer} */ (currentBuffer).readDoubleLE(\n\t\t\t\t\t\t\t\t\t\t\tcurrentPosition\n\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t\tcurrentPosition += F64_SIZE;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tcheckOverflow();\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tconst buf = read(need);\n\t\t\t\t\t\t\t\tfor (let i = 0; i < len; i++) {\n\t\t\t\t\t\t\t\t\tresult.push(buf.readDoubleLE(i * F64_SIZE));\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t};\n\t\t\t\t\t} else if ((header & NUMBERS_HEADER_MASK) === I32_HEADER) {\n\t\t\t\t\t\tconst len = (header & NUMBERS_COUNT_MASK) + 1;\n\t\t\t\t\t\treturn () => {\n\t\t\t\t\t\t\tconst need = I32_SIZE * len;\n\t\t\t\t\t\t\tif (isInCurrentBuffer(need)) {\n\t\t\t\t\t\t\t\tfor (let i = 0; i < len; i++) {\n\t\t\t\t\t\t\t\t\tresult.push(\n\t\t\t\t\t\t\t\t\t\t/** @type {Buffer} */ (currentBuffer).readInt32LE(\n\t\t\t\t\t\t\t\t\t\t\tcurrentPosition\n\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t\tcurrentPosition += I32_SIZE;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tcheckOverflow();\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tconst buf = read(need);\n\t\t\t\t\t\t\t\tfor (let i = 0; i < len; i++) {\n\t\t\t\t\t\t\t\t\tresult.push(buf.readInt32LE(i * I32_SIZE));\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t};\n\t\t\t\t\t} else if ((header & NUMBERS_HEADER_MASK) === I8_HEADER) {\n\t\t\t\t\t\tconst len = (header & NUMBERS_COUNT_MASK) + 1;\n\t\t\t\t\t\treturn () => {\n\t\t\t\t\t\t\tconst need = I8_SIZE * len;\n\t\t\t\t\t\t\tif (isInCurrentBuffer(need)) {\n\t\t\t\t\t\t\t\tfor (let i = 0; i < len; i++) {\n\t\t\t\t\t\t\t\t\tresult.push(\n\t\t\t\t\t\t\t\t\t\t/** @type {Buffer} */ (currentBuffer).readInt8(\n\t\t\t\t\t\t\t\t\t\t\tcurrentPosition\n\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t\tcurrentPosition += I8_SIZE;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tcheckOverflow();\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tconst buf = read(need);\n\t\t\t\t\t\t\t\tfor (let i = 0; i < len; i++) {\n\t\t\t\t\t\t\t\t\tresult.push(buf.readInt8(i * I8_SIZE));\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t};\n\t\t\t\t\t} else {\n\t\t\t\t\t\treturn () => {\n\t\t\t\t\t\t\tthrow new Error(\n\t\t\t\t\t\t\t\t`Unexpected header byte 0x${header.toString(16)}`\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t};\n\t\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\t/** @type {DeserializedType} */\n\t\tlet result = [];\n\t\twhile (currentBuffer !== null) {\n\t\t\tif (typeof currentBuffer === \"function\") {\n\t\t\t\tresult.push(this._deserializeLazy(currentBuffer, context));\n\t\t\t\tcurrentDataItem++;\n\t\t\t\tcurrentBuffer =\n\t\t\t\t\tcurrentDataItem < data.length ? data[currentDataItem] : null;\n\t\t\t\tcurrentIsBuffer = Buffer.isBuffer(currentBuffer);\n\t\t\t} else {\n\t\t\t\tconst header = readU8();\n\t\t\t\tdispatchTable[header]();\n\t\t\t}\n\t\t}\n\n\t\t// avoid leaking memory in context\n\t\tlet _result = result;\n\t\tresult = undefined;\n\t\treturn _result;\n\t}\n}\n\nmodule.exports = BinaryMiddleware;\n\nmodule.exports.MEASURE_START_OPERATION = MEASURE_START_OPERATION;\nmodule.exports.MEASURE_END_OPERATION = MEASURE_END_OPERATION;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}