{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n/** @typedef {import(\"./Resolver\")} Resolver */\n\n/** @typedef {import(\"./Resolver\").ResolveRequest} ResolveRequest */\n\n/** @typedef {import(\"./Resolver\").ResolveStepHook} ResolveStepHook */\n\nmodule.exports = class ConditionalPlugin {\n  /**\n   * @param {string | ResolveStepHook} source source\n   * @param {Partial<ResolveRequest>} test compare object\n   * @param {string | null} message log message\n   * @param {boolean} allowAlternatives when false, do not continue with the current step when \"test\" matches\n   * @param {string | ResolveStepHook} target target\n   */\n  constructor(source, test, message, allowAlternatives, target) {\n    this.source = source;\n    this.test = test;\n    this.message = message;\n    this.allowAlternatives = allowAlternatives;\n    this.target = target;\n  }\n  /**\n   * @param {Resolver} resolver the resolver\n   * @returns {void}\n   */\n\n\n  apply(resolver) {\n    const target = resolver.ensureHook(this.target);\n    const {\n      test,\n      message,\n      allowAlternatives\n    } = this;\n    const keys = Object.keys(test);\n    resolver.getHook(this.source).tapAsync(\"ConditionalPlugin\", (request, resolveContext, callback) => {\n      for (const prop of keys) {\n        if (request[prop] !== test[prop]) return callback();\n      }\n\n      resolver.doResolve(target, request, message, resolveContext, allowAlternatives ? callback : (err, result) => {\n        if (err) return callback(err); // Don't allow other alternatives\n\n        if (result === undefined) return callback(null, null);\n        callback(null, result);\n      });\n    });\n  }\n\n};","map":{"version":3,"names":["module","exports","ConditionalPlugin","constructor","source","test","message","allowAlternatives","target","apply","resolver","ensureHook","keys","Object","getHook","tapAsync","request","resolveContext","callback","prop","doResolve","err","result","undefined"],"sources":["/Users/arpanbhandari/Documents/cod-ing/React/newsapp/node_modules/enhanced-resolve/lib/ConditionalPlugin.js"],"sourcesContent":["/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\n\"use strict\";\n\n/** @typedef {import(\"./Resolver\")} Resolver */\n/** @typedef {import(\"./Resolver\").ResolveRequest} ResolveRequest */\n/** @typedef {import(\"./Resolver\").ResolveStepHook} ResolveStepHook */\n\nmodule.exports = class ConditionalPlugin {\n\t/**\n\t * @param {string | ResolveStepHook} source source\n\t * @param {Partial<ResolveRequest>} test compare object\n\t * @param {string | null} message log message\n\t * @param {boolean} allowAlternatives when false, do not continue with the current step when \"test\" matches\n\t * @param {string | ResolveStepHook} target target\n\t */\n\tconstructor(source, test, message, allowAlternatives, target) {\n\t\tthis.source = source;\n\t\tthis.test = test;\n\t\tthis.message = message;\n\t\tthis.allowAlternatives = allowAlternatives;\n\t\tthis.target = target;\n\t}\n\n\t/**\n\t * @param {Resolver} resolver the resolver\n\t * @returns {void}\n\t */\n\tapply(resolver) {\n\t\tconst target = resolver.ensureHook(this.target);\n\t\tconst { test, message, allowAlternatives } = this;\n\t\tconst keys = Object.keys(test);\n\t\tresolver\n\t\t\t.getHook(this.source)\n\t\t\t.tapAsync(\"ConditionalPlugin\", (request, resolveContext, callback) => {\n\t\t\t\tfor (const prop of keys) {\n\t\t\t\t\tif (request[prop] !== test[prop]) return callback();\n\t\t\t\t}\n\t\t\t\tresolver.doResolve(\n\t\t\t\t\ttarget,\n\t\t\t\t\trequest,\n\t\t\t\t\tmessage,\n\t\t\t\t\tresolveContext,\n\t\t\t\t\tallowAlternatives\n\t\t\t\t\t\t? callback\n\t\t\t\t\t\t: (err, result) => {\n\t\t\t\t\t\t\t\tif (err) return callback(err);\n\n\t\t\t\t\t\t\t\t// Don't allow other alternatives\n\t\t\t\t\t\t\t\tif (result === undefined) return callback(null, null);\n\t\t\t\t\t\t\t\tcallback(null, result);\n\t\t\t\t\t\t  }\n\t\t\t\t);\n\t\t\t});\n\t}\n};\n"],"mappings":"AAAA;AACA;AACA;AACA;AAEA;AAEA;;AACA;;AACA;;AAEAA,MAAM,CAACC,OAAP,GAAiB,MAAMC,iBAAN,CAAwB;EACxC;AACD;AACA;AACA;AACA;AACA;AACA;EACCC,WAAW,CAACC,MAAD,EAASC,IAAT,EAAeC,OAAf,EAAwBC,iBAAxB,EAA2CC,MAA3C,EAAmD;IAC7D,KAAKJ,MAAL,GAAcA,MAAd;IACA,KAAKC,IAAL,GAAYA,IAAZ;IACA,KAAKC,OAAL,GAAeA,OAAf;IACA,KAAKC,iBAAL,GAAyBA,iBAAzB;IACA,KAAKC,MAAL,GAAcA,MAAd;EACA;EAED;AACD;AACA;AACA;;;EACCC,KAAK,CAACC,QAAD,EAAW;IACf,MAAMF,MAAM,GAAGE,QAAQ,CAACC,UAAT,CAAoB,KAAKH,MAAzB,CAAf;IACA,MAAM;MAAEH,IAAF;MAAQC,OAAR;MAAiBC;IAAjB,IAAuC,IAA7C;IACA,MAAMK,IAAI,GAAGC,MAAM,CAACD,IAAP,CAAYP,IAAZ,CAAb;IACAK,QAAQ,CACNI,OADF,CACU,KAAKV,MADf,EAEEW,QAFF,CAEW,mBAFX,EAEgC,CAACC,OAAD,EAAUC,cAAV,EAA0BC,QAA1B,KAAuC;MACrE,KAAK,MAAMC,IAAX,IAAmBP,IAAnB,EAAyB;QACxB,IAAII,OAAO,CAACG,IAAD,CAAP,KAAkBd,IAAI,CAACc,IAAD,CAA1B,EAAkC,OAAOD,QAAQ,EAAf;MAClC;;MACDR,QAAQ,CAACU,SAAT,CACCZ,MADD,EAECQ,OAFD,EAGCV,OAHD,EAICW,cAJD,EAKCV,iBAAiB,GACdW,QADc,GAEd,CAACG,GAAD,EAAMC,MAAN,KAAiB;QACjB,IAAID,GAAJ,EAAS,OAAOH,QAAQ,CAACG,GAAD,CAAf,CADQ,CAGjB;;QACA,IAAIC,MAAM,KAAKC,SAAf,EAA0B,OAAOL,QAAQ,CAAC,IAAD,EAAO,IAAP,CAAf;QAC1BA,QAAQ,CAAC,IAAD,EAAOI,MAAP,CAAR;MACC,CAbL;IAeA,CArBF;EAsBA;;AA9CuC,CAAzC"},"metadata":{},"sourceType":"script"}