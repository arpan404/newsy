{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nconst {\n  compareNumbers\n} = require(\"./util/comparators\");\n\nconst identifierUtils = require(\"./util/identifier\");\n/** @typedef {import(\"./Chunk\")} Chunk */\n\n/** @typedef {import(\"./Compiler\")} Compiler */\n\n/** @typedef {import(\"./Module\")} Module */\n\n/**\n * @typedef {Object} RecordsChunks\n * @property {Record<string, number>=} byName\n * @property {Record<string, number>=} bySource\n * @property {number[]=} usedIds\n */\n\n/**\n * @typedef {Object} RecordsModules\n * @property {Record<string, number>=} byIdentifier\n * @property {Record<string, number>=} bySource\n * @property {number[]=} usedIds\n */\n\n/**\n * @typedef {Object} Records\n * @property {RecordsChunks=} chunks\n * @property {RecordsModules=} modules\n */\n\n\nclass RecordIdsPlugin {\n  /**\n   * @param {Object} options Options object\n   * @param {boolean=} options.portableIds true, when ids need to be portable\n   */\n  constructor(options) {\n    this.options = options || {};\n  }\n  /**\n   * @param {Compiler} compiler the Compiler\n   * @returns {void}\n   */\n\n\n  apply(compiler) {\n    const portableIds = this.options.portableIds;\n    const makePathsRelative = identifierUtils.makePathsRelative.bindContextCache(compiler.context, compiler.root);\n    /**\n     * @param {Module} module the module\n     * @returns {string} the (portable) identifier\n     */\n\n    const getModuleIdentifier = module => {\n      if (portableIds) {\n        return makePathsRelative(module.identifier());\n      }\n\n      return module.identifier();\n    };\n\n    compiler.hooks.compilation.tap(\"RecordIdsPlugin\", compilation => {\n      compilation.hooks.recordModules.tap(\"RecordIdsPlugin\",\n      /**\n       * @param {Module[]} modules the modules array\n       * @param {Records} records the records object\n       * @returns {void}\n       */\n      (modules, records) => {\n        const chunkGraph = compilation.chunkGraph;\n        if (!records.modules) records.modules = {};\n        if (!records.modules.byIdentifier) records.modules.byIdentifier = {};\n        /** @type {Set<number>} */\n\n        const usedIds = new Set();\n\n        for (const module of modules) {\n          const moduleId = chunkGraph.getModuleId(module);\n          if (typeof moduleId !== \"number\") continue;\n          const identifier = getModuleIdentifier(module);\n          records.modules.byIdentifier[identifier] = moduleId;\n          usedIds.add(moduleId);\n        }\n\n        records.modules.usedIds = Array.from(usedIds).sort(compareNumbers);\n      });\n      compilation.hooks.reviveModules.tap(\"RecordIdsPlugin\",\n      /**\n       * @param {Module[]} modules the modules array\n       * @param {Records} records the records object\n       * @returns {void}\n       */\n      (modules, records) => {\n        if (!records.modules) return;\n\n        if (records.modules.byIdentifier) {\n          const chunkGraph = compilation.chunkGraph;\n          /** @type {Set<number>} */\n\n          const usedIds = new Set();\n\n          for (const module of modules) {\n            const moduleId = chunkGraph.getModuleId(module);\n            if (moduleId !== null) continue;\n            const identifier = getModuleIdentifier(module);\n            const id = records.modules.byIdentifier[identifier];\n            if (id === undefined) continue;\n            if (usedIds.has(id)) continue;\n            usedIds.add(id);\n            chunkGraph.setModuleId(module, id);\n          }\n        }\n\n        if (Array.isArray(records.modules.usedIds)) {\n          compilation.usedModuleIds = new Set(records.modules.usedIds);\n        }\n      });\n      /**\n       * @param {Chunk} chunk the chunk\n       * @returns {string[]} sources of the chunk\n       */\n\n      const getChunkSources = chunk => {\n        /** @type {string[]} */\n        const sources = [];\n\n        for (const chunkGroup of chunk.groupsIterable) {\n          const index = chunkGroup.chunks.indexOf(chunk);\n\n          if (chunkGroup.name) {\n            sources.push(`${index} ${chunkGroup.name}`);\n          } else {\n            for (const origin of chunkGroup.origins) {\n              if (origin.module) {\n                if (origin.request) {\n                  sources.push(`${index} ${getModuleIdentifier(origin.module)} ${origin.request}`);\n                } else if (typeof origin.loc === \"string\") {\n                  sources.push(`${index} ${getModuleIdentifier(origin.module)} ${origin.loc}`);\n                } else if (origin.loc && typeof origin.loc === \"object\" && \"start\" in origin.loc) {\n                  sources.push(`${index} ${getModuleIdentifier(origin.module)} ${JSON.stringify(origin.loc.start)}`);\n                }\n              }\n            }\n          }\n        }\n\n        return sources;\n      };\n\n      compilation.hooks.recordChunks.tap(\"RecordIdsPlugin\",\n      /**\n       * @param {Chunk[]} chunks the chunks array\n       * @param {Records} records the records object\n       * @returns {void}\n       */\n      (chunks, records) => {\n        if (!records.chunks) records.chunks = {};\n        if (!records.chunks.byName) records.chunks.byName = {};\n        if (!records.chunks.bySource) records.chunks.bySource = {};\n        /** @type {Set<number>} */\n\n        const usedIds = new Set();\n\n        for (const chunk of chunks) {\n          if (typeof chunk.id !== \"number\") continue;\n          const name = chunk.name;\n          if (name) records.chunks.byName[name] = chunk.id;\n          const sources = getChunkSources(chunk);\n\n          for (const source of sources) {\n            records.chunks.bySource[source] = chunk.id;\n          }\n\n          usedIds.add(chunk.id);\n        }\n\n        records.chunks.usedIds = Array.from(usedIds).sort(compareNumbers);\n      });\n      compilation.hooks.reviveChunks.tap(\"RecordIdsPlugin\",\n      /**\n       * @param {Chunk[]} chunks the chunks array\n       * @param {Records} records the records object\n       * @returns {void}\n       */\n      (chunks, records) => {\n        if (!records.chunks) return;\n        /** @type {Set<number>} */\n\n        const usedIds = new Set();\n\n        if (records.chunks.byName) {\n          for (const chunk of chunks) {\n            if (chunk.id !== null) continue;\n            if (!chunk.name) continue;\n            const id = records.chunks.byName[chunk.name];\n            if (id === undefined) continue;\n            if (usedIds.has(id)) continue;\n            usedIds.add(id);\n            chunk.id = id;\n            chunk.ids = [id];\n          }\n        }\n\n        if (records.chunks.bySource) {\n          for (const chunk of chunks) {\n            if (chunk.id !== null) continue;\n            const sources = getChunkSources(chunk);\n\n            for (const source of sources) {\n              const id = records.chunks.bySource[source];\n              if (id === undefined) continue;\n              if (usedIds.has(id)) continue;\n              usedIds.add(id);\n              chunk.id = id;\n              chunk.ids = [id];\n              break;\n            }\n          }\n        }\n\n        if (Array.isArray(records.chunks.usedIds)) {\n          compilation.usedChunkIds = new Set(records.chunks.usedIds);\n        }\n      });\n    });\n  }\n\n}\n\nmodule.exports = RecordIdsPlugin;","map":{"version":3,"names":["compareNumbers","require","identifierUtils","RecordIdsPlugin","constructor","options","apply","compiler","portableIds","makePathsRelative","bindContextCache","context","root","getModuleIdentifier","module","identifier","hooks","compilation","tap","recordModules","modules","records","chunkGraph","byIdentifier","usedIds","Set","moduleId","getModuleId","add","Array","from","sort","reviveModules","id","undefined","has","setModuleId","isArray","usedModuleIds","getChunkSources","chunk","sources","chunkGroup","groupsIterable","index","chunks","indexOf","name","push","origin","origins","request","loc","JSON","stringify","start","recordChunks","byName","bySource","source","reviveChunks","ids","usedChunkIds","exports"],"sources":["/Users/arpanbhandari/Documents/cod-ing/React/newsapp/node_modules/webpack/lib/RecordIdsPlugin.js"],"sourcesContent":["/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\n\"use strict\";\n\nconst { compareNumbers } = require(\"./util/comparators\");\nconst identifierUtils = require(\"./util/identifier\");\n\n/** @typedef {import(\"./Chunk\")} Chunk */\n/** @typedef {import(\"./Compiler\")} Compiler */\n/** @typedef {import(\"./Module\")} Module */\n\n/**\n * @typedef {Object} RecordsChunks\n * @property {Record<string, number>=} byName\n * @property {Record<string, number>=} bySource\n * @property {number[]=} usedIds\n */\n\n/**\n * @typedef {Object} RecordsModules\n * @property {Record<string, number>=} byIdentifier\n * @property {Record<string, number>=} bySource\n * @property {number[]=} usedIds\n */\n\n/**\n * @typedef {Object} Records\n * @property {RecordsChunks=} chunks\n * @property {RecordsModules=} modules\n */\n\nclass RecordIdsPlugin {\n\t/**\n\t * @param {Object} options Options object\n\t * @param {boolean=} options.portableIds true, when ids need to be portable\n\t */\n\tconstructor(options) {\n\t\tthis.options = options || {};\n\t}\n\n\t/**\n\t * @param {Compiler} compiler the Compiler\n\t * @returns {void}\n\t */\n\tapply(compiler) {\n\t\tconst portableIds = this.options.portableIds;\n\n\t\tconst makePathsRelative =\n\t\t\tidentifierUtils.makePathsRelative.bindContextCache(\n\t\t\t\tcompiler.context,\n\t\t\t\tcompiler.root\n\t\t\t);\n\n\t\t/**\n\t\t * @param {Module} module the module\n\t\t * @returns {string} the (portable) identifier\n\t\t */\n\t\tconst getModuleIdentifier = module => {\n\t\t\tif (portableIds) {\n\t\t\t\treturn makePathsRelative(module.identifier());\n\t\t\t}\n\t\t\treturn module.identifier();\n\t\t};\n\n\t\tcompiler.hooks.compilation.tap(\"RecordIdsPlugin\", compilation => {\n\t\t\tcompilation.hooks.recordModules.tap(\n\t\t\t\t\"RecordIdsPlugin\",\n\t\t\t\t/**\n\t\t\t\t * @param {Module[]} modules the modules array\n\t\t\t\t * @param {Records} records the records object\n\t\t\t\t * @returns {void}\n\t\t\t\t */\n\t\t\t\t(modules, records) => {\n\t\t\t\t\tconst chunkGraph = compilation.chunkGraph;\n\t\t\t\t\tif (!records.modules) records.modules = {};\n\t\t\t\t\tif (!records.modules.byIdentifier) records.modules.byIdentifier = {};\n\t\t\t\t\t/** @type {Set<number>} */\n\t\t\t\t\tconst usedIds = new Set();\n\t\t\t\t\tfor (const module of modules) {\n\t\t\t\t\t\tconst moduleId = chunkGraph.getModuleId(module);\n\t\t\t\t\t\tif (typeof moduleId !== \"number\") continue;\n\t\t\t\t\t\tconst identifier = getModuleIdentifier(module);\n\t\t\t\t\t\trecords.modules.byIdentifier[identifier] = moduleId;\n\t\t\t\t\t\tusedIds.add(moduleId);\n\t\t\t\t\t}\n\t\t\t\t\trecords.modules.usedIds = Array.from(usedIds).sort(compareNumbers);\n\t\t\t\t}\n\t\t\t);\n\t\t\tcompilation.hooks.reviveModules.tap(\n\t\t\t\t\"RecordIdsPlugin\",\n\t\t\t\t/**\n\t\t\t\t * @param {Module[]} modules the modules array\n\t\t\t\t * @param {Records} records the records object\n\t\t\t\t * @returns {void}\n\t\t\t\t */\n\t\t\t\t(modules, records) => {\n\t\t\t\t\tif (!records.modules) return;\n\t\t\t\t\tif (records.modules.byIdentifier) {\n\t\t\t\t\t\tconst chunkGraph = compilation.chunkGraph;\n\t\t\t\t\t\t/** @type {Set<number>} */\n\t\t\t\t\t\tconst usedIds = new Set();\n\t\t\t\t\t\tfor (const module of modules) {\n\t\t\t\t\t\t\tconst moduleId = chunkGraph.getModuleId(module);\n\t\t\t\t\t\t\tif (moduleId !== null) continue;\n\t\t\t\t\t\t\tconst identifier = getModuleIdentifier(module);\n\t\t\t\t\t\t\tconst id = records.modules.byIdentifier[identifier];\n\t\t\t\t\t\t\tif (id === undefined) continue;\n\t\t\t\t\t\t\tif (usedIds.has(id)) continue;\n\t\t\t\t\t\t\tusedIds.add(id);\n\t\t\t\t\t\t\tchunkGraph.setModuleId(module, id);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tif (Array.isArray(records.modules.usedIds)) {\n\t\t\t\t\t\tcompilation.usedModuleIds = new Set(records.modules.usedIds);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t);\n\n\t\t\t/**\n\t\t\t * @param {Chunk} chunk the chunk\n\t\t\t * @returns {string[]} sources of the chunk\n\t\t\t */\n\t\t\tconst getChunkSources = chunk => {\n\t\t\t\t/** @type {string[]} */\n\t\t\t\tconst sources = [];\n\t\t\t\tfor (const chunkGroup of chunk.groupsIterable) {\n\t\t\t\t\tconst index = chunkGroup.chunks.indexOf(chunk);\n\t\t\t\t\tif (chunkGroup.name) {\n\t\t\t\t\t\tsources.push(`${index} ${chunkGroup.name}`);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tfor (const origin of chunkGroup.origins) {\n\t\t\t\t\t\t\tif (origin.module) {\n\t\t\t\t\t\t\t\tif (origin.request) {\n\t\t\t\t\t\t\t\t\tsources.push(\n\t\t\t\t\t\t\t\t\t\t`${index} ${getModuleIdentifier(origin.module)} ${\n\t\t\t\t\t\t\t\t\t\t\torigin.request\n\t\t\t\t\t\t\t\t\t\t}`\n\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t} else if (typeof origin.loc === \"string\") {\n\t\t\t\t\t\t\t\t\tsources.push(\n\t\t\t\t\t\t\t\t\t\t`${index} ${getModuleIdentifier(origin.module)} ${\n\t\t\t\t\t\t\t\t\t\t\torigin.loc\n\t\t\t\t\t\t\t\t\t\t}`\n\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t} else if (\n\t\t\t\t\t\t\t\t\torigin.loc &&\n\t\t\t\t\t\t\t\t\ttypeof origin.loc === \"object\" &&\n\t\t\t\t\t\t\t\t\t\"start\" in origin.loc\n\t\t\t\t\t\t\t\t) {\n\t\t\t\t\t\t\t\t\tsources.push(\n\t\t\t\t\t\t\t\t\t\t`${index} ${getModuleIdentifier(\n\t\t\t\t\t\t\t\t\t\t\torigin.module\n\t\t\t\t\t\t\t\t\t\t)} ${JSON.stringify(origin.loc.start)}`\n\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn sources;\n\t\t\t};\n\n\t\t\tcompilation.hooks.recordChunks.tap(\n\t\t\t\t\"RecordIdsPlugin\",\n\t\t\t\t/**\n\t\t\t\t * @param {Chunk[]} chunks the chunks array\n\t\t\t\t * @param {Records} records the records object\n\t\t\t\t * @returns {void}\n\t\t\t\t */\n\t\t\t\t(chunks, records) => {\n\t\t\t\t\tif (!records.chunks) records.chunks = {};\n\t\t\t\t\tif (!records.chunks.byName) records.chunks.byName = {};\n\t\t\t\t\tif (!records.chunks.bySource) records.chunks.bySource = {};\n\t\t\t\t\t/** @type {Set<number>} */\n\t\t\t\t\tconst usedIds = new Set();\n\t\t\t\t\tfor (const chunk of chunks) {\n\t\t\t\t\t\tif (typeof chunk.id !== \"number\") continue;\n\t\t\t\t\t\tconst name = chunk.name;\n\t\t\t\t\t\tif (name) records.chunks.byName[name] = chunk.id;\n\t\t\t\t\t\tconst sources = getChunkSources(chunk);\n\t\t\t\t\t\tfor (const source of sources) {\n\t\t\t\t\t\t\trecords.chunks.bySource[source] = chunk.id;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tusedIds.add(chunk.id);\n\t\t\t\t\t}\n\t\t\t\t\trecords.chunks.usedIds = Array.from(usedIds).sort(compareNumbers);\n\t\t\t\t}\n\t\t\t);\n\t\t\tcompilation.hooks.reviveChunks.tap(\n\t\t\t\t\"RecordIdsPlugin\",\n\t\t\t\t/**\n\t\t\t\t * @param {Chunk[]} chunks the chunks array\n\t\t\t\t * @param {Records} records the records object\n\t\t\t\t * @returns {void}\n\t\t\t\t */\n\t\t\t\t(chunks, records) => {\n\t\t\t\t\tif (!records.chunks) return;\n\t\t\t\t\t/** @type {Set<number>} */\n\t\t\t\t\tconst usedIds = new Set();\n\t\t\t\t\tif (records.chunks.byName) {\n\t\t\t\t\t\tfor (const chunk of chunks) {\n\t\t\t\t\t\t\tif (chunk.id !== null) continue;\n\t\t\t\t\t\t\tif (!chunk.name) continue;\n\t\t\t\t\t\t\tconst id = records.chunks.byName[chunk.name];\n\t\t\t\t\t\t\tif (id === undefined) continue;\n\t\t\t\t\t\t\tif (usedIds.has(id)) continue;\n\t\t\t\t\t\t\tusedIds.add(id);\n\t\t\t\t\t\t\tchunk.id = id;\n\t\t\t\t\t\t\tchunk.ids = [id];\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tif (records.chunks.bySource) {\n\t\t\t\t\t\tfor (const chunk of chunks) {\n\t\t\t\t\t\t\tif (chunk.id !== null) continue;\n\t\t\t\t\t\t\tconst sources = getChunkSources(chunk);\n\t\t\t\t\t\t\tfor (const source of sources) {\n\t\t\t\t\t\t\t\tconst id = records.chunks.bySource[source];\n\t\t\t\t\t\t\t\tif (id === undefined) continue;\n\t\t\t\t\t\t\t\tif (usedIds.has(id)) continue;\n\t\t\t\t\t\t\t\tusedIds.add(id);\n\t\t\t\t\t\t\t\tchunk.id = id;\n\t\t\t\t\t\t\t\tchunk.ids = [id];\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tif (Array.isArray(records.chunks.usedIds)) {\n\t\t\t\t\t\tcompilation.usedChunkIds = new Set(records.chunks.usedIds);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t);\n\t\t});\n\t}\n}\nmodule.exports = RecordIdsPlugin;\n"],"mappings":"AAAA;AACA;AACA;AACA;AAEA;;AAEA,MAAM;EAAEA;AAAF,IAAqBC,OAAO,CAAC,oBAAD,CAAlC;;AACA,MAAMC,eAAe,GAAGD,OAAO,CAAC,mBAAD,CAA/B;AAEA;;AACA;;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;;AAEA,MAAME,eAAN,CAAsB;EACrB;AACD;AACA;AACA;EACCC,WAAW,CAACC,OAAD,EAAU;IACpB,KAAKA,OAAL,GAAeA,OAAO,IAAI,EAA1B;EACA;EAED;AACD;AACA;AACA;;;EACCC,KAAK,CAACC,QAAD,EAAW;IACf,MAAMC,WAAW,GAAG,KAAKH,OAAL,CAAaG,WAAjC;IAEA,MAAMC,iBAAiB,GACtBP,eAAe,CAACO,iBAAhB,CAAkCC,gBAAlC,CACCH,QAAQ,CAACI,OADV,EAECJ,QAAQ,CAACK,IAFV,CADD;IAMA;AACF;AACA;AACA;;IACE,MAAMC,mBAAmB,GAAGC,MAAM,IAAI;MACrC,IAAIN,WAAJ,EAAiB;QAChB,OAAOC,iBAAiB,CAACK,MAAM,CAACC,UAAP,EAAD,CAAxB;MACA;;MACD,OAAOD,MAAM,CAACC,UAAP,EAAP;IACA,CALD;;IAOAR,QAAQ,CAACS,KAAT,CAAeC,WAAf,CAA2BC,GAA3B,CAA+B,iBAA/B,EAAkDD,WAAW,IAAI;MAChEA,WAAW,CAACD,KAAZ,CAAkBG,aAAlB,CAAgCD,GAAhC,CACC,iBADD;MAEC;AACJ;AACA;AACA;AACA;MACI,CAACE,OAAD,EAAUC,OAAV,KAAsB;QACrB,MAAMC,UAAU,GAAGL,WAAW,CAACK,UAA/B;QACA,IAAI,CAACD,OAAO,CAACD,OAAb,EAAsBC,OAAO,CAACD,OAAR,GAAkB,EAAlB;QACtB,IAAI,CAACC,OAAO,CAACD,OAAR,CAAgBG,YAArB,EAAmCF,OAAO,CAACD,OAAR,CAAgBG,YAAhB,GAA+B,EAA/B;QACnC;;QACA,MAAMC,OAAO,GAAG,IAAIC,GAAJ,EAAhB;;QACA,KAAK,MAAMX,MAAX,IAAqBM,OAArB,EAA8B;UAC7B,MAAMM,QAAQ,GAAGJ,UAAU,CAACK,WAAX,CAAuBb,MAAvB,CAAjB;UACA,IAAI,OAAOY,QAAP,KAAoB,QAAxB,EAAkC;UAClC,MAAMX,UAAU,GAAGF,mBAAmB,CAACC,MAAD,CAAtC;UACAO,OAAO,CAACD,OAAR,CAAgBG,YAAhB,CAA6BR,UAA7B,IAA2CW,QAA3C;UACAF,OAAO,CAACI,GAAR,CAAYF,QAAZ;QACA;;QACDL,OAAO,CAACD,OAAR,CAAgBI,OAAhB,GAA0BK,KAAK,CAACC,IAAN,CAAWN,OAAX,EAAoBO,IAApB,CAAyB/B,cAAzB,CAA1B;MACA,CArBF;MAuBAiB,WAAW,CAACD,KAAZ,CAAkBgB,aAAlB,CAAgCd,GAAhC,CACC,iBADD;MAEC;AACJ;AACA;AACA;AACA;MACI,CAACE,OAAD,EAAUC,OAAV,KAAsB;QACrB,IAAI,CAACA,OAAO,CAACD,OAAb,EAAsB;;QACtB,IAAIC,OAAO,CAACD,OAAR,CAAgBG,YAApB,EAAkC;UACjC,MAAMD,UAAU,GAAGL,WAAW,CAACK,UAA/B;UACA;;UACA,MAAME,OAAO,GAAG,IAAIC,GAAJ,EAAhB;;UACA,KAAK,MAAMX,MAAX,IAAqBM,OAArB,EAA8B;YAC7B,MAAMM,QAAQ,GAAGJ,UAAU,CAACK,WAAX,CAAuBb,MAAvB,CAAjB;YACA,IAAIY,QAAQ,KAAK,IAAjB,EAAuB;YACvB,MAAMX,UAAU,GAAGF,mBAAmB,CAACC,MAAD,CAAtC;YACA,MAAMmB,EAAE,GAAGZ,OAAO,CAACD,OAAR,CAAgBG,YAAhB,CAA6BR,UAA7B,CAAX;YACA,IAAIkB,EAAE,KAAKC,SAAX,EAAsB;YACtB,IAAIV,OAAO,CAACW,GAAR,CAAYF,EAAZ,CAAJ,EAAqB;YACrBT,OAAO,CAACI,GAAR,CAAYK,EAAZ;YACAX,UAAU,CAACc,WAAX,CAAuBtB,MAAvB,EAA+BmB,EAA/B;UACA;QACD;;QACD,IAAIJ,KAAK,CAACQ,OAAN,CAAchB,OAAO,CAACD,OAAR,CAAgBI,OAA9B,CAAJ,EAA4C;UAC3CP,WAAW,CAACqB,aAAZ,GAA4B,IAAIb,GAAJ,CAAQJ,OAAO,CAACD,OAAR,CAAgBI,OAAxB,CAA5B;QACA;MACD,CA3BF;MA8BA;AACH;AACA;AACA;;MACG,MAAMe,eAAe,GAAGC,KAAK,IAAI;QAChC;QACA,MAAMC,OAAO,GAAG,EAAhB;;QACA,KAAK,MAAMC,UAAX,IAAyBF,KAAK,CAACG,cAA/B,EAA+C;UAC9C,MAAMC,KAAK,GAAGF,UAAU,CAACG,MAAX,CAAkBC,OAAlB,CAA0BN,KAA1B,CAAd;;UACA,IAAIE,UAAU,CAACK,IAAf,EAAqB;YACpBN,OAAO,CAACO,IAAR,CAAc,GAAEJ,KAAM,IAAGF,UAAU,CAACK,IAAK,EAAzC;UACA,CAFD,MAEO;YACN,KAAK,MAAME,MAAX,IAAqBP,UAAU,CAACQ,OAAhC,EAAyC;cACxC,IAAID,MAAM,CAACnC,MAAX,EAAmB;gBAClB,IAAImC,MAAM,CAACE,OAAX,EAAoB;kBACnBV,OAAO,CAACO,IAAR,CACE,GAAEJ,KAAM,IAAG/B,mBAAmB,CAACoC,MAAM,CAACnC,MAAR,CAAgB,IAC9CmC,MAAM,CAACE,OACP,EAHF;gBAKA,CAND,MAMO,IAAI,OAAOF,MAAM,CAACG,GAAd,KAAsB,QAA1B,EAAoC;kBAC1CX,OAAO,CAACO,IAAR,CACE,GAAEJ,KAAM,IAAG/B,mBAAmB,CAACoC,MAAM,CAACnC,MAAR,CAAgB,IAC9CmC,MAAM,CAACG,GACP,EAHF;gBAKA,CANM,MAMA,IACNH,MAAM,CAACG,GAAP,IACA,OAAOH,MAAM,CAACG,GAAd,KAAsB,QADtB,IAEA,WAAWH,MAAM,CAACG,GAHZ,EAIL;kBACDX,OAAO,CAACO,IAAR,CACE,GAAEJ,KAAM,IAAG/B,mBAAmB,CAC9BoC,MAAM,CAACnC,MADuB,CAE7B,IAAGuC,IAAI,CAACC,SAAL,CAAeL,MAAM,CAACG,GAAP,CAAWG,KAA1B,CAAiC,EAHvC;gBAKA;cACD;YACD;UACD;QACD;;QACD,OAAOd,OAAP;MACA,CAtCD;;MAwCAxB,WAAW,CAACD,KAAZ,CAAkBwC,YAAlB,CAA+BtC,GAA/B,CACC,iBADD;MAEC;AACJ;AACA;AACA;AACA;MACI,CAAC2B,MAAD,EAASxB,OAAT,KAAqB;QACpB,IAAI,CAACA,OAAO,CAACwB,MAAb,EAAqBxB,OAAO,CAACwB,MAAR,GAAiB,EAAjB;QACrB,IAAI,CAACxB,OAAO,CAACwB,MAAR,CAAeY,MAApB,EAA4BpC,OAAO,CAACwB,MAAR,CAAeY,MAAf,GAAwB,EAAxB;QAC5B,IAAI,CAACpC,OAAO,CAACwB,MAAR,CAAea,QAApB,EAA8BrC,OAAO,CAACwB,MAAR,CAAea,QAAf,GAA0B,EAA1B;QAC9B;;QACA,MAAMlC,OAAO,GAAG,IAAIC,GAAJ,EAAhB;;QACA,KAAK,MAAMe,KAAX,IAAoBK,MAApB,EAA4B;UAC3B,IAAI,OAAOL,KAAK,CAACP,EAAb,KAAoB,QAAxB,EAAkC;UAClC,MAAMc,IAAI,GAAGP,KAAK,CAACO,IAAnB;UACA,IAAIA,IAAJ,EAAU1B,OAAO,CAACwB,MAAR,CAAeY,MAAf,CAAsBV,IAAtB,IAA8BP,KAAK,CAACP,EAApC;UACV,MAAMQ,OAAO,GAAGF,eAAe,CAACC,KAAD,CAA/B;;UACA,KAAK,MAAMmB,MAAX,IAAqBlB,OAArB,EAA8B;YAC7BpB,OAAO,CAACwB,MAAR,CAAea,QAAf,CAAwBC,MAAxB,IAAkCnB,KAAK,CAACP,EAAxC;UACA;;UACDT,OAAO,CAACI,GAAR,CAAYY,KAAK,CAACP,EAAlB;QACA;;QACDZ,OAAO,CAACwB,MAAR,CAAerB,OAAf,GAAyBK,KAAK,CAACC,IAAN,CAAWN,OAAX,EAAoBO,IAApB,CAAyB/B,cAAzB,CAAzB;MACA,CAxBF;MA0BAiB,WAAW,CAACD,KAAZ,CAAkB4C,YAAlB,CAA+B1C,GAA/B,CACC,iBADD;MAEC;AACJ;AACA;AACA;AACA;MACI,CAAC2B,MAAD,EAASxB,OAAT,KAAqB;QACpB,IAAI,CAACA,OAAO,CAACwB,MAAb,EAAqB;QACrB;;QACA,MAAMrB,OAAO,GAAG,IAAIC,GAAJ,EAAhB;;QACA,IAAIJ,OAAO,CAACwB,MAAR,CAAeY,MAAnB,EAA2B;UAC1B,KAAK,MAAMjB,KAAX,IAAoBK,MAApB,EAA4B;YAC3B,IAAIL,KAAK,CAACP,EAAN,KAAa,IAAjB,EAAuB;YACvB,IAAI,CAACO,KAAK,CAACO,IAAX,EAAiB;YACjB,MAAMd,EAAE,GAAGZ,OAAO,CAACwB,MAAR,CAAeY,MAAf,CAAsBjB,KAAK,CAACO,IAA5B,CAAX;YACA,IAAId,EAAE,KAAKC,SAAX,EAAsB;YACtB,IAAIV,OAAO,CAACW,GAAR,CAAYF,EAAZ,CAAJ,EAAqB;YACrBT,OAAO,CAACI,GAAR,CAAYK,EAAZ;YACAO,KAAK,CAACP,EAAN,GAAWA,EAAX;YACAO,KAAK,CAACqB,GAAN,GAAY,CAAC5B,EAAD,CAAZ;UACA;QACD;;QACD,IAAIZ,OAAO,CAACwB,MAAR,CAAea,QAAnB,EAA6B;UAC5B,KAAK,MAAMlB,KAAX,IAAoBK,MAApB,EAA4B;YAC3B,IAAIL,KAAK,CAACP,EAAN,KAAa,IAAjB,EAAuB;YACvB,MAAMQ,OAAO,GAAGF,eAAe,CAACC,KAAD,CAA/B;;YACA,KAAK,MAAMmB,MAAX,IAAqBlB,OAArB,EAA8B;cAC7B,MAAMR,EAAE,GAAGZ,OAAO,CAACwB,MAAR,CAAea,QAAf,CAAwBC,MAAxB,CAAX;cACA,IAAI1B,EAAE,KAAKC,SAAX,EAAsB;cACtB,IAAIV,OAAO,CAACW,GAAR,CAAYF,EAAZ,CAAJ,EAAqB;cACrBT,OAAO,CAACI,GAAR,CAAYK,EAAZ;cACAO,KAAK,CAACP,EAAN,GAAWA,EAAX;cACAO,KAAK,CAACqB,GAAN,GAAY,CAAC5B,EAAD,CAAZ;cACA;YACA;UACD;QACD;;QACD,IAAIJ,KAAK,CAACQ,OAAN,CAAchB,OAAO,CAACwB,MAAR,CAAerB,OAA7B,CAAJ,EAA2C;UAC1CP,WAAW,CAAC6C,YAAZ,GAA2B,IAAIrC,GAAJ,CAAQJ,OAAO,CAACwB,MAAR,CAAerB,OAAvB,CAA3B;QACA;MACD,CAzCF;IA2CA,CAvKD;EAwKA;;AAzMoB;;AA2MtBV,MAAM,CAACiD,OAAP,GAAiB5D,eAAjB"},"metadata":{},"sourceType":"script"}