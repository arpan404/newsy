{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n*/\n\"use strict\";\n\nconst {\n  Tracer\n} = require(\"chrome-trace-event\");\n\nconst createSchemaValidation = require(\"../util/create-schema-validation\");\n\nconst {\n  dirname,\n  mkdirpSync\n} = require(\"../util/fs\");\n/** @typedef {import(\"../../declarations/plugins/debug/ProfilingPlugin\").ProfilingPluginOptions} ProfilingPluginOptions */\n\n/** @typedef {import(\"../util/fs\").IntermediateFileSystem} IntermediateFileSystem */\n\n\nconst validate = createSchemaValidation(require(\"../../schemas/plugins/debug/ProfilingPlugin.check.js\"), () => require(\"../../schemas/plugins/debug/ProfilingPlugin.json\"), {\n  name: \"Profiling Plugin\",\n  baseDataPath: \"options\"\n});\nlet inspector = undefined;\n\ntry {\n  // eslint-disable-next-line node/no-unsupported-features/node-builtins\n  inspector = require(\"inspector\");\n} catch (e) {\n  console.log(\"Unable to CPU profile in < node 8.0\");\n}\n\nclass Profiler {\n  constructor(inspector) {\n    this.session = undefined;\n    this.inspector = inspector;\n    this._startTime = 0;\n  }\n\n  hasSession() {\n    return this.session !== undefined;\n  }\n\n  startProfiling() {\n    if (this.inspector === undefined) {\n      return Promise.resolve();\n    }\n\n    try {\n      this.session = new inspector.Session();\n      this.session.connect();\n    } catch (_) {\n      this.session = undefined;\n      return Promise.resolve();\n    }\n\n    const hrtime = process.hrtime();\n    this._startTime = hrtime[0] * 1000000 + Math.round(hrtime[1] / 1000);\n    return Promise.all([this.sendCommand(\"Profiler.setSamplingInterval\", {\n      interval: 100\n    }), this.sendCommand(\"Profiler.enable\"), this.sendCommand(\"Profiler.start\")]);\n  }\n\n  sendCommand(method, params) {\n    if (this.hasSession()) {\n      return new Promise((res, rej) => {\n        return this.session.post(method, params, (err, params) => {\n          if (err !== null) {\n            rej(err);\n          } else {\n            res(params);\n          }\n        });\n      });\n    } else {\n      return Promise.resolve();\n    }\n  }\n\n  destroy() {\n    if (this.hasSession()) {\n      this.session.disconnect();\n    }\n\n    return Promise.resolve();\n  }\n\n  stopProfiling() {\n    return this.sendCommand(\"Profiler.stop\").then(_ref => {\n      let {\n        profile\n      } = _ref;\n      const hrtime = process.hrtime();\n      const endTime = hrtime[0] * 1000000 + Math.round(hrtime[1] / 1000);\n\n      if (profile.startTime < this._startTime || profile.endTime > endTime) {\n        // In some cases timestamps mismatch and we need to adjust them\n        // Both process.hrtime and the inspector timestamps claim to be relative\n        // to a unknown point in time. But they do not guarantee that this is the\n        // same point in time.\n        const duration = profile.endTime - profile.startTime;\n        const ownDuration = endTime - this._startTime;\n        const untracked = Math.max(0, ownDuration - duration);\n        profile.startTime = this._startTime + untracked / 2;\n        profile.endTime = endTime - untracked / 2;\n      }\n\n      return {\n        profile\n      };\n    });\n  }\n\n}\n/**\n * an object that wraps Tracer and Profiler with a counter\n * @typedef {Object} Trace\n * @property {Tracer} trace instance of Tracer\n * @property {number} counter Counter\n * @property {Profiler} profiler instance of Profiler\n * @property {Function} end the end function\n */\n\n/**\n * @param {IntermediateFileSystem} fs filesystem used for output\n * @param {string} outputPath The location where to write the log.\n * @returns {Trace} The trace object\n */\n\n\nconst createTrace = (fs, outputPath) => {\n  const trace = new Tracer();\n  const profiler = new Profiler(inspector);\n\n  if (/\\/|\\\\/.test(outputPath)) {\n    const dirPath = dirname(fs, outputPath);\n    mkdirpSync(fs, dirPath);\n  }\n\n  const fsStream = fs.createWriteStream(outputPath);\n  let counter = 0;\n  trace.pipe(fsStream); // These are critical events that need to be inserted so that tools like\n  // chrome dev tools can load the profile.\n\n  trace.instantEvent({\n    name: \"TracingStartedInPage\",\n    id: ++counter,\n    cat: [\"disabled-by-default-devtools.timeline\"],\n    args: {\n      data: {\n        sessionId: \"-1\",\n        page: \"0xfff\",\n        frames: [{\n          frame: \"0xfff\",\n          url: \"webpack\",\n          name: \"\"\n        }]\n      }\n    }\n  });\n  trace.instantEvent({\n    name: \"TracingStartedInBrowser\",\n    id: ++counter,\n    cat: [\"disabled-by-default-devtools.timeline\"],\n    args: {\n      data: {\n        sessionId: \"-1\"\n      }\n    }\n  });\n  return {\n    trace,\n    counter,\n    profiler,\n    end: callback => {\n      trace.push(\"]\"); // Wait until the write stream finishes.\n\n      fsStream.on(\"close\", () => {\n        callback();\n      }); // Tear down the readable trace stream.\n\n      trace.push(null);\n    }\n  };\n};\n\nconst pluginName = \"ProfilingPlugin\";\n\nclass ProfilingPlugin {\n  /**\n   * @param {ProfilingPluginOptions=} options options object\n   */\n  constructor() {\n    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    validate(options);\n    this.outputPath = options.outputPath || \"events.json\";\n  }\n\n  apply(compiler) {\n    const tracer = createTrace(compiler.intermediateFileSystem, this.outputPath);\n    tracer.profiler.startProfiling(); // Compiler Hooks\n\n    Object.keys(compiler.hooks).forEach(hookName => {\n      const hook = compiler.hooks[hookName];\n\n      if (hook) {\n        hook.intercept(makeInterceptorFor(\"Compiler\", tracer)(hookName));\n      }\n    });\n    Object.keys(compiler.resolverFactory.hooks).forEach(hookName => {\n      const hook = compiler.resolverFactory.hooks[hookName];\n\n      if (hook) {\n        hook.intercept(makeInterceptorFor(\"Resolver\", tracer)(hookName));\n      }\n    });\n    compiler.hooks.compilation.tap(pluginName, (compilation, _ref2) => {\n      let {\n        normalModuleFactory,\n        contextModuleFactory\n      } = _ref2;\n      interceptAllHooksFor(compilation, tracer, \"Compilation\");\n      interceptAllHooksFor(normalModuleFactory, tracer, \"Normal Module Factory\");\n      interceptAllHooksFor(contextModuleFactory, tracer, \"Context Module Factory\");\n      interceptAllParserHooks(normalModuleFactory, tracer);\n      interceptAllJavascriptModulesPluginHooks(compilation, tracer);\n    }); // We need to write out the CPU profile when we are all done.\n\n    compiler.hooks.done.tapAsync({\n      name: pluginName,\n      stage: Infinity\n    }, (stats, callback) => {\n      if (compiler.watchMode) return callback();\n      tracer.profiler.stopProfiling().then(parsedResults => {\n        if (parsedResults === undefined) {\n          tracer.profiler.destroy();\n          tracer.end(callback);\n          return;\n        }\n\n        const cpuStartTime = parsedResults.profile.startTime;\n        const cpuEndTime = parsedResults.profile.endTime;\n        tracer.trace.completeEvent({\n          name: \"TaskQueueManager::ProcessTaskFromWorkQueue\",\n          id: ++tracer.counter,\n          cat: [\"toplevel\"],\n          ts: cpuStartTime,\n          args: {\n            src_file: \"../../ipc/ipc_moji_bootstrap.cc\",\n            src_func: \"Accept\"\n          }\n        });\n        tracer.trace.completeEvent({\n          name: \"EvaluateScript\",\n          id: ++tracer.counter,\n          cat: [\"devtools.timeline\"],\n          ts: cpuStartTime,\n          dur: cpuEndTime - cpuStartTime,\n          args: {\n            data: {\n              url: \"webpack\",\n              lineNumber: 1,\n              columnNumber: 1,\n              frame: \"0xFFF\"\n            }\n          }\n        });\n        tracer.trace.instantEvent({\n          name: \"CpuProfile\",\n          id: ++tracer.counter,\n          cat: [\"disabled-by-default-devtools.timeline\"],\n          ts: cpuEndTime,\n          args: {\n            data: {\n              cpuProfile: parsedResults.profile\n            }\n          }\n        });\n        tracer.profiler.destroy();\n        tracer.end(callback);\n      });\n    });\n  }\n\n}\n\nconst interceptAllHooksFor = (instance, tracer, logLabel) => {\n  if (Reflect.has(instance, \"hooks\")) {\n    Object.keys(instance.hooks).forEach(hookName => {\n      const hook = instance.hooks[hookName];\n\n      if (hook && !hook._fakeHook) {\n        hook.intercept(makeInterceptorFor(logLabel, tracer)(hookName));\n      }\n    });\n  }\n};\n\nconst interceptAllParserHooks = (moduleFactory, tracer) => {\n  const moduleTypes = [\"javascript/auto\", \"javascript/dynamic\", \"javascript/esm\", \"json\", \"webassembly/async\", \"webassembly/sync\"];\n  moduleTypes.forEach(moduleType => {\n    moduleFactory.hooks.parser.for(moduleType).tap(\"ProfilingPlugin\", (parser, parserOpts) => {\n      interceptAllHooksFor(parser, tracer, \"Parser\");\n    });\n  });\n};\n\nconst interceptAllJavascriptModulesPluginHooks = (compilation, tracer) => {\n  interceptAllHooksFor({\n    hooks: require(\"../javascript/JavascriptModulesPlugin\").getCompilationHooks(compilation)\n  }, tracer, \"JavascriptModulesPlugin\");\n};\n\nconst makeInterceptorFor = (instance, tracer) => hookName => ({\n  register: tapInfo => {\n    const {\n      name,\n      type,\n      fn\n    } = tapInfo;\n    const newFn = // Don't tap our own hooks to ensure stream can close cleanly\n    name === pluginName ? fn : makeNewProfiledTapFn(hookName, tracer, {\n      name,\n      type,\n      fn\n    });\n    return { ...tapInfo,\n      fn: newFn\n    };\n  }\n}); // TODO improve typing\n\n/** @typedef {(...args: TODO[]) => void | Promise<TODO>} PluginFunction */\n\n/**\n * @param {string} hookName Name of the hook to profile.\n * @param {Trace} tracer The trace object.\n * @param {object} options Options for the profiled fn.\n * @param {string} options.name Plugin name\n * @param {string} options.type Plugin type (sync | async | promise)\n * @param {PluginFunction} options.fn Plugin function\n * @returns {PluginFunction} Chainable hooked function.\n */\n\n\nconst makeNewProfiledTapFn = (hookName, tracer, _ref3) => {\n  let {\n    name,\n    type,\n    fn\n  } = _ref3;\n  const defaultCategory = [\"blink.user_timing\"];\n\n  switch (type) {\n    case \"promise\":\n      return function () {\n        const id = ++tracer.counter;\n        tracer.trace.begin({\n          name,\n          id,\n          cat: defaultCategory\n        });\n        const promise =\n        /** @type {Promise<*>} */\n        fn(...arguments);\n        return promise.then(r => {\n          tracer.trace.end({\n            name,\n            id,\n            cat: defaultCategory\n          });\n          return r;\n        });\n      };\n\n    case \"async\":\n      return function () {\n        const id = ++tracer.counter;\n        tracer.trace.begin({\n          name,\n          id,\n          cat: defaultCategory\n        });\n\n        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n          args[_key] = arguments[_key];\n        }\n\n        const callback = args.pop();\n        fn(...args, function () {\n          tracer.trace.end({\n            name,\n            id,\n            cat: defaultCategory\n          });\n          callback(...arguments);\n        });\n      };\n\n    case \"sync\":\n      return function () {\n        const id = ++tracer.counter; // Do not instrument ourself due to the CPU\n        // profile needing to be the last event in the trace.\n\n        if (name === pluginName) {\n          return fn(...arguments);\n        }\n\n        tracer.trace.begin({\n          name,\n          id,\n          cat: defaultCategory\n        });\n        let r;\n\n        try {\n          r = fn(...arguments);\n        } catch (error) {\n          tracer.trace.end({\n            name,\n            id,\n            cat: defaultCategory\n          });\n          throw error;\n        }\n\n        tracer.trace.end({\n          name,\n          id,\n          cat: defaultCategory\n        });\n        return r;\n      };\n\n    default:\n      break;\n  }\n};\n\nmodule.exports = ProfilingPlugin;\nmodule.exports.Profiler = Profiler;","map":{"version":3,"names":["Tracer","require","createSchemaValidation","dirname","mkdirpSync","validate","name","baseDataPath","inspector","undefined","e","console","log","Profiler","constructor","session","_startTime","hasSession","startProfiling","Promise","resolve","Session","connect","_","hrtime","process","Math","round","all","sendCommand","interval","method","params","res","rej","post","err","destroy","disconnect","stopProfiling","then","profile","endTime","startTime","duration","ownDuration","untracked","max","createTrace","fs","outputPath","trace","profiler","test","dirPath","fsStream","createWriteStream","counter","pipe","instantEvent","id","cat","args","data","sessionId","page","frames","frame","url","end","callback","push","on","pluginName","ProfilingPlugin","options","apply","compiler","tracer","intermediateFileSystem","Object","keys","hooks","forEach","hookName","hook","intercept","makeInterceptorFor","resolverFactory","compilation","tap","normalModuleFactory","contextModuleFactory","interceptAllHooksFor","interceptAllParserHooks","interceptAllJavascriptModulesPluginHooks","done","tapAsync","stage","Infinity","stats","watchMode","parsedResults","cpuStartTime","cpuEndTime","completeEvent","ts","src_file","src_func","dur","lineNumber","columnNumber","cpuProfile","instance","logLabel","Reflect","has","_fakeHook","moduleFactory","moduleTypes","moduleType","parser","for","parserOpts","getCompilationHooks","register","tapInfo","type","fn","newFn","makeNewProfiledTapFn","defaultCategory","begin","promise","r","pop","error","module","exports"],"sources":["/Users/arpanbhandari/Documents/cod-ing/React/newsapp/node_modules/webpack/lib/debug/ProfilingPlugin.js"],"sourcesContent":["/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n*/\n\n\"use strict\";\n\nconst { Tracer } = require(\"chrome-trace-event\");\nconst createSchemaValidation = require(\"../util/create-schema-validation\");\nconst { dirname, mkdirpSync } = require(\"../util/fs\");\n\n/** @typedef {import(\"../../declarations/plugins/debug/ProfilingPlugin\").ProfilingPluginOptions} ProfilingPluginOptions */\n/** @typedef {import(\"../util/fs\").IntermediateFileSystem} IntermediateFileSystem */\n\nconst validate = createSchemaValidation(\n\trequire(\"../../schemas/plugins/debug/ProfilingPlugin.check.js\"),\n\t() => require(\"../../schemas/plugins/debug/ProfilingPlugin.json\"),\n\t{\n\t\tname: \"Profiling Plugin\",\n\t\tbaseDataPath: \"options\"\n\t}\n);\nlet inspector = undefined;\n\ntry {\n\t// eslint-disable-next-line node/no-unsupported-features/node-builtins\n\tinspector = require(\"inspector\");\n} catch (e) {\n\tconsole.log(\"Unable to CPU profile in < node 8.0\");\n}\n\nclass Profiler {\n\tconstructor(inspector) {\n\t\tthis.session = undefined;\n\t\tthis.inspector = inspector;\n\t\tthis._startTime = 0;\n\t}\n\n\thasSession() {\n\t\treturn this.session !== undefined;\n\t}\n\n\tstartProfiling() {\n\t\tif (this.inspector === undefined) {\n\t\t\treturn Promise.resolve();\n\t\t}\n\n\t\ttry {\n\t\t\tthis.session = new inspector.Session();\n\t\t\tthis.session.connect();\n\t\t} catch (_) {\n\t\t\tthis.session = undefined;\n\t\t\treturn Promise.resolve();\n\t\t}\n\n\t\tconst hrtime = process.hrtime();\n\t\tthis._startTime = hrtime[0] * 1000000 + Math.round(hrtime[1] / 1000);\n\n\t\treturn Promise.all([\n\t\t\tthis.sendCommand(\"Profiler.setSamplingInterval\", {\n\t\t\t\tinterval: 100\n\t\t\t}),\n\t\t\tthis.sendCommand(\"Profiler.enable\"),\n\t\t\tthis.sendCommand(\"Profiler.start\")\n\t\t]);\n\t}\n\n\tsendCommand(method, params) {\n\t\tif (this.hasSession()) {\n\t\t\treturn new Promise((res, rej) => {\n\t\t\t\treturn this.session.post(method, params, (err, params) => {\n\t\t\t\t\tif (err !== null) {\n\t\t\t\t\t\trej(err);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tres(params);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t});\n\t\t} else {\n\t\t\treturn Promise.resolve();\n\t\t}\n\t}\n\n\tdestroy() {\n\t\tif (this.hasSession()) {\n\t\t\tthis.session.disconnect();\n\t\t}\n\n\t\treturn Promise.resolve();\n\t}\n\n\tstopProfiling() {\n\t\treturn this.sendCommand(\"Profiler.stop\").then(({ profile }) => {\n\t\t\tconst hrtime = process.hrtime();\n\t\t\tconst endTime = hrtime[0] * 1000000 + Math.round(hrtime[1] / 1000);\n\t\t\tif (profile.startTime < this._startTime || profile.endTime > endTime) {\n\t\t\t\t// In some cases timestamps mismatch and we need to adjust them\n\t\t\t\t// Both process.hrtime and the inspector timestamps claim to be relative\n\t\t\t\t// to a unknown point in time. But they do not guarantee that this is the\n\t\t\t\t// same point in time.\n\t\t\t\tconst duration = profile.endTime - profile.startTime;\n\t\t\t\tconst ownDuration = endTime - this._startTime;\n\t\t\t\tconst untracked = Math.max(0, ownDuration - duration);\n\t\t\t\tprofile.startTime = this._startTime + untracked / 2;\n\t\t\t\tprofile.endTime = endTime - untracked / 2;\n\t\t\t}\n\t\t\treturn { profile };\n\t\t});\n\t}\n}\n\n/**\n * an object that wraps Tracer and Profiler with a counter\n * @typedef {Object} Trace\n * @property {Tracer} trace instance of Tracer\n * @property {number} counter Counter\n * @property {Profiler} profiler instance of Profiler\n * @property {Function} end the end function\n */\n\n/**\n * @param {IntermediateFileSystem} fs filesystem used for output\n * @param {string} outputPath The location where to write the log.\n * @returns {Trace} The trace object\n */\nconst createTrace = (fs, outputPath) => {\n\tconst trace = new Tracer();\n\tconst profiler = new Profiler(inspector);\n\tif (/\\/|\\\\/.test(outputPath)) {\n\t\tconst dirPath = dirname(fs, outputPath);\n\t\tmkdirpSync(fs, dirPath);\n\t}\n\tconst fsStream = fs.createWriteStream(outputPath);\n\n\tlet counter = 0;\n\n\ttrace.pipe(fsStream);\n\t// These are critical events that need to be inserted so that tools like\n\t// chrome dev tools can load the profile.\n\ttrace.instantEvent({\n\t\tname: \"TracingStartedInPage\",\n\t\tid: ++counter,\n\t\tcat: [\"disabled-by-default-devtools.timeline\"],\n\t\targs: {\n\t\t\tdata: {\n\t\t\t\tsessionId: \"-1\",\n\t\t\t\tpage: \"0xfff\",\n\t\t\t\tframes: [\n\t\t\t\t\t{\n\t\t\t\t\t\tframe: \"0xfff\",\n\t\t\t\t\t\turl: \"webpack\",\n\t\t\t\t\t\tname: \"\"\n\t\t\t\t\t}\n\t\t\t\t]\n\t\t\t}\n\t\t}\n\t});\n\n\ttrace.instantEvent({\n\t\tname: \"TracingStartedInBrowser\",\n\t\tid: ++counter,\n\t\tcat: [\"disabled-by-default-devtools.timeline\"],\n\t\targs: {\n\t\t\tdata: {\n\t\t\t\tsessionId: \"-1\"\n\t\t\t}\n\t\t}\n\t});\n\n\treturn {\n\t\ttrace,\n\t\tcounter,\n\t\tprofiler,\n\t\tend: callback => {\n\t\t\ttrace.push(\"]\");\n\t\t\t// Wait until the write stream finishes.\n\t\t\tfsStream.on(\"close\", () => {\n\t\t\t\tcallback();\n\t\t\t});\n\t\t\t// Tear down the readable trace stream.\n\t\t\ttrace.push(null);\n\t\t}\n\t};\n};\n\nconst pluginName = \"ProfilingPlugin\";\n\nclass ProfilingPlugin {\n\t/**\n\t * @param {ProfilingPluginOptions=} options options object\n\t */\n\tconstructor(options = {}) {\n\t\tvalidate(options);\n\t\tthis.outputPath = options.outputPath || \"events.json\";\n\t}\n\n\tapply(compiler) {\n\t\tconst tracer = createTrace(\n\t\t\tcompiler.intermediateFileSystem,\n\t\t\tthis.outputPath\n\t\t);\n\t\ttracer.profiler.startProfiling();\n\n\t\t// Compiler Hooks\n\t\tObject.keys(compiler.hooks).forEach(hookName => {\n\t\t\tconst hook = compiler.hooks[hookName];\n\t\t\tif (hook) {\n\t\t\t\thook.intercept(makeInterceptorFor(\"Compiler\", tracer)(hookName));\n\t\t\t}\n\t\t});\n\n\t\tObject.keys(compiler.resolverFactory.hooks).forEach(hookName => {\n\t\t\tconst hook = compiler.resolverFactory.hooks[hookName];\n\t\t\tif (hook) {\n\t\t\t\thook.intercept(makeInterceptorFor(\"Resolver\", tracer)(hookName));\n\t\t\t}\n\t\t});\n\n\t\tcompiler.hooks.compilation.tap(\n\t\t\tpluginName,\n\t\t\t(compilation, { normalModuleFactory, contextModuleFactory }) => {\n\t\t\t\tinterceptAllHooksFor(compilation, tracer, \"Compilation\");\n\t\t\t\tinterceptAllHooksFor(\n\t\t\t\t\tnormalModuleFactory,\n\t\t\t\t\ttracer,\n\t\t\t\t\t\"Normal Module Factory\"\n\t\t\t\t);\n\t\t\t\tinterceptAllHooksFor(\n\t\t\t\t\tcontextModuleFactory,\n\t\t\t\t\ttracer,\n\t\t\t\t\t\"Context Module Factory\"\n\t\t\t\t);\n\t\t\t\tinterceptAllParserHooks(normalModuleFactory, tracer);\n\t\t\t\tinterceptAllJavascriptModulesPluginHooks(compilation, tracer);\n\t\t\t}\n\t\t);\n\n\t\t// We need to write out the CPU profile when we are all done.\n\t\tcompiler.hooks.done.tapAsync(\n\t\t\t{\n\t\t\t\tname: pluginName,\n\t\t\t\tstage: Infinity\n\t\t\t},\n\t\t\t(stats, callback) => {\n\t\t\t\tif (compiler.watchMode) return callback();\n\t\t\t\ttracer.profiler.stopProfiling().then(parsedResults => {\n\t\t\t\t\tif (parsedResults === undefined) {\n\t\t\t\t\t\ttracer.profiler.destroy();\n\t\t\t\t\t\ttracer.end(callback);\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tconst cpuStartTime = parsedResults.profile.startTime;\n\t\t\t\t\tconst cpuEndTime = parsedResults.profile.endTime;\n\n\t\t\t\t\ttracer.trace.completeEvent({\n\t\t\t\t\t\tname: \"TaskQueueManager::ProcessTaskFromWorkQueue\",\n\t\t\t\t\t\tid: ++tracer.counter,\n\t\t\t\t\t\tcat: [\"toplevel\"],\n\t\t\t\t\t\tts: cpuStartTime,\n\t\t\t\t\t\targs: {\n\t\t\t\t\t\t\tsrc_file: \"../../ipc/ipc_moji_bootstrap.cc\",\n\t\t\t\t\t\t\tsrc_func: \"Accept\"\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\n\t\t\t\t\ttracer.trace.completeEvent({\n\t\t\t\t\t\tname: \"EvaluateScript\",\n\t\t\t\t\t\tid: ++tracer.counter,\n\t\t\t\t\t\tcat: [\"devtools.timeline\"],\n\t\t\t\t\t\tts: cpuStartTime,\n\t\t\t\t\t\tdur: cpuEndTime - cpuStartTime,\n\t\t\t\t\t\targs: {\n\t\t\t\t\t\t\tdata: {\n\t\t\t\t\t\t\t\turl: \"webpack\",\n\t\t\t\t\t\t\t\tlineNumber: 1,\n\t\t\t\t\t\t\t\tcolumnNumber: 1,\n\t\t\t\t\t\t\t\tframe: \"0xFFF\"\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\n\t\t\t\t\ttracer.trace.instantEvent({\n\t\t\t\t\t\tname: \"CpuProfile\",\n\t\t\t\t\t\tid: ++tracer.counter,\n\t\t\t\t\t\tcat: [\"disabled-by-default-devtools.timeline\"],\n\t\t\t\t\t\tts: cpuEndTime,\n\t\t\t\t\t\targs: {\n\t\t\t\t\t\t\tdata: {\n\t\t\t\t\t\t\t\tcpuProfile: parsedResults.profile\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\n\t\t\t\t\ttracer.profiler.destroy();\n\t\t\t\t\ttracer.end(callback);\n\t\t\t\t});\n\t\t\t}\n\t\t);\n\t}\n}\n\nconst interceptAllHooksFor = (instance, tracer, logLabel) => {\n\tif (Reflect.has(instance, \"hooks\")) {\n\t\tObject.keys(instance.hooks).forEach(hookName => {\n\t\t\tconst hook = instance.hooks[hookName];\n\t\t\tif (hook && !hook._fakeHook) {\n\t\t\t\thook.intercept(makeInterceptorFor(logLabel, tracer)(hookName));\n\t\t\t}\n\t\t});\n\t}\n};\n\nconst interceptAllParserHooks = (moduleFactory, tracer) => {\n\tconst moduleTypes = [\n\t\t\"javascript/auto\",\n\t\t\"javascript/dynamic\",\n\t\t\"javascript/esm\",\n\t\t\"json\",\n\t\t\"webassembly/async\",\n\t\t\"webassembly/sync\"\n\t];\n\n\tmoduleTypes.forEach(moduleType => {\n\t\tmoduleFactory.hooks.parser\n\t\t\t.for(moduleType)\n\t\t\t.tap(\"ProfilingPlugin\", (parser, parserOpts) => {\n\t\t\t\tinterceptAllHooksFor(parser, tracer, \"Parser\");\n\t\t\t});\n\t});\n};\n\nconst interceptAllJavascriptModulesPluginHooks = (compilation, tracer) => {\n\tinterceptAllHooksFor(\n\t\t{\n\t\t\thooks:\n\t\t\t\trequire(\"../javascript/JavascriptModulesPlugin\").getCompilationHooks(\n\t\t\t\t\tcompilation\n\t\t\t\t)\n\t\t},\n\t\ttracer,\n\t\t\"JavascriptModulesPlugin\"\n\t);\n};\n\nconst makeInterceptorFor = (instance, tracer) => hookName => ({\n\tregister: tapInfo => {\n\t\tconst { name, type, fn } = tapInfo;\n\t\tconst newFn =\n\t\t\t// Don't tap our own hooks to ensure stream can close cleanly\n\t\t\tname === pluginName\n\t\t\t\t? fn\n\t\t\t\t: makeNewProfiledTapFn(hookName, tracer, {\n\t\t\t\t\t\tname,\n\t\t\t\t\t\ttype,\n\t\t\t\t\t\tfn\n\t\t\t\t  });\n\t\treturn {\n\t\t\t...tapInfo,\n\t\t\tfn: newFn\n\t\t};\n\t}\n});\n\n// TODO improve typing\n/** @typedef {(...args: TODO[]) => void | Promise<TODO>} PluginFunction */\n\n/**\n * @param {string} hookName Name of the hook to profile.\n * @param {Trace} tracer The trace object.\n * @param {object} options Options for the profiled fn.\n * @param {string} options.name Plugin name\n * @param {string} options.type Plugin type (sync | async | promise)\n * @param {PluginFunction} options.fn Plugin function\n * @returns {PluginFunction} Chainable hooked function.\n */\nconst makeNewProfiledTapFn = (hookName, tracer, { name, type, fn }) => {\n\tconst defaultCategory = [\"blink.user_timing\"];\n\n\tswitch (type) {\n\t\tcase \"promise\":\n\t\t\treturn (...args) => {\n\t\t\t\tconst id = ++tracer.counter;\n\t\t\t\ttracer.trace.begin({\n\t\t\t\t\tname,\n\t\t\t\t\tid,\n\t\t\t\t\tcat: defaultCategory\n\t\t\t\t});\n\t\t\t\tconst promise = /** @type {Promise<*>} */ (fn(...args));\n\t\t\t\treturn promise.then(r => {\n\t\t\t\t\ttracer.trace.end({\n\t\t\t\t\t\tname,\n\t\t\t\t\t\tid,\n\t\t\t\t\t\tcat: defaultCategory\n\t\t\t\t\t});\n\t\t\t\t\treturn r;\n\t\t\t\t});\n\t\t\t};\n\t\tcase \"async\":\n\t\t\treturn (...args) => {\n\t\t\t\tconst id = ++tracer.counter;\n\t\t\t\ttracer.trace.begin({\n\t\t\t\t\tname,\n\t\t\t\t\tid,\n\t\t\t\t\tcat: defaultCategory\n\t\t\t\t});\n\t\t\t\tconst callback = args.pop();\n\t\t\t\tfn(...args, (...r) => {\n\t\t\t\t\ttracer.trace.end({\n\t\t\t\t\t\tname,\n\t\t\t\t\t\tid,\n\t\t\t\t\t\tcat: defaultCategory\n\t\t\t\t\t});\n\t\t\t\t\tcallback(...r);\n\t\t\t\t});\n\t\t\t};\n\t\tcase \"sync\":\n\t\t\treturn (...args) => {\n\t\t\t\tconst id = ++tracer.counter;\n\t\t\t\t// Do not instrument ourself due to the CPU\n\t\t\t\t// profile needing to be the last event in the trace.\n\t\t\t\tif (name === pluginName) {\n\t\t\t\t\treturn fn(...args);\n\t\t\t\t}\n\n\t\t\t\ttracer.trace.begin({\n\t\t\t\t\tname,\n\t\t\t\t\tid,\n\t\t\t\t\tcat: defaultCategory\n\t\t\t\t});\n\t\t\t\tlet r;\n\t\t\t\ttry {\n\t\t\t\t\tr = fn(...args);\n\t\t\t\t} catch (error) {\n\t\t\t\t\ttracer.trace.end({\n\t\t\t\t\t\tname,\n\t\t\t\t\t\tid,\n\t\t\t\t\t\tcat: defaultCategory\n\t\t\t\t\t});\n\t\t\t\t\tthrow error;\n\t\t\t\t}\n\t\t\t\ttracer.trace.end({\n\t\t\t\t\tname,\n\t\t\t\t\tid,\n\t\t\t\t\tcat: defaultCategory\n\t\t\t\t});\n\t\t\t\treturn r;\n\t\t\t};\n\t\tdefault:\n\t\t\tbreak;\n\t}\n};\n\nmodule.exports = ProfilingPlugin;\nmodule.exports.Profiler = Profiler;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}