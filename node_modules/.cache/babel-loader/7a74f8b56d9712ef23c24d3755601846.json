{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nconst DependencyTemplate = require(\"../DependencyTemplate\");\n\nconst makeSerializable = require(\"../util/makeSerializable\");\n\nconst NullDependency = require(\"./NullDependency\");\n/** @typedef {import(\"webpack-sources\").ReplaceSource} ReplaceSource */\n\n/** @typedef {import(\"../Dependency\")} Dependency */\n\n/** @typedef {import(\"../DependencyTemplate\").DependencyTemplateContext} DependencyTemplateContext */\n\n\nclass AMDRequireArrayDependency extends NullDependency {\n  constructor(depsArray, range) {\n    super();\n    this.depsArray = depsArray;\n    this.range = range;\n  }\n\n  get type() {\n    return \"amd require array\";\n  }\n\n  get category() {\n    return \"amd\";\n  }\n\n  serialize(context) {\n    const {\n      write\n    } = context;\n    write(this.depsArray);\n    write(this.range);\n    super.serialize(context);\n  }\n\n  deserialize(context) {\n    const {\n      read\n    } = context;\n    this.depsArray = read();\n    this.range = read();\n    super.deserialize(context);\n  }\n\n}\n\nmakeSerializable(AMDRequireArrayDependency, \"webpack/lib/dependencies/AMDRequireArrayDependency\");\nAMDRequireArrayDependency.Template = class AMDRequireArrayDependencyTemplate extends DependencyTemplate {\n  /**\n   * @param {Dependency} dependency the dependency for which the template should be applied\n   * @param {ReplaceSource} source the current replace source which can be modified\n   * @param {DependencyTemplateContext} templateContext the context object\n   * @returns {void}\n   */\n  apply(dependency, source, templateContext) {\n    const dep =\n    /** @type {AMDRequireArrayDependency} */\n    dependency;\n    const content = this.getContent(dep, templateContext);\n    source.replace(dep.range[0], dep.range[1] - 1, content);\n  }\n\n  getContent(dep, templateContext) {\n    const requires = dep.depsArray.map(dependency => {\n      return this.contentForDependency(dependency, templateContext);\n    });\n    return `[${requires.join(\", \")}]`;\n  }\n\n  contentForDependency(dep, _ref) {\n    let {\n      runtimeTemplate,\n      moduleGraph,\n      chunkGraph,\n      runtimeRequirements\n    } = _ref;\n\n    if (typeof dep === \"string\") {\n      return dep;\n    }\n\n    if (dep.localModule) {\n      return dep.localModule.variableName();\n    } else {\n      return runtimeTemplate.moduleExports({\n        module: moduleGraph.getModule(dep),\n        chunkGraph,\n        request: dep.request,\n        runtimeRequirements\n      });\n    }\n  }\n\n};\nmodule.exports = AMDRequireArrayDependency;","map":{"version":3,"names":["DependencyTemplate","require","makeSerializable","NullDependency","AMDRequireArrayDependency","constructor","depsArray","range","type","category","serialize","context","write","deserialize","read","Template","AMDRequireArrayDependencyTemplate","apply","dependency","source","templateContext","dep","content","getContent","replace","requires","map","contentForDependency","join","runtimeTemplate","moduleGraph","chunkGraph","runtimeRequirements","localModule","variableName","moduleExports","module","getModule","request","exports"],"sources":["/Users/arpanbhandari/Documents/cod-ing/React/newsapp/node_modules/webpack/lib/dependencies/AMDRequireArrayDependency.js"],"sourcesContent":["/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\n\"use strict\";\n\nconst DependencyTemplate = require(\"../DependencyTemplate\");\nconst makeSerializable = require(\"../util/makeSerializable\");\nconst NullDependency = require(\"./NullDependency\");\n\n/** @typedef {import(\"webpack-sources\").ReplaceSource} ReplaceSource */\n/** @typedef {import(\"../Dependency\")} Dependency */\n/** @typedef {import(\"../DependencyTemplate\").DependencyTemplateContext} DependencyTemplateContext */\n\nclass AMDRequireArrayDependency extends NullDependency {\n\tconstructor(depsArray, range) {\n\t\tsuper();\n\n\t\tthis.depsArray = depsArray;\n\t\tthis.range = range;\n\t}\n\n\tget type() {\n\t\treturn \"amd require array\";\n\t}\n\n\tget category() {\n\t\treturn \"amd\";\n\t}\n\n\tserialize(context) {\n\t\tconst { write } = context;\n\n\t\twrite(this.depsArray);\n\t\twrite(this.range);\n\n\t\tsuper.serialize(context);\n\t}\n\n\tdeserialize(context) {\n\t\tconst { read } = context;\n\n\t\tthis.depsArray = read();\n\t\tthis.range = read();\n\n\t\tsuper.deserialize(context);\n\t}\n}\n\nmakeSerializable(\n\tAMDRequireArrayDependency,\n\t\"webpack/lib/dependencies/AMDRequireArrayDependency\"\n);\n\nAMDRequireArrayDependency.Template = class AMDRequireArrayDependencyTemplate extends (\n\tDependencyTemplate\n) {\n\t/**\n\t * @param {Dependency} dependency the dependency for which the template should be applied\n\t * @param {ReplaceSource} source the current replace source which can be modified\n\t * @param {DependencyTemplateContext} templateContext the context object\n\t * @returns {void}\n\t */\n\tapply(dependency, source, templateContext) {\n\t\tconst dep = /** @type {AMDRequireArrayDependency} */ (dependency);\n\t\tconst content = this.getContent(dep, templateContext);\n\t\tsource.replace(dep.range[0], dep.range[1] - 1, content);\n\t}\n\n\tgetContent(dep, templateContext) {\n\t\tconst requires = dep.depsArray.map(dependency => {\n\t\t\treturn this.contentForDependency(dependency, templateContext);\n\t\t});\n\t\treturn `[${requires.join(\", \")}]`;\n\t}\n\n\tcontentForDependency(\n\t\tdep,\n\t\t{ runtimeTemplate, moduleGraph, chunkGraph, runtimeRequirements }\n\t) {\n\t\tif (typeof dep === \"string\") {\n\t\t\treturn dep;\n\t\t}\n\n\t\tif (dep.localModule) {\n\t\t\treturn dep.localModule.variableName();\n\t\t} else {\n\t\t\treturn runtimeTemplate.moduleExports({\n\t\t\t\tmodule: moduleGraph.getModule(dep),\n\t\t\t\tchunkGraph,\n\t\t\t\trequest: dep.request,\n\t\t\t\truntimeRequirements\n\t\t\t});\n\t\t}\n\t}\n};\n\nmodule.exports = AMDRequireArrayDependency;\n"],"mappings":"AAAA;AACA;AACA;AACA;AAEA;;AAEA,MAAMA,kBAAkB,GAAGC,OAAO,CAAC,uBAAD,CAAlC;;AACA,MAAMC,gBAAgB,GAAGD,OAAO,CAAC,0BAAD,CAAhC;;AACA,MAAME,cAAc,GAAGF,OAAO,CAAC,kBAAD,CAA9B;AAEA;;AACA;;AACA;;;AAEA,MAAMG,yBAAN,SAAwCD,cAAxC,CAAuD;EACtDE,WAAW,CAACC,SAAD,EAAYC,KAAZ,EAAmB;IAC7B;IAEA,KAAKD,SAAL,GAAiBA,SAAjB;IACA,KAAKC,KAAL,GAAaA,KAAb;EACA;;EAEO,IAAJC,IAAI,GAAG;IACV,OAAO,mBAAP;EACA;;EAEW,IAARC,QAAQ,GAAG;IACd,OAAO,KAAP;EACA;;EAEDC,SAAS,CAACC,OAAD,EAAU;IAClB,MAAM;MAAEC;IAAF,IAAYD,OAAlB;IAEAC,KAAK,CAAC,KAAKN,SAAN,CAAL;IACAM,KAAK,CAAC,KAAKL,KAAN,CAAL;IAEA,MAAMG,SAAN,CAAgBC,OAAhB;EACA;;EAEDE,WAAW,CAACF,OAAD,EAAU;IACpB,MAAM;MAAEG;IAAF,IAAWH,OAAjB;IAEA,KAAKL,SAAL,GAAiBQ,IAAI,EAArB;IACA,KAAKP,KAAL,GAAaO,IAAI,EAAjB;IAEA,MAAMD,WAAN,CAAkBF,OAAlB;EACA;;AAhCqD;;AAmCvDT,gBAAgB,CACfE,yBADe,EAEf,oDAFe,CAAhB;AAKAA,yBAAyB,CAACW,QAA1B,GAAqC,MAAMC,iCAAN,SACpChB,kBADoC,CAEnC;EACD;AACD;AACA;AACA;AACA;AACA;EACCiB,KAAK,CAACC,UAAD,EAAaC,MAAb,EAAqBC,eAArB,EAAsC;IAC1C,MAAMC,GAAG;IAAG;IAA0CH,UAAtD;IACA,MAAMI,OAAO,GAAG,KAAKC,UAAL,CAAgBF,GAAhB,EAAqBD,eAArB,CAAhB;IACAD,MAAM,CAACK,OAAP,CAAeH,GAAG,CAACd,KAAJ,CAAU,CAAV,CAAf,EAA6Bc,GAAG,CAACd,KAAJ,CAAU,CAAV,IAAe,CAA5C,EAA+Ce,OAA/C;EACA;;EAEDC,UAAU,CAACF,GAAD,EAAMD,eAAN,EAAuB;IAChC,MAAMK,QAAQ,GAAGJ,GAAG,CAACf,SAAJ,CAAcoB,GAAd,CAAkBR,UAAU,IAAI;MAChD,OAAO,KAAKS,oBAAL,CAA0BT,UAA1B,EAAsCE,eAAtC,CAAP;IACA,CAFgB,CAAjB;IAGA,OAAQ,IAAGK,QAAQ,CAACG,IAAT,CAAc,IAAd,CAAoB,GAA/B;EACA;;EAEDD,oBAAoB,CACnBN,GADmB,QAGlB;IAAA,IADD;MAAEQ,eAAF;MAAmBC,WAAnB;MAAgCC,UAAhC;MAA4CC;IAA5C,CACC;;IACD,IAAI,OAAOX,GAAP,KAAe,QAAnB,EAA6B;MAC5B,OAAOA,GAAP;IACA;;IAED,IAAIA,GAAG,CAACY,WAAR,EAAqB;MACpB,OAAOZ,GAAG,CAACY,WAAJ,CAAgBC,YAAhB,EAAP;IACA,CAFD,MAEO;MACN,OAAOL,eAAe,CAACM,aAAhB,CAA8B;QACpCC,MAAM,EAAEN,WAAW,CAACO,SAAZ,CAAsBhB,GAAtB,CAD4B;QAEpCU,UAFoC;QAGpCO,OAAO,EAAEjB,GAAG,CAACiB,OAHuB;QAIpCN;MAJoC,CAA9B,CAAP;IAMA;EACD;;AAtCA,CAFF;AA2CAI,MAAM,CAACG,OAAP,GAAiBnC,yBAAjB"},"metadata":{},"sourceType":"script"}