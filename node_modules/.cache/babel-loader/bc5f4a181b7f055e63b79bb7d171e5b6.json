{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nconst makeSerializable = require(\"../util/makeSerializable\");\n\nconst HarmonyImportDependency = require(\"./HarmonyImportDependency\");\n/** @typedef {import(\"webpack-sources\").ReplaceSource} ReplaceSource */\n\n/** @typedef {import(\"../Dependency\")} Dependency */\n\n/** @typedef {import(\"../DependencyTemplate\").DependencyTemplateContext} DependencyTemplateContext */\n\n/** @typedef {import(\"../InitFragment\")} InitFragment */\n\n/** @typedef {import(\"../Module\")} Module */\n\n/** @typedef {import(\"../ModuleGraph\")} ModuleGraph */\n\n/** @typedef {import(\"../ModuleGraphConnection\")} ModuleGraphConnection */\n\n/** @typedef {import(\"../ModuleGraphConnection\").ConnectionState} ConnectionState */\n\n/** @typedef {import(\"../util/Hash\")} Hash */\n\n/** @typedef {import(\"../util/runtime\").RuntimeSpec} RuntimeSpec */\n\n\nclass HarmonyImportSideEffectDependency extends HarmonyImportDependency {\n  constructor(request, sourceOrder, assertions) {\n    super(request, sourceOrder, assertions);\n  }\n\n  get type() {\n    return \"harmony side effect evaluation\";\n  }\n  /**\n   * @param {ModuleGraph} moduleGraph module graph\n   * @returns {null | false | function(ModuleGraphConnection, RuntimeSpec): ConnectionState} function to determine if the connection is active\n   */\n\n\n  getCondition(moduleGraph) {\n    return connection => {\n      const refModule = connection.resolvedModule;\n      if (!refModule) return true;\n      return refModule.getSideEffectsConnectionState(moduleGraph);\n    };\n  }\n  /**\n   * @param {ModuleGraph} moduleGraph the module graph\n   * @returns {ConnectionState} how this dependency connects the module to referencing modules\n   */\n\n\n  getModuleEvaluationSideEffectsState(moduleGraph) {\n    const refModule = moduleGraph.getModule(this);\n    if (!refModule) return true;\n    return refModule.getSideEffectsConnectionState(moduleGraph);\n  }\n\n}\n\nmakeSerializable(HarmonyImportSideEffectDependency, \"webpack/lib/dependencies/HarmonyImportSideEffectDependency\");\nHarmonyImportSideEffectDependency.Template = class HarmonyImportSideEffectDependencyTemplate extends HarmonyImportDependency.Template {\n  /**\n   * @param {Dependency} dependency the dependency for which the template should be applied\n   * @param {ReplaceSource} source the current replace source which can be modified\n   * @param {DependencyTemplateContext} templateContext the context object\n   * @returns {void}\n   */\n  apply(dependency, source, templateContext) {\n    const {\n      moduleGraph,\n      concatenationScope\n    } = templateContext;\n\n    if (concatenationScope) {\n      const module = moduleGraph.getModule(dependency);\n\n      if (concatenationScope.isModuleInScope(module)) {\n        return;\n      }\n    }\n\n    super.apply(dependency, source, templateContext);\n  }\n\n};\nmodule.exports = HarmonyImportSideEffectDependency;","map":{"version":3,"names":["makeSerializable","require","HarmonyImportDependency","HarmonyImportSideEffectDependency","constructor","request","sourceOrder","assertions","type","getCondition","moduleGraph","connection","refModule","resolvedModule","getSideEffectsConnectionState","getModuleEvaluationSideEffectsState","getModule","Template","HarmonyImportSideEffectDependencyTemplate","apply","dependency","source","templateContext","concatenationScope","module","isModuleInScope","exports"],"sources":["/Users/arpanbhandari/Documents/cod-ing/React/newsapp/node_modules/webpack/lib/dependencies/HarmonyImportSideEffectDependency.js"],"sourcesContent":["/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\n\"use strict\";\n\nconst makeSerializable = require(\"../util/makeSerializable\");\nconst HarmonyImportDependency = require(\"./HarmonyImportDependency\");\n\n/** @typedef {import(\"webpack-sources\").ReplaceSource} ReplaceSource */\n/** @typedef {import(\"../Dependency\")} Dependency */\n/** @typedef {import(\"../DependencyTemplate\").DependencyTemplateContext} DependencyTemplateContext */\n/** @typedef {import(\"../InitFragment\")} InitFragment */\n/** @typedef {import(\"../Module\")} Module */\n/** @typedef {import(\"../ModuleGraph\")} ModuleGraph */\n/** @typedef {import(\"../ModuleGraphConnection\")} ModuleGraphConnection */\n/** @typedef {import(\"../ModuleGraphConnection\").ConnectionState} ConnectionState */\n/** @typedef {import(\"../util/Hash\")} Hash */\n/** @typedef {import(\"../util/runtime\").RuntimeSpec} RuntimeSpec */\n\nclass HarmonyImportSideEffectDependency extends HarmonyImportDependency {\n\tconstructor(request, sourceOrder, assertions) {\n\t\tsuper(request, sourceOrder, assertions);\n\t}\n\n\tget type() {\n\t\treturn \"harmony side effect evaluation\";\n\t}\n\n\t/**\n\t * @param {ModuleGraph} moduleGraph module graph\n\t * @returns {null | false | function(ModuleGraphConnection, RuntimeSpec): ConnectionState} function to determine if the connection is active\n\t */\n\tgetCondition(moduleGraph) {\n\t\treturn connection => {\n\t\t\tconst refModule = connection.resolvedModule;\n\t\t\tif (!refModule) return true;\n\t\t\treturn refModule.getSideEffectsConnectionState(moduleGraph);\n\t\t};\n\t}\n\n\t/**\n\t * @param {ModuleGraph} moduleGraph the module graph\n\t * @returns {ConnectionState} how this dependency connects the module to referencing modules\n\t */\n\tgetModuleEvaluationSideEffectsState(moduleGraph) {\n\t\tconst refModule = moduleGraph.getModule(this);\n\t\tif (!refModule) return true;\n\t\treturn refModule.getSideEffectsConnectionState(moduleGraph);\n\t}\n}\n\nmakeSerializable(\n\tHarmonyImportSideEffectDependency,\n\t\"webpack/lib/dependencies/HarmonyImportSideEffectDependency\"\n);\n\nHarmonyImportSideEffectDependency.Template = class HarmonyImportSideEffectDependencyTemplate extends (\n\tHarmonyImportDependency.Template\n) {\n\t/**\n\t * @param {Dependency} dependency the dependency for which the template should be applied\n\t * @param {ReplaceSource} source the current replace source which can be modified\n\t * @param {DependencyTemplateContext} templateContext the context object\n\t * @returns {void}\n\t */\n\tapply(dependency, source, templateContext) {\n\t\tconst { moduleGraph, concatenationScope } = templateContext;\n\t\tif (concatenationScope) {\n\t\t\tconst module = moduleGraph.getModule(dependency);\n\t\t\tif (concatenationScope.isModuleInScope(module)) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t\tsuper.apply(dependency, source, templateContext);\n\t}\n};\n\nmodule.exports = HarmonyImportSideEffectDependency;\n"],"mappings":"AAAA;AACA;AACA;AACA;AAEA;;AAEA,MAAMA,gBAAgB,GAAGC,OAAO,CAAC,0BAAD,CAAhC;;AACA,MAAMC,uBAAuB,GAAGD,OAAO,CAAC,2BAAD,CAAvC;AAEA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;;AAEA,MAAME,iCAAN,SAAgDD,uBAAhD,CAAwE;EACvEE,WAAW,CAACC,OAAD,EAAUC,WAAV,EAAuBC,UAAvB,EAAmC;IAC7C,MAAMF,OAAN,EAAeC,WAAf,EAA4BC,UAA5B;EACA;;EAEO,IAAJC,IAAI,GAAG;IACV,OAAO,gCAAP;EACA;EAED;AACD;AACA;AACA;;;EACCC,YAAY,CAACC,WAAD,EAAc;IACzB,OAAOC,UAAU,IAAI;MACpB,MAAMC,SAAS,GAAGD,UAAU,CAACE,cAA7B;MACA,IAAI,CAACD,SAAL,EAAgB,OAAO,IAAP;MAChB,OAAOA,SAAS,CAACE,6BAAV,CAAwCJ,WAAxC,CAAP;IACA,CAJD;EAKA;EAED;AACD;AACA;AACA;;;EACCK,mCAAmC,CAACL,WAAD,EAAc;IAChD,MAAME,SAAS,GAAGF,WAAW,CAACM,SAAZ,CAAsB,IAAtB,CAAlB;IACA,IAAI,CAACJ,SAAL,EAAgB,OAAO,IAAP;IAChB,OAAOA,SAAS,CAACE,6BAAV,CAAwCJ,WAAxC,CAAP;EACA;;AA7BsE;;AAgCxEV,gBAAgB,CACfG,iCADe,EAEf,4DAFe,CAAhB;AAKAA,iCAAiC,CAACc,QAAlC,GAA6C,MAAMC,yCAAN,SAC5ChB,uBAAuB,CAACe,QADoB,CAE3C;EACD;AACD;AACA;AACA;AACA;AACA;EACCE,KAAK,CAACC,UAAD,EAAaC,MAAb,EAAqBC,eAArB,EAAsC;IAC1C,MAAM;MAAEZ,WAAF;MAAea;IAAf,IAAsCD,eAA5C;;IACA,IAAIC,kBAAJ,EAAwB;MACvB,MAAMC,MAAM,GAAGd,WAAW,CAACM,SAAZ,CAAsBI,UAAtB,CAAf;;MACA,IAAIG,kBAAkB,CAACE,eAAnB,CAAmCD,MAAnC,CAAJ,EAAgD;QAC/C;MACA;IACD;;IACD,MAAML,KAAN,CAAYC,UAAZ,EAAwBC,MAAxB,EAAgCC,eAAhC;EACA;;AAhBA,CAFF;AAqBAE,MAAM,CAACE,OAAP,GAAiBvB,iCAAjB"},"metadata":{},"sourceType":"script"}