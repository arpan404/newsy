{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Ivan Kopeykin @vankop\n*/\n\"use strict\";\n\nconst path = require(\"path\");\n\nconst DescriptionFileUtils = require(\"./DescriptionFileUtils\");\n\nconst forEachBail = require(\"./forEachBail\");\n\nconst {\n  processExportsField\n} = require(\"./util/entrypoints\");\n\nconst {\n  parseIdentifier\n} = require(\"./util/identifier\");\n\nconst {\n  checkExportsFieldTarget\n} = require(\"./util/path\");\n/** @typedef {import(\"./Resolver\")} Resolver */\n\n/** @typedef {import(\"./Resolver\").ResolveStepHook} ResolveStepHook */\n\n/** @typedef {import(\"./util/entrypoints\").ExportsField} ExportsField */\n\n/** @typedef {import(\"./util/entrypoints\").FieldProcessor} FieldProcessor */\n\n\nmodule.exports = class ExportsFieldPlugin {\n  /**\n   * @param {string | ResolveStepHook} source source\n   * @param {Set<string>} conditionNames condition names\n   * @param {string | string[]} fieldNamePath name path\n   * @param {string | ResolveStepHook} target target\n   */\n  constructor(source, conditionNames, fieldNamePath, target) {\n    this.source = source;\n    this.target = target;\n    this.conditionNames = conditionNames;\n    this.fieldName = fieldNamePath;\n    /** @type {WeakMap<any, FieldProcessor>} */\n\n    this.fieldProcessorCache = new WeakMap();\n  }\n  /**\n   * @param {Resolver} resolver the resolver\n   * @returns {void}\n   */\n\n\n  apply(resolver) {\n    const target = resolver.ensureHook(this.target);\n    resolver.getHook(this.source).tapAsync(\"ExportsFieldPlugin\", (request, resolveContext, callback) => {\n      // When there is no description file, abort\n      if (!request.descriptionFilePath) return callback();\n      if ( // When the description file is inherited from parent, abort\n      // (There is no description file inside of this package)\n      request.relativePath !== \".\" || request.request === undefined) return callback();\n      const remainingRequest = request.query || request.fragment ? (request.request === \".\" ? \"./\" : request.request) + request.query + request.fragment : request.request;\n      /** @type {ExportsField|null} */\n\n      const exportsField = DescriptionFileUtils.getField(request.descriptionFileData, this.fieldName);\n      if (!exportsField) return callback();\n\n      if (request.directory) {\n        return callback(new Error(`Resolving to directories is not possible with the exports field (request was ${remainingRequest}/)`));\n      }\n\n      let paths;\n\n      try {\n        // We attach the cache to the description file instead of the exportsField value\n        // because we use a WeakMap and the exportsField could be a string too.\n        // Description file is always an object when exports field can be accessed.\n        let fieldProcessor = this.fieldProcessorCache.get(request.descriptionFileData);\n\n        if (fieldProcessor === undefined) {\n          fieldProcessor = processExportsField(exportsField);\n          this.fieldProcessorCache.set(request.descriptionFileData, fieldProcessor);\n        }\n\n        paths = fieldProcessor(remainingRequest, this.conditionNames);\n      } catch (err) {\n        if (resolveContext.log) {\n          resolveContext.log(`Exports field in ${request.descriptionFilePath} can't be processed: ${err}`);\n        }\n\n        return callback(err);\n      }\n\n      if (paths.length === 0) {\n        return callback(new Error(`Package path ${remainingRequest} is not exported from package ${request.descriptionFileRoot} (see exports field in ${request.descriptionFilePath})`));\n      }\n\n      forEachBail(paths, (p, callback) => {\n        const parsedIdentifier = parseIdentifier(p);\n        if (!parsedIdentifier) return callback();\n        const [relativePath, query, fragment] = parsedIdentifier;\n        const error = checkExportsFieldTarget(relativePath);\n\n        if (error) {\n          return callback(error);\n        }\n\n        const obj = { ...request,\n          request: undefined,\n          path: path.join(\n          /** @type {string} */\n          request.descriptionFileRoot, relativePath),\n          relativePath,\n          query,\n          fragment\n        };\n        resolver.doResolve(target, obj, \"using exports field: \" + p, resolveContext, callback);\n      }, (err, result) => callback(err, result || null));\n    });\n  }\n\n};","map":{"version":3,"names":["path","require","DescriptionFileUtils","forEachBail","processExportsField","parseIdentifier","checkExportsFieldTarget","module","exports","ExportsFieldPlugin","constructor","source","conditionNames","fieldNamePath","target","fieldName","fieldProcessorCache","WeakMap","apply","resolver","ensureHook","getHook","tapAsync","request","resolveContext","callback","descriptionFilePath","relativePath","undefined","remainingRequest","query","fragment","exportsField","getField","descriptionFileData","directory","Error","paths","fieldProcessor","get","set","err","log","length","descriptionFileRoot","p","parsedIdentifier","error","obj","join","doResolve","result"],"sources":["/Users/arpanbhandari/Documents/cod-ing/React/newsapp/node_modules/enhanced-resolve/lib/ExportsFieldPlugin.js"],"sourcesContent":["/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Ivan Kopeykin @vankop\n*/\n\n\"use strict\";\n\nconst path = require(\"path\");\nconst DescriptionFileUtils = require(\"./DescriptionFileUtils\");\nconst forEachBail = require(\"./forEachBail\");\nconst { processExportsField } = require(\"./util/entrypoints\");\nconst { parseIdentifier } = require(\"./util/identifier\");\nconst { checkExportsFieldTarget } = require(\"./util/path\");\n\n/** @typedef {import(\"./Resolver\")} Resolver */\n/** @typedef {import(\"./Resolver\").ResolveStepHook} ResolveStepHook */\n/** @typedef {import(\"./util/entrypoints\").ExportsField} ExportsField */\n/** @typedef {import(\"./util/entrypoints\").FieldProcessor} FieldProcessor */\n\nmodule.exports = class ExportsFieldPlugin {\n\t/**\n\t * @param {string | ResolveStepHook} source source\n\t * @param {Set<string>} conditionNames condition names\n\t * @param {string | string[]} fieldNamePath name path\n\t * @param {string | ResolveStepHook} target target\n\t */\n\tconstructor(source, conditionNames, fieldNamePath, target) {\n\t\tthis.source = source;\n\t\tthis.target = target;\n\t\tthis.conditionNames = conditionNames;\n\t\tthis.fieldName = fieldNamePath;\n\t\t/** @type {WeakMap<any, FieldProcessor>} */\n\t\tthis.fieldProcessorCache = new WeakMap();\n\t}\n\n\t/**\n\t * @param {Resolver} resolver the resolver\n\t * @returns {void}\n\t */\n\tapply(resolver) {\n\t\tconst target = resolver.ensureHook(this.target);\n\t\tresolver\n\t\t\t.getHook(this.source)\n\t\t\t.tapAsync(\"ExportsFieldPlugin\", (request, resolveContext, callback) => {\n\t\t\t\t// When there is no description file, abort\n\t\t\t\tif (!request.descriptionFilePath) return callback();\n\t\t\t\tif (\n\t\t\t\t\t// When the description file is inherited from parent, abort\n\t\t\t\t\t// (There is no description file inside of this package)\n\t\t\t\t\trequest.relativePath !== \".\" ||\n\t\t\t\t\trequest.request === undefined\n\t\t\t\t)\n\t\t\t\t\treturn callback();\n\n\t\t\t\tconst remainingRequest =\n\t\t\t\t\trequest.query || request.fragment\n\t\t\t\t\t\t? (request.request === \".\" ? \"./\" : request.request) +\n\t\t\t\t\t\t  request.query +\n\t\t\t\t\t\t  request.fragment\n\t\t\t\t\t\t: request.request;\n\t\t\t\t/** @type {ExportsField|null} */\n\t\t\t\tconst exportsField = DescriptionFileUtils.getField(\n\t\t\t\t\trequest.descriptionFileData,\n\t\t\t\t\tthis.fieldName\n\t\t\t\t);\n\t\t\t\tif (!exportsField) return callback();\n\n\t\t\t\tif (request.directory) {\n\t\t\t\t\treturn callback(\n\t\t\t\t\t\tnew Error(\n\t\t\t\t\t\t\t`Resolving to directories is not possible with the exports field (request was ${remainingRequest}/)`\n\t\t\t\t\t\t)\n\t\t\t\t\t);\n\t\t\t\t}\n\n\t\t\t\tlet paths;\n\n\t\t\t\ttry {\n\t\t\t\t\t// We attach the cache to the description file instead of the exportsField value\n\t\t\t\t\t// because we use a WeakMap and the exportsField could be a string too.\n\t\t\t\t\t// Description file is always an object when exports field can be accessed.\n\t\t\t\t\tlet fieldProcessor = this.fieldProcessorCache.get(\n\t\t\t\t\t\trequest.descriptionFileData\n\t\t\t\t\t);\n\t\t\t\t\tif (fieldProcessor === undefined) {\n\t\t\t\t\t\tfieldProcessor = processExportsField(exportsField);\n\t\t\t\t\t\tthis.fieldProcessorCache.set(\n\t\t\t\t\t\t\trequest.descriptionFileData,\n\t\t\t\t\t\t\tfieldProcessor\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t\tpaths = fieldProcessor(remainingRequest, this.conditionNames);\n\t\t\t\t} catch (err) {\n\t\t\t\t\tif (resolveContext.log) {\n\t\t\t\t\t\tresolveContext.log(\n\t\t\t\t\t\t\t`Exports field in ${request.descriptionFilePath} can't be processed: ${err}`\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t\treturn callback(err);\n\t\t\t\t}\n\n\t\t\t\tif (paths.length === 0) {\n\t\t\t\t\treturn callback(\n\t\t\t\t\t\tnew Error(\n\t\t\t\t\t\t\t`Package path ${remainingRequest} is not exported from package ${request.descriptionFileRoot} (see exports field in ${request.descriptionFilePath})`\n\t\t\t\t\t\t)\n\t\t\t\t\t);\n\t\t\t\t}\n\n\t\t\t\tforEachBail(\n\t\t\t\t\tpaths,\n\t\t\t\t\t(p, callback) => {\n\t\t\t\t\t\tconst parsedIdentifier = parseIdentifier(p);\n\n\t\t\t\t\t\tif (!parsedIdentifier) return callback();\n\n\t\t\t\t\t\tconst [relativePath, query, fragment] = parsedIdentifier;\n\n\t\t\t\t\t\tconst error = checkExportsFieldTarget(relativePath);\n\n\t\t\t\t\t\tif (error) {\n\t\t\t\t\t\t\treturn callback(error);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tconst obj = {\n\t\t\t\t\t\t\t...request,\n\t\t\t\t\t\t\trequest: undefined,\n\t\t\t\t\t\t\tpath: path.join(\n\t\t\t\t\t\t\t\t/** @type {string} */ (request.descriptionFileRoot),\n\t\t\t\t\t\t\t\trelativePath\n\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\trelativePath,\n\t\t\t\t\t\t\tquery,\n\t\t\t\t\t\t\tfragment\n\t\t\t\t\t\t};\n\n\t\t\t\t\t\tresolver.doResolve(\n\t\t\t\t\t\t\ttarget,\n\t\t\t\t\t\t\tobj,\n\t\t\t\t\t\t\t\"using exports field: \" + p,\n\t\t\t\t\t\t\tresolveContext,\n\t\t\t\t\t\t\tcallback\n\t\t\t\t\t\t);\n\t\t\t\t\t},\n\t\t\t\t\t(err, result) => callback(err, result || null)\n\t\t\t\t);\n\t\t\t});\n\t}\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}