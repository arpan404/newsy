{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nconst quoteMeta = str => {\n  return str.replace(/[-[\\]\\\\/{}()*+?.^$|]/g, \"\\\\$&\");\n};\n\nconst toSimpleString = str => {\n  if (`${+str}` === str) {\n    return str;\n  }\n\n  return JSON.stringify(str);\n};\n/**\n * @param {Record<string|number, boolean>} map value map\n * @returns {boolean|(function(string): string)} true/false, when unconditionally true/false, or a template function to determine the value at runtime\n */\n\n\nconst compileBooleanMatcher = map => {\n  const positiveItems = Object.keys(map).filter(i => map[i]);\n  const negativeItems = Object.keys(map).filter(i => !map[i]);\n  if (positiveItems.length === 0) return false;\n  if (negativeItems.length === 0) return true;\n  return compileBooleanMatcherFromLists(positiveItems, negativeItems);\n};\n/**\n * @param {string[]} positiveItems positive items\n * @param {string[]} negativeItems negative items\n * @returns {function(string): string} a template function to determine the value at runtime\n */\n\n\nconst compileBooleanMatcherFromLists = (positiveItems, negativeItems) => {\n  if (positiveItems.length === 0) return () => \"false\";\n  if (negativeItems.length === 0) return () => \"true\";\n  if (positiveItems.length === 1) return value => `${toSimpleString(positiveItems[0])} == ${value}`;\n  if (negativeItems.length === 1) return value => `${toSimpleString(negativeItems[0])} != ${value}`;\n  const positiveRegexp = itemsToRegexp(positiveItems);\n  const negativeRegexp = itemsToRegexp(negativeItems);\n\n  if (positiveRegexp.length <= negativeRegexp.length) {\n    return value => `/^${positiveRegexp}$/.test(${value})`;\n  } else {\n    return value => `!/^${negativeRegexp}$/.test(${value})`;\n  }\n};\n\nconst popCommonItems = (itemsSet, getKey, condition) => {\n  const map = new Map();\n\n  for (const item of itemsSet) {\n    const key = getKey(item);\n\n    if (key) {\n      let list = map.get(key);\n\n      if (list === undefined) {\n        list = [];\n        map.set(key, list);\n      }\n\n      list.push(item);\n    }\n  }\n\n  const result = [];\n\n  for (const list of map.values()) {\n    if (condition(list)) {\n      for (const item of list) {\n        itemsSet.delete(item);\n      }\n\n      result.push(list);\n    }\n  }\n\n  return result;\n};\n\nconst getCommonPrefix = items => {\n  let prefix = items[0];\n\n  for (let i = 1; i < items.length; i++) {\n    const item = items[i];\n\n    for (let p = 0; p < prefix.length; p++) {\n      if (item[p] !== prefix[p]) {\n        prefix = prefix.slice(0, p);\n        break;\n      }\n    }\n  }\n\n  return prefix;\n};\n\nconst getCommonSuffix = items => {\n  let suffix = items[0];\n\n  for (let i = 1; i < items.length; i++) {\n    const item = items[i];\n\n    for (let p = item.length - 1, s = suffix.length - 1; s >= 0; p--, s--) {\n      if (item[p] !== suffix[s]) {\n        suffix = suffix.slice(s + 1);\n        break;\n      }\n    }\n  }\n\n  return suffix;\n};\n\nconst itemsToRegexp = itemsArr => {\n  if (itemsArr.length === 1) {\n    return quoteMeta(itemsArr[0]);\n  }\n\n  const finishedItems = []; // merge single char items: (a|b|c|d|ef) => ([abcd]|ef)\n\n  let countOfSingleCharItems = 0;\n\n  for (const item of itemsArr) {\n    if (item.length === 1) {\n      countOfSingleCharItems++;\n    }\n  } // special case for only single char items\n\n\n  if (countOfSingleCharItems === itemsArr.length) {\n    return `[${quoteMeta(itemsArr.sort().join(\"\"))}]`;\n  }\n\n  const items = new Set(itemsArr.sort());\n\n  if (countOfSingleCharItems > 2) {\n    let singleCharItems = \"\";\n\n    for (const item of items) {\n      if (item.length === 1) {\n        singleCharItems += item;\n        items.delete(item);\n      }\n    }\n\n    finishedItems.push(`[${quoteMeta(singleCharItems)}]`);\n  } // special case for 2 items with common prefix/suffix\n\n\n  if (finishedItems.length === 0 && items.size === 2) {\n    const prefix = getCommonPrefix(itemsArr);\n    const suffix = getCommonSuffix(itemsArr.map(item => item.slice(prefix.length)));\n\n    if (prefix.length > 0 || suffix.length > 0) {\n      return `${quoteMeta(prefix)}${itemsToRegexp(itemsArr.map(i => i.slice(prefix.length, -suffix.length || undefined)))}${quoteMeta(suffix)}`;\n    }\n  } // special case for 2 items with common suffix\n\n\n  if (finishedItems.length === 0 && items.size === 2) {\n    const it = items[Symbol.iterator]();\n    const a = it.next().value;\n    const b = it.next().value;\n\n    if (a.length > 0 && b.length > 0 && a.slice(-1) === b.slice(-1)) {\n      return `${itemsToRegexp([a.slice(0, -1), b.slice(0, -1)])}${quoteMeta(a.slice(-1))}`;\n    }\n  } // find common prefix: (a1|a2|a3|a4|b5) => (a(1|2|3|4)|b5)\n\n\n  const prefixed = popCommonItems(items, item => item.length >= 1 ? item[0] : false, list => {\n    if (list.length >= 3) return true;\n    if (list.length <= 1) return false;\n    return list[0][1] === list[1][1];\n  });\n\n  for (const prefixedItems of prefixed) {\n    const prefix = getCommonPrefix(prefixedItems);\n    finishedItems.push(`${quoteMeta(prefix)}${itemsToRegexp(prefixedItems.map(i => i.slice(prefix.length)))}`);\n  } // find common suffix: (a1|b1|c1|d1|e2) => ((a|b|c|d)1|e2)\n\n\n  const suffixed = popCommonItems(items, item => item.length >= 1 ? item.slice(-1) : false, list => {\n    if (list.length >= 3) return true;\n    if (list.length <= 1) return false;\n    return list[0].slice(-2) === list[1].slice(-2);\n  });\n\n  for (const suffixedItems of suffixed) {\n    const suffix = getCommonSuffix(suffixedItems);\n    finishedItems.push(`${itemsToRegexp(suffixedItems.map(i => i.slice(0, -suffix.length)))}${quoteMeta(suffix)}`);\n  } // TODO further optimize regexp, i. e.\n  // use ranges: (1|2|3|4|a) => [1-4a]\n\n\n  const conditional = finishedItems.concat(Array.from(items, quoteMeta));\n  if (conditional.length === 1) return conditional[0];\n  return `(${conditional.join(\"|\")})`;\n};\n\ncompileBooleanMatcher.fromLists = compileBooleanMatcherFromLists;\ncompileBooleanMatcher.itemsToRegexp = itemsToRegexp;\nmodule.exports = compileBooleanMatcher;","map":{"version":3,"names":["quoteMeta","str","replace","toSimpleString","JSON","stringify","compileBooleanMatcher","map","positiveItems","Object","keys","filter","i","negativeItems","length","compileBooleanMatcherFromLists","value","positiveRegexp","itemsToRegexp","negativeRegexp","popCommonItems","itemsSet","getKey","condition","Map","item","key","list","get","undefined","set","push","result","values","delete","getCommonPrefix","items","prefix","p","slice","getCommonSuffix","suffix","s","itemsArr","finishedItems","countOfSingleCharItems","sort","join","Set","singleCharItems","size","it","Symbol","iterator","a","next","b","prefixed","prefixedItems","suffixed","suffixedItems","conditional","concat","Array","from","fromLists","module","exports"],"sources":["/Users/arpanbhandari/Documents/cod-ing/React/newsapp/node_modules/webpack/lib/util/compileBooleanMatcher.js"],"sourcesContent":["/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\n\"use strict\";\n\nconst quoteMeta = str => {\n\treturn str.replace(/[-[\\]\\\\/{}()*+?.^$|]/g, \"\\\\$&\");\n};\n\nconst toSimpleString = str => {\n\tif (`${+str}` === str) {\n\t\treturn str;\n\t}\n\treturn JSON.stringify(str);\n};\n\n/**\n * @param {Record<string|number, boolean>} map value map\n * @returns {boolean|(function(string): string)} true/false, when unconditionally true/false, or a template function to determine the value at runtime\n */\nconst compileBooleanMatcher = map => {\n\tconst positiveItems = Object.keys(map).filter(i => map[i]);\n\tconst negativeItems = Object.keys(map).filter(i => !map[i]);\n\tif (positiveItems.length === 0) return false;\n\tif (negativeItems.length === 0) return true;\n\treturn compileBooleanMatcherFromLists(positiveItems, negativeItems);\n};\n\n/**\n * @param {string[]} positiveItems positive items\n * @param {string[]} negativeItems negative items\n * @returns {function(string): string} a template function to determine the value at runtime\n */\nconst compileBooleanMatcherFromLists = (positiveItems, negativeItems) => {\n\tif (positiveItems.length === 0) return () => \"false\";\n\tif (negativeItems.length === 0) return () => \"true\";\n\tif (positiveItems.length === 1)\n\t\treturn value => `${toSimpleString(positiveItems[0])} == ${value}`;\n\tif (negativeItems.length === 1)\n\t\treturn value => `${toSimpleString(negativeItems[0])} != ${value}`;\n\tconst positiveRegexp = itemsToRegexp(positiveItems);\n\tconst negativeRegexp = itemsToRegexp(negativeItems);\n\tif (positiveRegexp.length <= negativeRegexp.length) {\n\t\treturn value => `/^${positiveRegexp}$/.test(${value})`;\n\t} else {\n\t\treturn value => `!/^${negativeRegexp}$/.test(${value})`;\n\t}\n};\n\nconst popCommonItems = (itemsSet, getKey, condition) => {\n\tconst map = new Map();\n\tfor (const item of itemsSet) {\n\t\tconst key = getKey(item);\n\t\tif (key) {\n\t\t\tlet list = map.get(key);\n\t\t\tif (list === undefined) {\n\t\t\t\tlist = [];\n\t\t\t\tmap.set(key, list);\n\t\t\t}\n\t\t\tlist.push(item);\n\t\t}\n\t}\n\tconst result = [];\n\tfor (const list of map.values()) {\n\t\tif (condition(list)) {\n\t\t\tfor (const item of list) {\n\t\t\t\titemsSet.delete(item);\n\t\t\t}\n\t\t\tresult.push(list);\n\t\t}\n\t}\n\treturn result;\n};\n\nconst getCommonPrefix = items => {\n\tlet prefix = items[0];\n\tfor (let i = 1; i < items.length; i++) {\n\t\tconst item = items[i];\n\t\tfor (let p = 0; p < prefix.length; p++) {\n\t\t\tif (item[p] !== prefix[p]) {\n\t\t\t\tprefix = prefix.slice(0, p);\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\treturn prefix;\n};\n\nconst getCommonSuffix = items => {\n\tlet suffix = items[0];\n\tfor (let i = 1; i < items.length; i++) {\n\t\tconst item = items[i];\n\t\tfor (let p = item.length - 1, s = suffix.length - 1; s >= 0; p--, s--) {\n\t\t\tif (item[p] !== suffix[s]) {\n\t\t\t\tsuffix = suffix.slice(s + 1);\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\treturn suffix;\n};\n\nconst itemsToRegexp = itemsArr => {\n\tif (itemsArr.length === 1) {\n\t\treturn quoteMeta(itemsArr[0]);\n\t}\n\tconst finishedItems = [];\n\n\t// merge single char items: (a|b|c|d|ef) => ([abcd]|ef)\n\tlet countOfSingleCharItems = 0;\n\tfor (const item of itemsArr) {\n\t\tif (item.length === 1) {\n\t\t\tcountOfSingleCharItems++;\n\t\t}\n\t}\n\t// special case for only single char items\n\tif (countOfSingleCharItems === itemsArr.length) {\n\t\treturn `[${quoteMeta(itemsArr.sort().join(\"\"))}]`;\n\t}\n\tconst items = new Set(itemsArr.sort());\n\tif (countOfSingleCharItems > 2) {\n\t\tlet singleCharItems = \"\";\n\t\tfor (const item of items) {\n\t\t\tif (item.length === 1) {\n\t\t\t\tsingleCharItems += item;\n\t\t\t\titems.delete(item);\n\t\t\t}\n\t\t}\n\t\tfinishedItems.push(`[${quoteMeta(singleCharItems)}]`);\n\t}\n\n\t// special case for 2 items with common prefix/suffix\n\tif (finishedItems.length === 0 && items.size === 2) {\n\t\tconst prefix = getCommonPrefix(itemsArr);\n\t\tconst suffix = getCommonSuffix(\n\t\t\titemsArr.map(item => item.slice(prefix.length))\n\t\t);\n\t\tif (prefix.length > 0 || suffix.length > 0) {\n\t\t\treturn `${quoteMeta(prefix)}${itemsToRegexp(\n\t\t\t\titemsArr.map(i => i.slice(prefix.length, -suffix.length || undefined))\n\t\t\t)}${quoteMeta(suffix)}`;\n\t\t}\n\t}\n\n\t// special case for 2 items with common suffix\n\tif (finishedItems.length === 0 && items.size === 2) {\n\t\tconst it = items[Symbol.iterator]();\n\t\tconst a = it.next().value;\n\t\tconst b = it.next().value;\n\t\tif (a.length > 0 && b.length > 0 && a.slice(-1) === b.slice(-1)) {\n\t\t\treturn `${itemsToRegexp([a.slice(0, -1), b.slice(0, -1)])}${quoteMeta(\n\t\t\t\ta.slice(-1)\n\t\t\t)}`;\n\t\t}\n\t}\n\n\t// find common prefix: (a1|a2|a3|a4|b5) => (a(1|2|3|4)|b5)\n\tconst prefixed = popCommonItems(\n\t\titems,\n\t\titem => (item.length >= 1 ? item[0] : false),\n\t\tlist => {\n\t\t\tif (list.length >= 3) return true;\n\t\t\tif (list.length <= 1) return false;\n\t\t\treturn list[0][1] === list[1][1];\n\t\t}\n\t);\n\tfor (const prefixedItems of prefixed) {\n\t\tconst prefix = getCommonPrefix(prefixedItems);\n\t\tfinishedItems.push(\n\t\t\t`${quoteMeta(prefix)}${itemsToRegexp(\n\t\t\t\tprefixedItems.map(i => i.slice(prefix.length))\n\t\t\t)}`\n\t\t);\n\t}\n\n\t// find common suffix: (a1|b1|c1|d1|e2) => ((a|b|c|d)1|e2)\n\tconst suffixed = popCommonItems(\n\t\titems,\n\t\titem => (item.length >= 1 ? item.slice(-1) : false),\n\t\tlist => {\n\t\t\tif (list.length >= 3) return true;\n\t\t\tif (list.length <= 1) return false;\n\t\t\treturn list[0].slice(-2) === list[1].slice(-2);\n\t\t}\n\t);\n\tfor (const suffixedItems of suffixed) {\n\t\tconst suffix = getCommonSuffix(suffixedItems);\n\t\tfinishedItems.push(\n\t\t\t`${itemsToRegexp(\n\t\t\t\tsuffixedItems.map(i => i.slice(0, -suffix.length))\n\t\t\t)}${quoteMeta(suffix)}`\n\t\t);\n\t}\n\n\t// TODO further optimize regexp, i. e.\n\t// use ranges: (1|2|3|4|a) => [1-4a]\n\tconst conditional = finishedItems.concat(Array.from(items, quoteMeta));\n\tif (conditional.length === 1) return conditional[0];\n\treturn `(${conditional.join(\"|\")})`;\n};\n\ncompileBooleanMatcher.fromLists = compileBooleanMatcherFromLists;\ncompileBooleanMatcher.itemsToRegexp = itemsToRegexp;\nmodule.exports = compileBooleanMatcher;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}