{"ast":null,"code":"(function (global, factory) {\n  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) : typeof define === 'function' && define.amd ? define(['exports'], factory) : (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory(global.sourcemapCodec = {}));\n})(this, function (exports) {\n  'use strict';\n\n  const comma = ','.charCodeAt(0);\n  const semicolon = ';'.charCodeAt(0);\n  const chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';\n  const intToChar = new Uint8Array(64); // 64 possible chars.\n\n  const charToInt = new Uint8Array(128); // z is 122 in ASCII\n\n  for (let i = 0; i < chars.length; i++) {\n    const c = chars.charCodeAt(i);\n    intToChar[i] = c;\n    charToInt[c] = i;\n  } // Provide a fallback for older environments.\n\n\n  const td = typeof TextDecoder !== 'undefined' ? /* #__PURE__ */new TextDecoder() : typeof Buffer !== 'undefined' ? {\n    decode(buf) {\n      const out = Buffer.from(buf.buffer, buf.byteOffset, buf.byteLength);\n      return out.toString();\n    }\n\n  } : {\n    decode(buf) {\n      let out = '';\n\n      for (let i = 0; i < buf.length; i++) {\n        out += String.fromCharCode(buf[i]);\n      }\n\n      return out;\n    }\n\n  };\n\n  function decode(mappings) {\n    const state = new Int32Array(5);\n    const decoded = [];\n    let index = 0;\n\n    do {\n      const semi = indexOf(mappings, index);\n      const line = [];\n      let sorted = true;\n      let lastCol = 0;\n      state[0] = 0;\n\n      for (let i = index; i < semi; i++) {\n        let seg;\n        i = decodeInteger(mappings, i, state, 0); // genColumn\n\n        const col = state[0];\n        if (col < lastCol) sorted = false;\n        lastCol = col;\n\n        if (hasMoreVlq(mappings, i, semi)) {\n          i = decodeInteger(mappings, i, state, 1); // sourcesIndex\n\n          i = decodeInteger(mappings, i, state, 2); // sourceLine\n\n          i = decodeInteger(mappings, i, state, 3); // sourceColumn\n\n          if (hasMoreVlq(mappings, i, semi)) {\n            i = decodeInteger(mappings, i, state, 4); // namesIndex\n\n            seg = [col, state[1], state[2], state[3], state[4]];\n          } else {\n            seg = [col, state[1], state[2], state[3]];\n          }\n        } else {\n          seg = [col];\n        }\n\n        line.push(seg);\n      }\n\n      if (!sorted) sort(line);\n      decoded.push(line);\n      index = semi + 1;\n    } while (index <= mappings.length);\n\n    return decoded;\n  }\n\n  function indexOf(mappings, index) {\n    const idx = mappings.indexOf(';', index);\n    return idx === -1 ? mappings.length : idx;\n  }\n\n  function decodeInteger(mappings, pos, state, j) {\n    let value = 0;\n    let shift = 0;\n    let integer = 0;\n\n    do {\n      const c = mappings.charCodeAt(pos++);\n      integer = charToInt[c];\n      value |= (integer & 31) << shift;\n      shift += 5;\n    } while (integer & 32);\n\n    const shouldNegate = value & 1;\n    value >>>= 1;\n\n    if (shouldNegate) {\n      value = -0x80000000 | -value;\n    }\n\n    state[j] += value;\n    return pos;\n  }\n\n  function hasMoreVlq(mappings, i, length) {\n    if (i >= length) return false;\n    return mappings.charCodeAt(i) !== comma;\n  }\n\n  function sort(line) {\n    line.sort(sortComparator);\n  }\n\n  function sortComparator(a, b) {\n    return a[0] - b[0];\n  }\n\n  function encode(decoded) {\n    const state = new Int32Array(5);\n    const bufLength = 1024 * 16;\n    const subLength = bufLength - 36;\n    const buf = new Uint8Array(bufLength);\n    const sub = buf.subarray(0, subLength);\n    let pos = 0;\n    let out = '';\n\n    for (let i = 0; i < decoded.length; i++) {\n      const line = decoded[i];\n\n      if (i > 0) {\n        if (pos === bufLength) {\n          out += td.decode(buf);\n          pos = 0;\n        }\n\n        buf[pos++] = semicolon;\n      }\n\n      if (line.length === 0) continue;\n      state[0] = 0;\n\n      for (let j = 0; j < line.length; j++) {\n        const segment = line[j]; // We can push up to 5 ints, each int can take at most 7 chars, and we\n        // may push a comma.\n\n        if (pos > subLength) {\n          out += td.decode(sub);\n          buf.copyWithin(0, subLength, pos);\n          pos -= subLength;\n        }\n\n        if (j > 0) buf[pos++] = comma;\n        pos = encodeInteger(buf, pos, state, segment, 0); // genColumn\n\n        if (segment.length === 1) continue;\n        pos = encodeInteger(buf, pos, state, segment, 1); // sourcesIndex\n\n        pos = encodeInteger(buf, pos, state, segment, 2); // sourceLine\n\n        pos = encodeInteger(buf, pos, state, segment, 3); // sourceColumn\n\n        if (segment.length === 4) continue;\n        pos = encodeInteger(buf, pos, state, segment, 4); // namesIndex\n      }\n    }\n\n    return out + td.decode(buf.subarray(0, pos));\n  }\n\n  function encodeInteger(buf, pos, state, segment, j) {\n    const next = segment[j];\n    let num = next - state[j];\n    state[j] = next;\n    num = num < 0 ? -num << 1 | 1 : num << 1;\n\n    do {\n      let clamped = num & 0b011111;\n      num >>>= 5;\n      if (num > 0) clamped |= 0b100000;\n      buf[pos++] = intToChar[clamped];\n    } while (num > 0);\n\n    return pos;\n  }\n\n  exports.decode = decode;\n  exports.encode = encode;\n  Object.defineProperty(exports, '__esModule', {\n    value: true\n  });\n});","map":{"version":3,"mappings":"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","names":["comma","charCodeAt","semicolon","chars","intToChar","Uint8Array","charToInt","i","length","c","td","TextDecoder","Buffer","decode","buf","out","from","buffer","byteOffset","byteLength","toString","String","fromCharCode","mappings","state","Int32Array","decoded","index","semi","indexOf","line","sorted","lastCol","seg","decodeInteger","col","hasMoreVlq","push","sort","idx","pos","j","value","shift","integer","shouldNegate","sortComparator","a","b","encode","bufLength","subLength","sub","subarray","segment","copyWithin","encodeInteger","next","num","clamped"],"sources":["../../src/sourcemap-codec.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}