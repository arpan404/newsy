{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n/** @typedef {import(\"../Compiler\")} Compiler */\n\nclass RuntimeChunkPlugin {\n  constructor(options) {\n    this.options = {\n      name: entrypoint => `runtime~${entrypoint.name}`,\n      ...options\n    };\n  }\n  /**\n   * Apply the plugin\n   * @param {Compiler} compiler the compiler instance\n   * @returns {void}\n   */\n\n\n  apply(compiler) {\n    compiler.hooks.thisCompilation.tap(\"RuntimeChunkPlugin\", compilation => {\n      compilation.hooks.addEntry.tap(\"RuntimeChunkPlugin\", (_, _ref) => {\n        let {\n          name: entryName\n        } = _ref;\n        if (entryName === undefined) return;\n        const data = compilation.entries.get(entryName);\n\n        if (data.options.runtime === undefined && !data.options.dependOn) {\n          // Determine runtime chunk name\n          let name = this.options.name;\n\n          if (typeof name === \"function\") {\n            name = name({\n              name: entryName\n            });\n          }\n\n          data.options.runtime = name;\n        }\n      });\n    });\n  }\n\n}\n\nmodule.exports = RuntimeChunkPlugin;","map":{"version":3,"names":["RuntimeChunkPlugin","constructor","options","name","entrypoint","apply","compiler","hooks","thisCompilation","tap","compilation","addEntry","_","entryName","undefined","data","entries","get","runtime","dependOn","module","exports"],"sources":["/Users/arpanbhandari/Documents/cod-ing/React/newsapp/node_modules/webpack/lib/optimize/RuntimeChunkPlugin.js"],"sourcesContent":["/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\n\"use strict\";\n\n/** @typedef {import(\"../Compiler\")} Compiler */\n\nclass RuntimeChunkPlugin {\n\tconstructor(options) {\n\t\tthis.options = {\n\t\t\tname: entrypoint => `runtime~${entrypoint.name}`,\n\t\t\t...options\n\t\t};\n\t}\n\n\t/**\n\t * Apply the plugin\n\t * @param {Compiler} compiler the compiler instance\n\t * @returns {void}\n\t */\n\tapply(compiler) {\n\t\tcompiler.hooks.thisCompilation.tap(\"RuntimeChunkPlugin\", compilation => {\n\t\t\tcompilation.hooks.addEntry.tap(\n\t\t\t\t\"RuntimeChunkPlugin\",\n\t\t\t\t(_, { name: entryName }) => {\n\t\t\t\t\tif (entryName === undefined) return;\n\t\t\t\t\tconst data = compilation.entries.get(entryName);\n\t\t\t\t\tif (data.options.runtime === undefined && !data.options.dependOn) {\n\t\t\t\t\t\t// Determine runtime chunk name\n\t\t\t\t\t\tlet name = this.options.name;\n\t\t\t\t\t\tif (typeof name === \"function\") {\n\t\t\t\t\t\t\tname = name({ name: entryName });\n\t\t\t\t\t\t}\n\t\t\t\t\t\tdata.options.runtime = name;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t);\n\t\t});\n\t}\n}\n\nmodule.exports = RuntimeChunkPlugin;\n"],"mappings":"AAAA;AACA;AACA;AACA;AAEA;AAEA;;AAEA,MAAMA,kBAAN,CAAyB;EACxBC,WAAW,CAACC,OAAD,EAAU;IACpB,KAAKA,OAAL,GAAe;MACdC,IAAI,EAAEC,UAAU,IAAK,WAAUA,UAAU,CAACD,IAAK,EADjC;MAEd,GAAGD;IAFW,CAAf;EAIA;EAED;AACD;AACA;AACA;AACA;;;EACCG,KAAK,CAACC,QAAD,EAAW;IACfA,QAAQ,CAACC,KAAT,CAAeC,eAAf,CAA+BC,GAA/B,CAAmC,oBAAnC,EAAyDC,WAAW,IAAI;MACvEA,WAAW,CAACH,KAAZ,CAAkBI,QAAlB,CAA2BF,GAA3B,CACC,oBADD,EAEC,CAACG,CAAD,WAA4B;QAAA,IAAxB;UAAET,IAAI,EAAEU;QAAR,CAAwB;QAC3B,IAAIA,SAAS,KAAKC,SAAlB,EAA6B;QAC7B,MAAMC,IAAI,GAAGL,WAAW,CAACM,OAAZ,CAAoBC,GAApB,CAAwBJ,SAAxB,CAAb;;QACA,IAAIE,IAAI,CAACb,OAAL,CAAagB,OAAb,KAAyBJ,SAAzB,IAAsC,CAACC,IAAI,CAACb,OAAL,CAAaiB,QAAxD,EAAkE;UACjE;UACA,IAAIhB,IAAI,GAAG,KAAKD,OAAL,CAAaC,IAAxB;;UACA,IAAI,OAAOA,IAAP,KAAgB,UAApB,EAAgC;YAC/BA,IAAI,GAAGA,IAAI,CAAC;cAAEA,IAAI,EAAEU;YAAR,CAAD,CAAX;UACA;;UACDE,IAAI,CAACb,OAAL,CAAagB,OAAb,GAAuBf,IAAvB;QACA;MACD,CAbF;IAeA,CAhBD;EAiBA;;AA/BuB;;AAkCzBiB,MAAM,CAACC,OAAP,GAAiBrB,kBAAjB"},"metadata":{},"sourceType":"script"}