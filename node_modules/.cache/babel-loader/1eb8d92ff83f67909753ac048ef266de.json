{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nconst forEachBail = require(\"./forEachBail\");\n/** @typedef {import(\"./Resolver\")} Resolver */\n\n/** @typedef {import(\"./Resolver\").ResolveContext} ResolveContext */\n\n/**\n * @typedef {Object} DescriptionFileInfo\n * @property {any=} content\n * @property {string} path\n * @property {string} directory\n */\n\n/**\n * @callback ErrorFirstCallback\n * @param {Error|null=} error\n * @param {DescriptionFileInfo=} result\n */\n\n/**\n * @param {Resolver} resolver resolver\n * @param {string} directory directory\n * @param {string[]} filenames filenames\n * @param {DescriptionFileInfo|undefined} oldInfo oldInfo\n * @param {ResolveContext} resolveContext resolveContext\n * @param {ErrorFirstCallback} callback callback\n */\n\n\nfunction loadDescriptionFile(resolver, directory, filenames, oldInfo, resolveContext, callback) {\n  (function findDescriptionFile() {\n    if (oldInfo && oldInfo.directory === directory) {\n      // We already have info for this directory and can reuse it\n      return callback(null, oldInfo);\n    }\n\n    forEachBail(filenames, (filename, callback) => {\n      const descriptionFilePath = resolver.join(directory, filename);\n\n      if (resolver.fileSystem.readJson) {\n        resolver.fileSystem.readJson(descriptionFilePath, (err, content) => {\n          if (err) {\n            if (typeof err.code !== \"undefined\") {\n              if (resolveContext.missingDependencies) {\n                resolveContext.missingDependencies.add(descriptionFilePath);\n              }\n\n              return callback();\n            }\n\n            if (resolveContext.fileDependencies) {\n              resolveContext.fileDependencies.add(descriptionFilePath);\n            }\n\n            return onJson(err);\n          }\n\n          if (resolveContext.fileDependencies) {\n            resolveContext.fileDependencies.add(descriptionFilePath);\n          }\n\n          onJson(null, content);\n        });\n      } else {\n        resolver.fileSystem.readFile(descriptionFilePath, (err, content) => {\n          if (err) {\n            if (resolveContext.missingDependencies) {\n              resolveContext.missingDependencies.add(descriptionFilePath);\n            }\n\n            return callback();\n          }\n\n          if (resolveContext.fileDependencies) {\n            resolveContext.fileDependencies.add(descriptionFilePath);\n          }\n\n          let json;\n\n          if (content) {\n            try {\n              json = JSON.parse(content.toString());\n            } catch (e) {\n              return onJson(e);\n            }\n          } else {\n            return onJson(new Error(\"No content in file\"));\n          }\n\n          onJson(null, json);\n        });\n      }\n\n      function onJson(err, content) {\n        if (err) {\n          if (resolveContext.log) resolveContext.log(descriptionFilePath + \" (directory description file): \" + err);else err.message = descriptionFilePath + \" (directory description file): \" + err;\n          return callback(err);\n        }\n\n        callback(null, {\n          content,\n          directory,\n          path: descriptionFilePath\n        });\n      }\n    }, (err, result) => {\n      if (err) return callback(err);\n\n      if (result) {\n        return callback(null, result);\n      } else {\n        const dir = cdUp(directory);\n\n        if (!dir) {\n          return callback();\n        } else {\n          directory = dir;\n          return findDescriptionFile();\n        }\n      }\n    });\n  })();\n}\n/**\n * @param {any} content content\n * @param {string|string[]} field field\n * @returns {object|string|number|boolean|undefined} field data\n */\n\n\nfunction getField(content, field) {\n  if (!content) return undefined;\n\n  if (Array.isArray(field)) {\n    let current = content;\n\n    for (let j = 0; j < field.length; j++) {\n      if (current === null || typeof current !== \"object\") {\n        current = null;\n        break;\n      }\n\n      current = current[field[j]];\n    }\n\n    return current;\n  } else {\n    return content[field];\n  }\n}\n/**\n * @param {string} directory directory\n * @returns {string|null} parent directory or null\n */\n\n\nfunction cdUp(directory) {\n  if (directory === \"/\") return null;\n  const i = directory.lastIndexOf(\"/\"),\n        j = directory.lastIndexOf(\"\\\\\");\n  const p = i < 0 ? j : j < 0 ? i : i < j ? j : i;\n  if (p < 0) return null;\n  return directory.substr(0, p || 1);\n}\n\nexports.loadDescriptionFile = loadDescriptionFile;\nexports.getField = getField;\nexports.cdUp = cdUp;","map":{"version":3,"names":["forEachBail","require","loadDescriptionFile","resolver","directory","filenames","oldInfo","resolveContext","callback","findDescriptionFile","filename","descriptionFilePath","join","fileSystem","readJson","err","content","code","missingDependencies","add","fileDependencies","onJson","readFile","json","JSON","parse","toString","e","Error","log","message","path","result","dir","cdUp","getField","field","undefined","Array","isArray","current","j","length","i","lastIndexOf","p","substr","exports"],"sources":["/Users/arpanbhandari/Documents/cod-ing/React/newsapp/node_modules/enhanced-resolve/lib/DescriptionFileUtils.js"],"sourcesContent":["/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\n\"use strict\";\n\nconst forEachBail = require(\"./forEachBail\");\n\n/** @typedef {import(\"./Resolver\")} Resolver */\n/** @typedef {import(\"./Resolver\").ResolveContext} ResolveContext */\n\n/**\n * @typedef {Object} DescriptionFileInfo\n * @property {any=} content\n * @property {string} path\n * @property {string} directory\n */\n\n/**\n * @callback ErrorFirstCallback\n * @param {Error|null=} error\n * @param {DescriptionFileInfo=} result\n */\n\n/**\n * @param {Resolver} resolver resolver\n * @param {string} directory directory\n * @param {string[]} filenames filenames\n * @param {DescriptionFileInfo|undefined} oldInfo oldInfo\n * @param {ResolveContext} resolveContext resolveContext\n * @param {ErrorFirstCallback} callback callback\n */\nfunction loadDescriptionFile(\n\tresolver,\n\tdirectory,\n\tfilenames,\n\toldInfo,\n\tresolveContext,\n\tcallback\n) {\n\t(function findDescriptionFile() {\n\t\tif (oldInfo && oldInfo.directory === directory) {\n\t\t\t// We already have info for this directory and can reuse it\n\t\t\treturn callback(null, oldInfo);\n\t\t}\n\t\tforEachBail(\n\t\t\tfilenames,\n\t\t\t(filename, callback) => {\n\t\t\t\tconst descriptionFilePath = resolver.join(directory, filename);\n\t\t\t\tif (resolver.fileSystem.readJson) {\n\t\t\t\t\tresolver.fileSystem.readJson(descriptionFilePath, (err, content) => {\n\t\t\t\t\t\tif (err) {\n\t\t\t\t\t\t\tif (typeof err.code !== \"undefined\") {\n\t\t\t\t\t\t\t\tif (resolveContext.missingDependencies) {\n\t\t\t\t\t\t\t\t\tresolveContext.missingDependencies.add(descriptionFilePath);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\treturn callback();\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif (resolveContext.fileDependencies) {\n\t\t\t\t\t\t\t\tresolveContext.fileDependencies.add(descriptionFilePath);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\treturn onJson(err);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (resolveContext.fileDependencies) {\n\t\t\t\t\t\t\tresolveContext.fileDependencies.add(descriptionFilePath);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tonJson(null, content);\n\t\t\t\t\t});\n\t\t\t\t} else {\n\t\t\t\t\tresolver.fileSystem.readFile(descriptionFilePath, (err, content) => {\n\t\t\t\t\t\tif (err) {\n\t\t\t\t\t\t\tif (resolveContext.missingDependencies) {\n\t\t\t\t\t\t\t\tresolveContext.missingDependencies.add(descriptionFilePath);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\treturn callback();\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (resolveContext.fileDependencies) {\n\t\t\t\t\t\t\tresolveContext.fileDependencies.add(descriptionFilePath);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tlet json;\n\n\t\t\t\t\t\tif (content) {\n\t\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t\tjson = JSON.parse(content.toString());\n\t\t\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\t\t\treturn onJson(e);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\treturn onJson(new Error(\"No content in file\"));\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tonJson(null, json);\n\t\t\t\t\t});\n\t\t\t\t}\n\n\t\t\t\tfunction onJson(err, content) {\n\t\t\t\t\tif (err) {\n\t\t\t\t\t\tif (resolveContext.log)\n\t\t\t\t\t\t\tresolveContext.log(\n\t\t\t\t\t\t\t\tdescriptionFilePath + \" (directory description file): \" + err\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\telse\n\t\t\t\t\t\t\terr.message =\n\t\t\t\t\t\t\t\tdescriptionFilePath + \" (directory description file): \" + err;\n\t\t\t\t\t\treturn callback(err);\n\t\t\t\t\t}\n\t\t\t\t\tcallback(null, {\n\t\t\t\t\t\tcontent,\n\t\t\t\t\t\tdirectory,\n\t\t\t\t\t\tpath: descriptionFilePath\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t},\n\t\t\t(err, result) => {\n\t\t\t\tif (err) return callback(err);\n\t\t\t\tif (result) {\n\t\t\t\t\treturn callback(null, result);\n\t\t\t\t} else {\n\t\t\t\t\tconst dir = cdUp(directory);\n\t\t\t\t\tif (!dir) {\n\t\t\t\t\t\treturn callback();\n\t\t\t\t\t} else {\n\t\t\t\t\t\tdirectory = dir;\n\t\t\t\t\t\treturn findDescriptionFile();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t);\n\t})();\n}\n\n/**\n * @param {any} content content\n * @param {string|string[]} field field\n * @returns {object|string|number|boolean|undefined} field data\n */\nfunction getField(content, field) {\n\tif (!content) return undefined;\n\tif (Array.isArray(field)) {\n\t\tlet current = content;\n\t\tfor (let j = 0; j < field.length; j++) {\n\t\t\tif (current === null || typeof current !== \"object\") {\n\t\t\t\tcurrent = null;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tcurrent = current[field[j]];\n\t\t}\n\t\treturn current;\n\t} else {\n\t\treturn content[field];\n\t}\n}\n\n/**\n * @param {string} directory directory\n * @returns {string|null} parent directory or null\n */\nfunction cdUp(directory) {\n\tif (directory === \"/\") return null;\n\tconst i = directory.lastIndexOf(\"/\"),\n\t\tj = directory.lastIndexOf(\"\\\\\");\n\tconst p = i < 0 ? j : j < 0 ? i : i < j ? j : i;\n\tif (p < 0) return null;\n\treturn directory.substr(0, p || 1);\n}\n\nexports.loadDescriptionFile = loadDescriptionFile;\nexports.getField = getField;\nexports.cdUp = cdUp;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}