{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n/**\n * @typedef {Object} CssTokenCallbacks\n * @property {function(string, number): boolean} isSelector\n * @property {function(string, number, number, number, number): number=} url\n * @property {function(string, number, number): number=} string\n * @property {function(string, number, number): number=} leftParenthesis\n * @property {function(string, number, number): number=} rightParenthesis\n * @property {function(string, number, number): number=} pseudoFunction\n * @property {function(string, number, number): number=} function\n * @property {function(string, number, number): number=} pseudoClass\n * @property {function(string, number, number): number=} atKeyword\n * @property {function(string, number, number): number=} class\n * @property {function(string, number, number): number=} identifier\n * @property {function(string, number, number): number=} id\n * @property {function(string, number, number): number=} leftCurlyBracket\n * @property {function(string, number, number): number=} rightCurlyBracket\n * @property {function(string, number, number): number=} semicolon\n * @property {function(string, number, number): number=} comma\n */\n\n/** @typedef {function(string, number, CssTokenCallbacks): number} CharHandler */\n// spec: https://drafts.csswg.org/css-syntax/\n\nconst CC_LINE_FEED = \"\\n\".charCodeAt(0);\nconst CC_CARRIAGE_RETURN = \"\\r\".charCodeAt(0);\nconst CC_FORM_FEED = \"\\f\".charCodeAt(0);\nconst CC_TAB = \"\\t\".charCodeAt(0);\nconst CC_SPACE = \" \".charCodeAt(0);\nconst CC_SLASH = \"/\".charCodeAt(0);\nconst CC_BACK_SLASH = \"\\\\\".charCodeAt(0);\nconst CC_ASTERISK = \"*\".charCodeAt(0);\nconst CC_LEFT_PARENTHESIS = \"(\".charCodeAt(0);\nconst CC_RIGHT_PARENTHESIS = \")\".charCodeAt(0);\nconst CC_LEFT_CURLY = \"{\".charCodeAt(0);\nconst CC_RIGHT_CURLY = \"}\".charCodeAt(0);\nconst CC_QUOTATION_MARK = '\"'.charCodeAt(0);\nconst CC_APOSTROPHE = \"'\".charCodeAt(0);\nconst CC_FULL_STOP = \".\".charCodeAt(0);\nconst CC_COLON = \":\".charCodeAt(0);\nconst CC_SEMICOLON = \";\".charCodeAt(0);\nconst CC_COMMA = \",\".charCodeAt(0);\nconst CC_PERCENTAGE = \"%\".charCodeAt(0);\nconst CC_AT_SIGN = \"@\".charCodeAt(0);\nconst CC_LOW_LINE = \"_\".charCodeAt(0);\nconst CC_LOWER_A = \"a\".charCodeAt(0);\nconst CC_LOWER_U = \"u\".charCodeAt(0);\nconst CC_LOWER_E = \"e\".charCodeAt(0);\nconst CC_LOWER_Z = \"z\".charCodeAt(0);\nconst CC_UPPER_A = \"A\".charCodeAt(0);\nconst CC_UPPER_E = \"E\".charCodeAt(0);\nconst CC_UPPER_Z = \"Z\".charCodeAt(0);\nconst CC_0 = \"0\".charCodeAt(0);\nconst CC_9 = \"9\".charCodeAt(0);\nconst CC_NUMBER_SIGN = \"#\".charCodeAt(0);\nconst CC_PLUS_SIGN = \"+\".charCodeAt(0);\nconst CC_HYPHEN_MINUS = \"-\".charCodeAt(0);\nconst CC_LESS_THAN_SIGN = \"<\".charCodeAt(0);\nconst CC_GREATER_THAN_SIGN = \">\".charCodeAt(0);\n\nconst _isNewLine = cc => {\n  return cc === CC_LINE_FEED || cc === CC_CARRIAGE_RETURN || cc === CC_FORM_FEED;\n};\n/** @type {CharHandler} */\n\n\nconst consumeSpace = (input, pos, callbacks) => {\n  let cc;\n\n  do {\n    pos++;\n    cc = input.charCodeAt(pos);\n  } while (_isWhiteSpace(cc));\n\n  return pos;\n};\n\nconst _isWhiteSpace = cc => {\n  return cc === CC_LINE_FEED || cc === CC_CARRIAGE_RETURN || cc === CC_FORM_FEED || cc === CC_TAB || cc === CC_SPACE;\n};\n/** @type {CharHandler} */\n\n\nconst consumeSingleCharToken = (input, pos, callbacks) => {\n  return pos + 1;\n};\n/** @type {CharHandler} */\n\n\nconst consumePotentialComment = (input, pos, callbacks) => {\n  pos++;\n  if (pos === input.length) return pos;\n  let cc = input.charCodeAt(pos);\n  if (cc !== CC_ASTERISK) return pos;\n\n  for (;;) {\n    pos++;\n    if (pos === input.length) return pos;\n    cc = input.charCodeAt(pos);\n\n    while (cc === CC_ASTERISK) {\n      pos++;\n      if (pos === input.length) return pos;\n      cc = input.charCodeAt(pos);\n      if (cc === CC_SLASH) return pos + 1;\n    }\n  }\n};\n/** @type {function(number): CharHandler} */\n\n\nconst consumeString = end => (input, pos, callbacks) => {\n  const start = pos;\n  pos = _consumeString(input, pos, end);\n\n  if (callbacks.string !== undefined) {\n    pos = callbacks.string(input, start, pos);\n  }\n\n  return pos;\n};\n\nconst _consumeString = (input, pos, end) => {\n  pos++;\n\n  for (;;) {\n    if (pos === input.length) return pos;\n    const cc = input.charCodeAt(pos);\n    if (cc === end) return pos + 1;\n\n    if (_isNewLine(cc)) {\n      // bad string\n      return pos;\n    }\n\n    if (cc === CC_BACK_SLASH) {\n      // we don't need to fully parse the escaped code point\n      // just skip over a potential new line\n      pos++;\n      if (pos === input.length) return pos;\n      pos++;\n    } else {\n      pos++;\n    }\n  }\n};\n\nconst _isIdentifierStartCode = cc => {\n  return cc === CC_LOW_LINE || cc >= CC_LOWER_A && cc <= CC_LOWER_Z || cc >= CC_UPPER_A && cc <= CC_UPPER_Z || cc > 0x80;\n};\n\nconst _isDigit = cc => {\n  return cc >= CC_0 && cc <= CC_9;\n};\n\nconst _startsIdentifier = (input, pos) => {\n  const cc = input.charCodeAt(pos);\n\n  if (cc === CC_HYPHEN_MINUS) {\n    if (pos === input.length) return false;\n    const cc = input.charCodeAt(pos + 1);\n    if (cc === CC_HYPHEN_MINUS) return true;\n\n    if (cc === CC_BACK_SLASH) {\n      const cc = input.charCodeAt(pos + 2);\n      return !_isNewLine(cc);\n    }\n\n    return _isIdentifierStartCode(cc);\n  }\n\n  if (cc === CC_BACK_SLASH) {\n    const cc = input.charCodeAt(pos + 1);\n    return !_isNewLine(cc);\n  }\n\n  return _isIdentifierStartCode(cc);\n};\n/** @type {CharHandler} */\n\n\nconst consumeNumberSign = (input, pos, callbacks) => {\n  const start = pos;\n  pos++;\n  if (pos === input.length) return pos;\n\n  if (callbacks.isSelector(input, pos) && _startsIdentifier(input, pos)) {\n    pos = _consumeIdentifier(input, pos);\n\n    if (callbacks.id !== undefined) {\n      return callbacks.id(input, start, pos);\n    }\n  }\n\n  return pos;\n};\n/** @type {CharHandler} */\n\n\nconst consumeMinus = (input, pos, callbacks) => {\n  const start = pos;\n  pos++;\n  if (pos === input.length) return pos;\n  const cc = input.charCodeAt(pos);\n\n  if (cc === CC_FULL_STOP || _isDigit(cc)) {\n    return consumeNumericToken(input, pos, callbacks);\n  } else if (cc === CC_HYPHEN_MINUS) {\n    pos++;\n    if (pos === input.length) return pos;\n    const cc = input.charCodeAt(pos);\n\n    if (cc === CC_GREATER_THAN_SIGN) {\n      return pos + 1;\n    } else {\n      pos = _consumeIdentifier(input, pos);\n\n      if (callbacks.identifier !== undefined) {\n        return callbacks.identifier(input, start, pos);\n      }\n    }\n  } else if (cc === CC_BACK_SLASH) {\n    if (pos + 1 === input.length) return pos;\n    const cc = input.charCodeAt(pos + 1);\n    if (_isNewLine(cc)) return pos;\n    pos = _consumeIdentifier(input, pos);\n\n    if (callbacks.identifier !== undefined) {\n      return callbacks.identifier(input, start, pos);\n    }\n  } else if (_isIdentifierStartCode(cc)) {\n    pos++;\n    pos = _consumeIdentifier(input, pos);\n\n    if (callbacks.identifier !== undefined) {\n      return callbacks.identifier(input, start, pos);\n    }\n  }\n\n  return pos;\n};\n/** @type {CharHandler} */\n\n\nconst consumeDot = (input, pos, callbacks) => {\n  const start = pos;\n  pos++;\n  if (pos === input.length) return pos;\n  const cc = input.charCodeAt(pos);\n  if (_isDigit(cc)) return consumeNumericToken(input, pos - 2, callbacks);\n  if (!callbacks.isSelector(input, pos) || !_startsIdentifier(input, pos)) return pos;\n  pos = _consumeIdentifier(input, pos);\n  if (callbacks.class !== undefined) return callbacks.class(input, start, pos);\n  return pos;\n};\n/** @type {CharHandler} */\n\n\nconst consumeNumericToken = (input, pos, callbacks) => {\n  pos = _consumeNumber(input, pos);\n  if (pos === input.length) return pos;\n  if (_startsIdentifier(input, pos)) return _consumeIdentifier(input, pos);\n  const cc = input.charCodeAt(pos);\n  if (cc === CC_PERCENTAGE) return pos + 1;\n  return pos;\n};\n/** @type {CharHandler} */\n\n\nconst consumeOtherIdentifier = (input, pos, callbacks) => {\n  const start = pos;\n  pos = _consumeIdentifier(input, pos);\n\n  if (pos !== input.length && !callbacks.isSelector(input, pos) && input.charCodeAt(pos) === CC_LEFT_PARENTHESIS) {\n    pos++;\n\n    if (callbacks.function !== undefined) {\n      return callbacks.function(input, start, pos);\n    }\n  } else {\n    if (callbacks.identifier !== undefined) {\n      return callbacks.identifier(input, start, pos);\n    }\n  }\n\n  return pos;\n};\n/** @type {CharHandler} */\n\n\nconst consumePotentialUrl = (input, pos, callbacks) => {\n  const start = pos;\n  pos = _consumeIdentifier(input, pos);\n\n  if (pos === start + 3 && input.slice(start, pos + 1) === \"url(\") {\n    pos++;\n    let cc = input.charCodeAt(pos);\n\n    while (_isWhiteSpace(cc)) {\n      pos++;\n      if (pos === input.length) return pos;\n      cc = input.charCodeAt(pos);\n    }\n\n    if (cc === CC_QUOTATION_MARK || cc === CC_APOSTROPHE) {\n      pos++;\n      const contentStart = pos;\n      pos = _consumeString(input, pos, cc);\n      const contentEnd = pos - 1;\n      cc = input.charCodeAt(pos);\n\n      while (_isWhiteSpace(cc)) {\n        pos++;\n        if (pos === input.length) return pos;\n        cc = input.charCodeAt(pos);\n      }\n\n      if (cc !== CC_RIGHT_PARENTHESIS) return pos;\n      pos++;\n      if (callbacks.url !== undefined) return callbacks.url(input, start, pos, contentStart, contentEnd);\n      return pos;\n    } else {\n      const contentStart = pos;\n      let contentEnd;\n\n      for (;;) {\n        if (cc === CC_BACK_SLASH) {\n          pos++;\n          if (pos === input.length) return pos;\n          pos++;\n        } else if (_isWhiteSpace(cc)) {\n          contentEnd = pos;\n\n          do {\n            pos++;\n            if (pos === input.length) return pos;\n            cc = input.charCodeAt(pos);\n          } while (_isWhiteSpace(cc));\n\n          if (cc !== CC_RIGHT_PARENTHESIS) return pos;\n          pos++;\n\n          if (callbacks.url !== undefined) {\n            return callbacks.url(input, start, pos, contentStart, contentEnd);\n          }\n\n          return pos;\n        } else if (cc === CC_RIGHT_PARENTHESIS) {\n          contentEnd = pos;\n          pos++;\n\n          if (callbacks.url !== undefined) {\n            return callbacks.url(input, start, pos, contentStart, contentEnd);\n          }\n\n          return pos;\n        } else if (cc === CC_LEFT_PARENTHESIS) {\n          return pos;\n        } else {\n          pos++;\n        }\n\n        if (pos === input.length) return pos;\n        cc = input.charCodeAt(pos);\n      }\n    }\n  } else {\n    if (callbacks.identifier !== undefined) {\n      return callbacks.identifier(input, start, pos);\n    }\n\n    return pos;\n  }\n};\n/** @type {CharHandler} */\n\n\nconst consumePotentialPseudo = (input, pos, callbacks) => {\n  const start = pos;\n  pos++;\n  if (!callbacks.isSelector(input, pos) || !_startsIdentifier(input, pos)) return pos;\n  pos = _consumeIdentifier(input, pos);\n  let cc = input.charCodeAt(pos);\n\n  if (cc === CC_LEFT_PARENTHESIS) {\n    pos++;\n\n    if (callbacks.pseudoFunction !== undefined) {\n      return callbacks.pseudoFunction(input, start, pos);\n    }\n\n    return pos;\n  }\n\n  if (callbacks.pseudoClass !== undefined) {\n    return callbacks.pseudoClass(input, start, pos);\n  }\n\n  return pos;\n};\n/** @type {CharHandler} */\n\n\nconst consumeLeftParenthesis = (input, pos, callbacks) => {\n  pos++;\n\n  if (callbacks.leftParenthesis !== undefined) {\n    return callbacks.leftParenthesis(input, pos - 1, pos);\n  }\n\n  return pos;\n};\n/** @type {CharHandler} */\n\n\nconst consumeRightParenthesis = (input, pos, callbacks) => {\n  pos++;\n\n  if (callbacks.rightParenthesis !== undefined) {\n    return callbacks.rightParenthesis(input, pos - 1, pos);\n  }\n\n  return pos;\n};\n/** @type {CharHandler} */\n\n\nconst consumeLeftCurlyBracket = (input, pos, callbacks) => {\n  pos++;\n\n  if (callbacks.leftCurlyBracket !== undefined) {\n    return callbacks.leftCurlyBracket(input, pos - 1, pos);\n  }\n\n  return pos;\n};\n/** @type {CharHandler} */\n\n\nconst consumeRightCurlyBracket = (input, pos, callbacks) => {\n  pos++;\n\n  if (callbacks.rightCurlyBracket !== undefined) {\n    return callbacks.rightCurlyBracket(input, pos - 1, pos);\n  }\n\n  return pos;\n};\n/** @type {CharHandler} */\n\n\nconst consumeSemicolon = (input, pos, callbacks) => {\n  pos++;\n\n  if (callbacks.semicolon !== undefined) {\n    return callbacks.semicolon(input, pos - 1, pos);\n  }\n\n  return pos;\n};\n/** @type {CharHandler} */\n\n\nconst consumeComma = (input, pos, callbacks) => {\n  pos++;\n\n  if (callbacks.comma !== undefined) {\n    return callbacks.comma(input, pos - 1, pos);\n  }\n\n  return pos;\n};\n\nconst _consumeIdentifier = (input, pos) => {\n  for (;;) {\n    const cc = input.charCodeAt(pos);\n\n    if (cc === CC_BACK_SLASH) {\n      pos++;\n      if (pos === input.length) return pos;\n      pos++;\n    } else if (_isIdentifierStartCode(cc) || _isDigit(cc) || cc === CC_HYPHEN_MINUS) {\n      pos++;\n    } else {\n      return pos;\n    }\n  }\n};\n\nconst _consumeNumber = (input, pos) => {\n  pos++;\n  if (pos === input.length) return pos;\n  let cc = input.charCodeAt(pos);\n\n  while (_isDigit(cc)) {\n    pos++;\n    if (pos === input.length) return pos;\n    cc = input.charCodeAt(pos);\n  }\n\n  if (cc === CC_FULL_STOP && pos + 1 !== input.length) {\n    const next = input.charCodeAt(pos + 1);\n\n    if (_isDigit(next)) {\n      pos += 2;\n      cc = input.charCodeAt(pos);\n\n      while (_isDigit(cc)) {\n        pos++;\n        if (pos === input.length) return pos;\n        cc = input.charCodeAt(pos);\n      }\n    }\n  }\n\n  if (cc === CC_LOWER_E || cc === CC_UPPER_E) {\n    if (pos + 1 !== input.length) {\n      const next = input.charCodeAt(pos + 2);\n\n      if (_isDigit(next)) {\n        pos += 2;\n      } else if ((next === CC_HYPHEN_MINUS || next === CC_PLUS_SIGN) && pos + 2 !== input.length) {\n        const next = input.charCodeAt(pos + 2);\n\n        if (_isDigit(next)) {\n          pos += 3;\n        } else {\n          return pos;\n        }\n      } else {\n        return pos;\n      }\n    }\n  } else {\n    return pos;\n  }\n\n  cc = input.charCodeAt(pos);\n\n  while (_isDigit(cc)) {\n    pos++;\n    if (pos === input.length) return pos;\n    cc = input.charCodeAt(pos);\n  }\n\n  return pos;\n};\n/** @type {CharHandler} */\n\n\nconst consumeLessThan = (input, pos, callbacks) => {\n  if (input.slice(pos + 1, pos + 4) === \"!--\") return pos + 4;\n  return pos + 1;\n};\n/** @type {CharHandler} */\n\n\nconst consumeAt = (input, pos, callbacks) => {\n  const start = pos;\n  pos++;\n  if (pos === input.length) return pos;\n\n  if (_startsIdentifier(input, pos)) {\n    pos = _consumeIdentifier(input, pos);\n\n    if (callbacks.atKeyword !== undefined) {\n      pos = callbacks.atKeyword(input, start, pos);\n    }\n  }\n\n  return pos;\n};\n\nconst CHAR_MAP = Array.from({\n  length: 0x80\n}, (_, cc) => {\n  // https://drafts.csswg.org/css-syntax/#consume-token\n  switch (cc) {\n    case CC_LINE_FEED:\n    case CC_CARRIAGE_RETURN:\n    case CC_FORM_FEED:\n    case CC_TAB:\n    case CC_SPACE:\n      return consumeSpace;\n\n    case CC_QUOTATION_MARK:\n    case CC_APOSTROPHE:\n      return consumeString(cc);\n\n    case CC_NUMBER_SIGN:\n      return consumeNumberSign;\n\n    case CC_SLASH:\n      return consumePotentialComment;\n    // case CC_LEFT_SQUARE:\n    // case CC_RIGHT_SQUARE:\n    // case CC_COMMA:\n    // case CC_COLON:\n    // \treturn consumeSingleCharToken;\n\n    case CC_COMMA:\n      return consumeComma;\n\n    case CC_SEMICOLON:\n      return consumeSemicolon;\n\n    case CC_LEFT_PARENTHESIS:\n      return consumeLeftParenthesis;\n\n    case CC_RIGHT_PARENTHESIS:\n      return consumeRightParenthesis;\n\n    case CC_LEFT_CURLY:\n      return consumeLeftCurlyBracket;\n\n    case CC_RIGHT_CURLY:\n      return consumeRightCurlyBracket;\n\n    case CC_COLON:\n      return consumePotentialPseudo;\n\n    case CC_PLUS_SIGN:\n      return consumeNumericToken;\n\n    case CC_FULL_STOP:\n      return consumeDot;\n\n    case CC_HYPHEN_MINUS:\n      return consumeMinus;\n\n    case CC_LESS_THAN_SIGN:\n      return consumeLessThan;\n\n    case CC_AT_SIGN:\n      return consumeAt;\n\n    case CC_LOWER_U:\n      return consumePotentialUrl;\n\n    case CC_LOW_LINE:\n      return consumeOtherIdentifier;\n\n    default:\n      if (_isDigit(cc)) return consumeNumericToken;\n\n      if (cc >= CC_LOWER_A && cc <= CC_LOWER_Z || cc >= CC_UPPER_A && cc <= CC_UPPER_Z) {\n        return consumeOtherIdentifier;\n      }\n\n      return consumeSingleCharToken;\n  }\n});\n/**\n * @param {string} input input css\n * @param {CssTokenCallbacks} callbacks callbacks\n * @returns {void}\n */\n\nmodule.exports = (input, callbacks) => {\n  let pos = 0;\n\n  while (pos < input.length) {\n    const cc = input.charCodeAt(pos);\n\n    if (cc < 0x80) {\n      pos = CHAR_MAP[cc](input, pos, callbacks);\n    } else {\n      pos++;\n    }\n  }\n};\n\nmodule.exports.eatComments = (input, pos) => {\n  loop: for (;;) {\n    const cc = input.charCodeAt(pos);\n\n    if (cc === CC_SLASH) {\n      if (pos === input.length) return pos;\n      let cc = input.charCodeAt(pos + 1);\n      if (cc !== CC_ASTERISK) return pos;\n      pos++;\n\n      for (;;) {\n        pos++;\n        if (pos === input.length) return pos;\n        cc = input.charCodeAt(pos);\n\n        while (cc === CC_ASTERISK) {\n          pos++;\n          if (pos === input.length) return pos;\n          cc = input.charCodeAt(pos);\n\n          if (cc === CC_SLASH) {\n            pos++;\n            continue loop;\n          }\n        }\n      }\n    }\n\n    return pos;\n  }\n};\n\nmodule.exports.eatWhitespaceAndComments = (input, pos) => {\n  loop: for (;;) {\n    const cc = input.charCodeAt(pos);\n\n    if (cc === CC_SLASH) {\n      if (pos === input.length) return pos;\n      let cc = input.charCodeAt(pos + 1);\n      if (cc !== CC_ASTERISK) return pos;\n      pos++;\n\n      for (;;) {\n        pos++;\n        if (pos === input.length) return pos;\n        cc = input.charCodeAt(pos);\n\n        while (cc === CC_ASTERISK) {\n          pos++;\n          if (pos === input.length) return pos;\n          cc = input.charCodeAt(pos);\n\n          if (cc === CC_SLASH) {\n            pos++;\n            continue loop;\n          }\n        }\n      }\n    } else if (_isWhiteSpace(cc)) {\n      pos++;\n      continue;\n    }\n\n    return pos;\n  }\n};","map":{"version":3,"names":["CC_LINE_FEED","charCodeAt","CC_CARRIAGE_RETURN","CC_FORM_FEED","CC_TAB","CC_SPACE","CC_SLASH","CC_BACK_SLASH","CC_ASTERISK","CC_LEFT_PARENTHESIS","CC_RIGHT_PARENTHESIS","CC_LEFT_CURLY","CC_RIGHT_CURLY","CC_QUOTATION_MARK","CC_APOSTROPHE","CC_FULL_STOP","CC_COLON","CC_SEMICOLON","CC_COMMA","CC_PERCENTAGE","CC_AT_SIGN","CC_LOW_LINE","CC_LOWER_A","CC_LOWER_U","CC_LOWER_E","CC_LOWER_Z","CC_UPPER_A","CC_UPPER_E","CC_UPPER_Z","CC_0","CC_9","CC_NUMBER_SIGN","CC_PLUS_SIGN","CC_HYPHEN_MINUS","CC_LESS_THAN_SIGN","CC_GREATER_THAN_SIGN","_isNewLine","cc","consumeSpace","input","pos","callbacks","_isWhiteSpace","consumeSingleCharToken","consumePotentialComment","length","consumeString","end","start","_consumeString","string","undefined","_isIdentifierStartCode","_isDigit","_startsIdentifier","consumeNumberSign","isSelector","_consumeIdentifier","id","consumeMinus","consumeNumericToken","identifier","consumeDot","class","_consumeNumber","consumeOtherIdentifier","function","consumePotentialUrl","slice","contentStart","contentEnd","url","consumePotentialPseudo","pseudoFunction","pseudoClass","consumeLeftParenthesis","leftParenthesis","consumeRightParenthesis","rightParenthesis","consumeLeftCurlyBracket","leftCurlyBracket","consumeRightCurlyBracket","rightCurlyBracket","consumeSemicolon","semicolon","consumeComma","comma","next","consumeLessThan","consumeAt","atKeyword","CHAR_MAP","Array","from","_","module","exports","eatComments","loop","eatWhitespaceAndComments"],"sources":["/Users/arpanbhandari/Documents/cod-ing/React/newsapp/node_modules/webpack/lib/css/walkCssTokens.js"],"sourcesContent":["/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\n\"use strict\";\n\n/**\n * @typedef {Object} CssTokenCallbacks\n * @property {function(string, number): boolean} isSelector\n * @property {function(string, number, number, number, number): number=} url\n * @property {function(string, number, number): number=} string\n * @property {function(string, number, number): number=} leftParenthesis\n * @property {function(string, number, number): number=} rightParenthesis\n * @property {function(string, number, number): number=} pseudoFunction\n * @property {function(string, number, number): number=} function\n * @property {function(string, number, number): number=} pseudoClass\n * @property {function(string, number, number): number=} atKeyword\n * @property {function(string, number, number): number=} class\n * @property {function(string, number, number): number=} identifier\n * @property {function(string, number, number): number=} id\n * @property {function(string, number, number): number=} leftCurlyBracket\n * @property {function(string, number, number): number=} rightCurlyBracket\n * @property {function(string, number, number): number=} semicolon\n * @property {function(string, number, number): number=} comma\n */\n\n/** @typedef {function(string, number, CssTokenCallbacks): number} CharHandler */\n\n// spec: https://drafts.csswg.org/css-syntax/\n\nconst CC_LINE_FEED = \"\\n\".charCodeAt(0);\nconst CC_CARRIAGE_RETURN = \"\\r\".charCodeAt(0);\nconst CC_FORM_FEED = \"\\f\".charCodeAt(0);\n\nconst CC_TAB = \"\\t\".charCodeAt(0);\nconst CC_SPACE = \" \".charCodeAt(0);\n\nconst CC_SLASH = \"/\".charCodeAt(0);\nconst CC_BACK_SLASH = \"\\\\\".charCodeAt(0);\nconst CC_ASTERISK = \"*\".charCodeAt(0);\n\nconst CC_LEFT_PARENTHESIS = \"(\".charCodeAt(0);\nconst CC_RIGHT_PARENTHESIS = \")\".charCodeAt(0);\nconst CC_LEFT_CURLY = \"{\".charCodeAt(0);\nconst CC_RIGHT_CURLY = \"}\".charCodeAt(0);\n\nconst CC_QUOTATION_MARK = '\"'.charCodeAt(0);\nconst CC_APOSTROPHE = \"'\".charCodeAt(0);\n\nconst CC_FULL_STOP = \".\".charCodeAt(0);\nconst CC_COLON = \":\".charCodeAt(0);\nconst CC_SEMICOLON = \";\".charCodeAt(0);\nconst CC_COMMA = \",\".charCodeAt(0);\nconst CC_PERCENTAGE = \"%\".charCodeAt(0);\nconst CC_AT_SIGN = \"@\".charCodeAt(0);\n\nconst CC_LOW_LINE = \"_\".charCodeAt(0);\nconst CC_LOWER_A = \"a\".charCodeAt(0);\nconst CC_LOWER_U = \"u\".charCodeAt(0);\nconst CC_LOWER_E = \"e\".charCodeAt(0);\nconst CC_LOWER_Z = \"z\".charCodeAt(0);\nconst CC_UPPER_A = \"A\".charCodeAt(0);\nconst CC_UPPER_E = \"E\".charCodeAt(0);\nconst CC_UPPER_Z = \"Z\".charCodeAt(0);\nconst CC_0 = \"0\".charCodeAt(0);\nconst CC_9 = \"9\".charCodeAt(0);\n\nconst CC_NUMBER_SIGN = \"#\".charCodeAt(0);\nconst CC_PLUS_SIGN = \"+\".charCodeAt(0);\nconst CC_HYPHEN_MINUS = \"-\".charCodeAt(0);\n\nconst CC_LESS_THAN_SIGN = \"<\".charCodeAt(0);\nconst CC_GREATER_THAN_SIGN = \">\".charCodeAt(0);\n\nconst _isNewLine = cc => {\n\treturn (\n\t\tcc === CC_LINE_FEED || cc === CC_CARRIAGE_RETURN || cc === CC_FORM_FEED\n\t);\n};\n\n/** @type {CharHandler} */\nconst consumeSpace = (input, pos, callbacks) => {\n\tlet cc;\n\tdo {\n\t\tpos++;\n\t\tcc = input.charCodeAt(pos);\n\t} while (_isWhiteSpace(cc));\n\treturn pos;\n};\n\nconst _isWhiteSpace = cc => {\n\treturn (\n\t\tcc === CC_LINE_FEED ||\n\t\tcc === CC_CARRIAGE_RETURN ||\n\t\tcc === CC_FORM_FEED ||\n\t\tcc === CC_TAB ||\n\t\tcc === CC_SPACE\n\t);\n};\n\n/** @type {CharHandler} */\nconst consumeSingleCharToken = (input, pos, callbacks) => {\n\treturn pos + 1;\n};\n\n/** @type {CharHandler} */\nconst consumePotentialComment = (input, pos, callbacks) => {\n\tpos++;\n\tif (pos === input.length) return pos;\n\tlet cc = input.charCodeAt(pos);\n\tif (cc !== CC_ASTERISK) return pos;\n\tfor (;;) {\n\t\tpos++;\n\t\tif (pos === input.length) return pos;\n\t\tcc = input.charCodeAt(pos);\n\t\twhile (cc === CC_ASTERISK) {\n\t\t\tpos++;\n\t\t\tif (pos === input.length) return pos;\n\t\t\tcc = input.charCodeAt(pos);\n\t\t\tif (cc === CC_SLASH) return pos + 1;\n\t\t}\n\t}\n};\n\n/** @type {function(number): CharHandler} */\nconst consumeString = end => (input, pos, callbacks) => {\n\tconst start = pos;\n\tpos = _consumeString(input, pos, end);\n\tif (callbacks.string !== undefined) {\n\t\tpos = callbacks.string(input, start, pos);\n\t}\n\treturn pos;\n};\n\nconst _consumeString = (input, pos, end) => {\n\tpos++;\n\tfor (;;) {\n\t\tif (pos === input.length) return pos;\n\t\tconst cc = input.charCodeAt(pos);\n\t\tif (cc === end) return pos + 1;\n\t\tif (_isNewLine(cc)) {\n\t\t\t// bad string\n\t\t\treturn pos;\n\t\t}\n\t\tif (cc === CC_BACK_SLASH) {\n\t\t\t// we don't need to fully parse the escaped code point\n\t\t\t// just skip over a potential new line\n\t\t\tpos++;\n\t\t\tif (pos === input.length) return pos;\n\t\t\tpos++;\n\t\t} else {\n\t\t\tpos++;\n\t\t}\n\t}\n};\n\nconst _isIdentifierStartCode = cc => {\n\treturn (\n\t\tcc === CC_LOW_LINE ||\n\t\t(cc >= CC_LOWER_A && cc <= CC_LOWER_Z) ||\n\t\t(cc >= CC_UPPER_A && cc <= CC_UPPER_Z) ||\n\t\tcc > 0x80\n\t);\n};\n\nconst _isDigit = cc => {\n\treturn cc >= CC_0 && cc <= CC_9;\n};\n\nconst _startsIdentifier = (input, pos) => {\n\tconst cc = input.charCodeAt(pos);\n\tif (cc === CC_HYPHEN_MINUS) {\n\t\tif (pos === input.length) return false;\n\t\tconst cc = input.charCodeAt(pos + 1);\n\t\tif (cc === CC_HYPHEN_MINUS) return true;\n\t\tif (cc === CC_BACK_SLASH) {\n\t\t\tconst cc = input.charCodeAt(pos + 2);\n\t\t\treturn !_isNewLine(cc);\n\t\t}\n\t\treturn _isIdentifierStartCode(cc);\n\t}\n\tif (cc === CC_BACK_SLASH) {\n\t\tconst cc = input.charCodeAt(pos + 1);\n\t\treturn !_isNewLine(cc);\n\t}\n\treturn _isIdentifierStartCode(cc);\n};\n\n/** @type {CharHandler} */\nconst consumeNumberSign = (input, pos, callbacks) => {\n\tconst start = pos;\n\tpos++;\n\tif (pos === input.length) return pos;\n\tif (callbacks.isSelector(input, pos) && _startsIdentifier(input, pos)) {\n\t\tpos = _consumeIdentifier(input, pos);\n\t\tif (callbacks.id !== undefined) {\n\t\t\treturn callbacks.id(input, start, pos);\n\t\t}\n\t}\n\treturn pos;\n};\n\n/** @type {CharHandler} */\nconst consumeMinus = (input, pos, callbacks) => {\n\tconst start = pos;\n\tpos++;\n\tif (pos === input.length) return pos;\n\tconst cc = input.charCodeAt(pos);\n\tif (cc === CC_FULL_STOP || _isDigit(cc)) {\n\t\treturn consumeNumericToken(input, pos, callbacks);\n\t} else if (cc === CC_HYPHEN_MINUS) {\n\t\tpos++;\n\t\tif (pos === input.length) return pos;\n\t\tconst cc = input.charCodeAt(pos);\n\t\tif (cc === CC_GREATER_THAN_SIGN) {\n\t\t\treturn pos + 1;\n\t\t} else {\n\t\t\tpos = _consumeIdentifier(input, pos);\n\t\t\tif (callbacks.identifier !== undefined) {\n\t\t\t\treturn callbacks.identifier(input, start, pos);\n\t\t\t}\n\t\t}\n\t} else if (cc === CC_BACK_SLASH) {\n\t\tif (pos + 1 === input.length) return pos;\n\t\tconst cc = input.charCodeAt(pos + 1);\n\t\tif (_isNewLine(cc)) return pos;\n\t\tpos = _consumeIdentifier(input, pos);\n\t\tif (callbacks.identifier !== undefined) {\n\t\t\treturn callbacks.identifier(input, start, pos);\n\t\t}\n\t} else if (_isIdentifierStartCode(cc)) {\n\t\tpos++;\n\t\tpos = _consumeIdentifier(input, pos);\n\t\tif (callbacks.identifier !== undefined) {\n\t\t\treturn callbacks.identifier(input, start, pos);\n\t\t}\n\t}\n\treturn pos;\n};\n\n/** @type {CharHandler} */\nconst consumeDot = (input, pos, callbacks) => {\n\tconst start = pos;\n\tpos++;\n\tif (pos === input.length) return pos;\n\tconst cc = input.charCodeAt(pos);\n\tif (_isDigit(cc)) return consumeNumericToken(input, pos - 2, callbacks);\n\tif (!callbacks.isSelector(input, pos) || !_startsIdentifier(input, pos))\n\t\treturn pos;\n\tpos = _consumeIdentifier(input, pos);\n\tif (callbacks.class !== undefined) return callbacks.class(input, start, pos);\n\treturn pos;\n};\n\n/** @type {CharHandler} */\nconst consumeNumericToken = (input, pos, callbacks) => {\n\tpos = _consumeNumber(input, pos);\n\tif (pos === input.length) return pos;\n\tif (_startsIdentifier(input, pos)) return _consumeIdentifier(input, pos);\n\tconst cc = input.charCodeAt(pos);\n\tif (cc === CC_PERCENTAGE) return pos + 1;\n\treturn pos;\n};\n\n/** @type {CharHandler} */\nconst consumeOtherIdentifier = (input, pos, callbacks) => {\n\tconst start = pos;\n\tpos = _consumeIdentifier(input, pos);\n\tif (\n\t\tpos !== input.length &&\n\t\t!callbacks.isSelector(input, pos) &&\n\t\tinput.charCodeAt(pos) === CC_LEFT_PARENTHESIS\n\t) {\n\t\tpos++;\n\t\tif (callbacks.function !== undefined) {\n\t\t\treturn callbacks.function(input, start, pos);\n\t\t}\n\t} else {\n\t\tif (callbacks.identifier !== undefined) {\n\t\t\treturn callbacks.identifier(input, start, pos);\n\t\t}\n\t}\n\treturn pos;\n};\n\n/** @type {CharHandler} */\nconst consumePotentialUrl = (input, pos, callbacks) => {\n\tconst start = pos;\n\tpos = _consumeIdentifier(input, pos);\n\tif (pos === start + 3 && input.slice(start, pos + 1) === \"url(\") {\n\t\tpos++;\n\t\tlet cc = input.charCodeAt(pos);\n\t\twhile (_isWhiteSpace(cc)) {\n\t\t\tpos++;\n\t\t\tif (pos === input.length) return pos;\n\t\t\tcc = input.charCodeAt(pos);\n\t\t}\n\t\tif (cc === CC_QUOTATION_MARK || cc === CC_APOSTROPHE) {\n\t\t\tpos++;\n\t\t\tconst contentStart = pos;\n\t\t\tpos = _consumeString(input, pos, cc);\n\t\t\tconst contentEnd = pos - 1;\n\t\t\tcc = input.charCodeAt(pos);\n\t\t\twhile (_isWhiteSpace(cc)) {\n\t\t\t\tpos++;\n\t\t\t\tif (pos === input.length) return pos;\n\t\t\t\tcc = input.charCodeAt(pos);\n\t\t\t}\n\t\t\tif (cc !== CC_RIGHT_PARENTHESIS) return pos;\n\t\t\tpos++;\n\t\t\tif (callbacks.url !== undefined)\n\t\t\t\treturn callbacks.url(input, start, pos, contentStart, contentEnd);\n\t\t\treturn pos;\n\t\t} else {\n\t\t\tconst contentStart = pos;\n\t\t\tlet contentEnd;\n\t\t\tfor (;;) {\n\t\t\t\tif (cc === CC_BACK_SLASH) {\n\t\t\t\t\tpos++;\n\t\t\t\t\tif (pos === input.length) return pos;\n\t\t\t\t\tpos++;\n\t\t\t\t} else if (_isWhiteSpace(cc)) {\n\t\t\t\t\tcontentEnd = pos;\n\t\t\t\t\tdo {\n\t\t\t\t\t\tpos++;\n\t\t\t\t\t\tif (pos === input.length) return pos;\n\t\t\t\t\t\tcc = input.charCodeAt(pos);\n\t\t\t\t\t} while (_isWhiteSpace(cc));\n\t\t\t\t\tif (cc !== CC_RIGHT_PARENTHESIS) return pos;\n\t\t\t\t\tpos++;\n\t\t\t\t\tif (callbacks.url !== undefined) {\n\t\t\t\t\t\treturn callbacks.url(input, start, pos, contentStart, contentEnd);\n\t\t\t\t\t}\n\t\t\t\t\treturn pos;\n\t\t\t\t} else if (cc === CC_RIGHT_PARENTHESIS) {\n\t\t\t\t\tcontentEnd = pos;\n\t\t\t\t\tpos++;\n\t\t\t\t\tif (callbacks.url !== undefined) {\n\t\t\t\t\t\treturn callbacks.url(input, start, pos, contentStart, contentEnd);\n\t\t\t\t\t}\n\t\t\t\t\treturn pos;\n\t\t\t\t} else if (cc === CC_LEFT_PARENTHESIS) {\n\t\t\t\t\treturn pos;\n\t\t\t\t} else {\n\t\t\t\t\tpos++;\n\t\t\t\t}\n\t\t\t\tif (pos === input.length) return pos;\n\t\t\t\tcc = input.charCodeAt(pos);\n\t\t\t}\n\t\t}\n\t} else {\n\t\tif (callbacks.identifier !== undefined) {\n\t\t\treturn callbacks.identifier(input, start, pos);\n\t\t}\n\t\treturn pos;\n\t}\n};\n\n/** @type {CharHandler} */\nconst consumePotentialPseudo = (input, pos, callbacks) => {\n\tconst start = pos;\n\tpos++;\n\tif (!callbacks.isSelector(input, pos) || !_startsIdentifier(input, pos))\n\t\treturn pos;\n\tpos = _consumeIdentifier(input, pos);\n\tlet cc = input.charCodeAt(pos);\n\tif (cc === CC_LEFT_PARENTHESIS) {\n\t\tpos++;\n\t\tif (callbacks.pseudoFunction !== undefined) {\n\t\t\treturn callbacks.pseudoFunction(input, start, pos);\n\t\t}\n\t\treturn pos;\n\t}\n\tif (callbacks.pseudoClass !== undefined) {\n\t\treturn callbacks.pseudoClass(input, start, pos);\n\t}\n\treturn pos;\n};\n\n/** @type {CharHandler} */\nconst consumeLeftParenthesis = (input, pos, callbacks) => {\n\tpos++;\n\tif (callbacks.leftParenthesis !== undefined) {\n\t\treturn callbacks.leftParenthesis(input, pos - 1, pos);\n\t}\n\treturn pos;\n};\n\n/** @type {CharHandler} */\nconst consumeRightParenthesis = (input, pos, callbacks) => {\n\tpos++;\n\tif (callbacks.rightParenthesis !== undefined) {\n\t\treturn callbacks.rightParenthesis(input, pos - 1, pos);\n\t}\n\treturn pos;\n};\n\n/** @type {CharHandler} */\nconst consumeLeftCurlyBracket = (input, pos, callbacks) => {\n\tpos++;\n\tif (callbacks.leftCurlyBracket !== undefined) {\n\t\treturn callbacks.leftCurlyBracket(input, pos - 1, pos);\n\t}\n\treturn pos;\n};\n\n/** @type {CharHandler} */\nconst consumeRightCurlyBracket = (input, pos, callbacks) => {\n\tpos++;\n\tif (callbacks.rightCurlyBracket !== undefined) {\n\t\treturn callbacks.rightCurlyBracket(input, pos - 1, pos);\n\t}\n\treturn pos;\n};\n\n/** @type {CharHandler} */\nconst consumeSemicolon = (input, pos, callbacks) => {\n\tpos++;\n\tif (callbacks.semicolon !== undefined) {\n\t\treturn callbacks.semicolon(input, pos - 1, pos);\n\t}\n\treturn pos;\n};\n\n/** @type {CharHandler} */\nconst consumeComma = (input, pos, callbacks) => {\n\tpos++;\n\tif (callbacks.comma !== undefined) {\n\t\treturn callbacks.comma(input, pos - 1, pos);\n\t}\n\treturn pos;\n};\n\nconst _consumeIdentifier = (input, pos) => {\n\tfor (;;) {\n\t\tconst cc = input.charCodeAt(pos);\n\t\tif (cc === CC_BACK_SLASH) {\n\t\t\tpos++;\n\t\t\tif (pos === input.length) return pos;\n\t\t\tpos++;\n\t\t} else if (\n\t\t\t_isIdentifierStartCode(cc) ||\n\t\t\t_isDigit(cc) ||\n\t\t\tcc === CC_HYPHEN_MINUS\n\t\t) {\n\t\t\tpos++;\n\t\t} else {\n\t\t\treturn pos;\n\t\t}\n\t}\n};\n\nconst _consumeNumber = (input, pos) => {\n\tpos++;\n\tif (pos === input.length) return pos;\n\tlet cc = input.charCodeAt(pos);\n\twhile (_isDigit(cc)) {\n\t\tpos++;\n\t\tif (pos === input.length) return pos;\n\t\tcc = input.charCodeAt(pos);\n\t}\n\tif (cc === CC_FULL_STOP && pos + 1 !== input.length) {\n\t\tconst next = input.charCodeAt(pos + 1);\n\t\tif (_isDigit(next)) {\n\t\t\tpos += 2;\n\t\t\tcc = input.charCodeAt(pos);\n\t\t\twhile (_isDigit(cc)) {\n\t\t\t\tpos++;\n\t\t\t\tif (pos === input.length) return pos;\n\t\t\t\tcc = input.charCodeAt(pos);\n\t\t\t}\n\t\t}\n\t}\n\tif (cc === CC_LOWER_E || cc === CC_UPPER_E) {\n\t\tif (pos + 1 !== input.length) {\n\t\t\tconst next = input.charCodeAt(pos + 2);\n\t\t\tif (_isDigit(next)) {\n\t\t\t\tpos += 2;\n\t\t\t} else if (\n\t\t\t\t(next === CC_HYPHEN_MINUS || next === CC_PLUS_SIGN) &&\n\t\t\t\tpos + 2 !== input.length\n\t\t\t) {\n\t\t\t\tconst next = input.charCodeAt(pos + 2);\n\t\t\t\tif (_isDigit(next)) {\n\t\t\t\t\tpos += 3;\n\t\t\t\t} else {\n\t\t\t\t\treturn pos;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\treturn pos;\n\t\t\t}\n\t\t}\n\t} else {\n\t\treturn pos;\n\t}\n\tcc = input.charCodeAt(pos);\n\twhile (_isDigit(cc)) {\n\t\tpos++;\n\t\tif (pos === input.length) return pos;\n\t\tcc = input.charCodeAt(pos);\n\t}\n\treturn pos;\n};\n\n/** @type {CharHandler} */\nconst consumeLessThan = (input, pos, callbacks) => {\n\tif (input.slice(pos + 1, pos + 4) === \"!--\") return pos + 4;\n\treturn pos + 1;\n};\n\n/** @type {CharHandler} */\nconst consumeAt = (input, pos, callbacks) => {\n\tconst start = pos;\n\tpos++;\n\tif (pos === input.length) return pos;\n\tif (_startsIdentifier(input, pos)) {\n\t\tpos = _consumeIdentifier(input, pos);\n\t\tif (callbacks.atKeyword !== undefined) {\n\t\t\tpos = callbacks.atKeyword(input, start, pos);\n\t\t}\n\t}\n\treturn pos;\n};\n\nconst CHAR_MAP = Array.from({ length: 0x80 }, (_, cc) => {\n\t// https://drafts.csswg.org/css-syntax/#consume-token\n\tswitch (cc) {\n\t\tcase CC_LINE_FEED:\n\t\tcase CC_CARRIAGE_RETURN:\n\t\tcase CC_FORM_FEED:\n\t\tcase CC_TAB:\n\t\tcase CC_SPACE:\n\t\t\treturn consumeSpace;\n\t\tcase CC_QUOTATION_MARK:\n\t\tcase CC_APOSTROPHE:\n\t\t\treturn consumeString(cc);\n\t\tcase CC_NUMBER_SIGN:\n\t\t\treturn consumeNumberSign;\n\t\tcase CC_SLASH:\n\t\t\treturn consumePotentialComment;\n\t\t// case CC_LEFT_SQUARE:\n\t\t// case CC_RIGHT_SQUARE:\n\t\t// case CC_COMMA:\n\t\t// case CC_COLON:\n\t\t// \treturn consumeSingleCharToken;\n\t\tcase CC_COMMA:\n\t\t\treturn consumeComma;\n\t\tcase CC_SEMICOLON:\n\t\t\treturn consumeSemicolon;\n\t\tcase CC_LEFT_PARENTHESIS:\n\t\t\treturn consumeLeftParenthesis;\n\t\tcase CC_RIGHT_PARENTHESIS:\n\t\t\treturn consumeRightParenthesis;\n\t\tcase CC_LEFT_CURLY:\n\t\t\treturn consumeLeftCurlyBracket;\n\t\tcase CC_RIGHT_CURLY:\n\t\t\treturn consumeRightCurlyBracket;\n\t\tcase CC_COLON:\n\t\t\treturn consumePotentialPseudo;\n\t\tcase CC_PLUS_SIGN:\n\t\t\treturn consumeNumericToken;\n\t\tcase CC_FULL_STOP:\n\t\t\treturn consumeDot;\n\t\tcase CC_HYPHEN_MINUS:\n\t\t\treturn consumeMinus;\n\t\tcase CC_LESS_THAN_SIGN:\n\t\t\treturn consumeLessThan;\n\t\tcase CC_AT_SIGN:\n\t\t\treturn consumeAt;\n\t\tcase CC_LOWER_U:\n\t\t\treturn consumePotentialUrl;\n\t\tcase CC_LOW_LINE:\n\t\t\treturn consumeOtherIdentifier;\n\t\tdefault:\n\t\t\tif (_isDigit(cc)) return consumeNumericToken;\n\t\t\tif (\n\t\t\t\t(cc >= CC_LOWER_A && cc <= CC_LOWER_Z) ||\n\t\t\t\t(cc >= CC_UPPER_A && cc <= CC_UPPER_Z)\n\t\t\t) {\n\t\t\t\treturn consumeOtherIdentifier;\n\t\t\t}\n\t\t\treturn consumeSingleCharToken;\n\t}\n});\n\n/**\n * @param {string} input input css\n * @param {CssTokenCallbacks} callbacks callbacks\n * @returns {void}\n */\nmodule.exports = (input, callbacks) => {\n\tlet pos = 0;\n\twhile (pos < input.length) {\n\t\tconst cc = input.charCodeAt(pos);\n\t\tif (cc < 0x80) {\n\t\t\tpos = CHAR_MAP[cc](input, pos, callbacks);\n\t\t} else {\n\t\t\tpos++;\n\t\t}\n\t}\n};\n\nmodule.exports.eatComments = (input, pos) => {\n\tloop: for (;;) {\n\t\tconst cc = input.charCodeAt(pos);\n\t\tif (cc === CC_SLASH) {\n\t\t\tif (pos === input.length) return pos;\n\t\t\tlet cc = input.charCodeAt(pos + 1);\n\t\t\tif (cc !== CC_ASTERISK) return pos;\n\t\t\tpos++;\n\t\t\tfor (;;) {\n\t\t\t\tpos++;\n\t\t\t\tif (pos === input.length) return pos;\n\t\t\t\tcc = input.charCodeAt(pos);\n\t\t\t\twhile (cc === CC_ASTERISK) {\n\t\t\t\t\tpos++;\n\t\t\t\t\tif (pos === input.length) return pos;\n\t\t\t\t\tcc = input.charCodeAt(pos);\n\t\t\t\t\tif (cc === CC_SLASH) {\n\t\t\t\t\t\tpos++;\n\t\t\t\t\t\tcontinue loop;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn pos;\n\t}\n};\n\nmodule.exports.eatWhitespaceAndComments = (input, pos) => {\n\tloop: for (;;) {\n\t\tconst cc = input.charCodeAt(pos);\n\t\tif (cc === CC_SLASH) {\n\t\t\tif (pos === input.length) return pos;\n\t\t\tlet cc = input.charCodeAt(pos + 1);\n\t\t\tif (cc !== CC_ASTERISK) return pos;\n\t\t\tpos++;\n\t\t\tfor (;;) {\n\t\t\t\tpos++;\n\t\t\t\tif (pos === input.length) return pos;\n\t\t\t\tcc = input.charCodeAt(pos);\n\t\t\t\twhile (cc === CC_ASTERISK) {\n\t\t\t\t\tpos++;\n\t\t\t\t\tif (pos === input.length) return pos;\n\t\t\t\t\tcc = input.charCodeAt(pos);\n\t\t\t\t\tif (cc === CC_SLASH) {\n\t\t\t\t\t\tpos++;\n\t\t\t\t\t\tcontinue loop;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t} else if (_isWhiteSpace(cc)) {\n\t\t\tpos++;\n\t\t\tcontinue;\n\t\t}\n\t\treturn pos;\n\t}\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}