{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Florent Cailhol @ooflorent\n*/\n\"use strict\";\n\nconst {\n  compareModulesByPreOrderIndexOrIdentifier\n} = require(\"../util/comparators\");\n\nconst {\n  assignAscendingModuleIds,\n  getUsedModuleIdsAndModules\n} = require(\"./IdHelpers\");\n/** @typedef {import(\"../Compiler\")} Compiler */\n\n/** @typedef {import(\"../Module\")} Module */\n\n\nclass NaturalModuleIdsPlugin {\n  /**\n   * Apply the plugin\n   * @param {Compiler} compiler the compiler instance\n   * @returns {void}\n   */\n  apply(compiler) {\n    compiler.hooks.compilation.tap(\"NaturalModuleIdsPlugin\", compilation => {\n      compilation.hooks.moduleIds.tap(\"NaturalModuleIdsPlugin\", modules => {\n        const [usedIds, modulesInNaturalOrder] = getUsedModuleIdsAndModules(compilation);\n        modulesInNaturalOrder.sort(compareModulesByPreOrderIndexOrIdentifier(compilation.moduleGraph));\n        assignAscendingModuleIds(usedIds, modulesInNaturalOrder, compilation);\n      });\n    });\n  }\n\n}\n\nmodule.exports = NaturalModuleIdsPlugin;","map":{"version":3,"names":["compareModulesByPreOrderIndexOrIdentifier","require","assignAscendingModuleIds","getUsedModuleIdsAndModules","NaturalModuleIdsPlugin","apply","compiler","hooks","compilation","tap","moduleIds","modules","usedIds","modulesInNaturalOrder","sort","moduleGraph","module","exports"],"sources":["/Users/arpanbhandari/Documents/cod-ing/React/newsapp/node_modules/webpack/lib/ids/NaturalModuleIdsPlugin.js"],"sourcesContent":["/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Florent Cailhol @ooflorent\n*/\n\n\"use strict\";\n\nconst {\n\tcompareModulesByPreOrderIndexOrIdentifier\n} = require(\"../util/comparators\");\nconst {\n\tassignAscendingModuleIds,\n\tgetUsedModuleIdsAndModules\n} = require(\"./IdHelpers\");\n\n/** @typedef {import(\"../Compiler\")} Compiler */\n/** @typedef {import(\"../Module\")} Module */\n\nclass NaturalModuleIdsPlugin {\n\t/**\n\t * Apply the plugin\n\t * @param {Compiler} compiler the compiler instance\n\t * @returns {void}\n\t */\n\tapply(compiler) {\n\t\tcompiler.hooks.compilation.tap(\"NaturalModuleIdsPlugin\", compilation => {\n\t\t\tcompilation.hooks.moduleIds.tap(\"NaturalModuleIdsPlugin\", modules => {\n\t\t\t\tconst [usedIds, modulesInNaturalOrder] =\n\t\t\t\t\tgetUsedModuleIdsAndModules(compilation);\n\t\t\t\tmodulesInNaturalOrder.sort(\n\t\t\t\t\tcompareModulesByPreOrderIndexOrIdentifier(compilation.moduleGraph)\n\t\t\t\t);\n\t\t\t\tassignAscendingModuleIds(usedIds, modulesInNaturalOrder, compilation);\n\t\t\t});\n\t\t});\n\t}\n}\n\nmodule.exports = NaturalModuleIdsPlugin;\n"],"mappings":"AAAA;AACA;AACA;AACA;AAEA;;AAEA,MAAM;EACLA;AADK,IAEFC,OAAO,CAAC,qBAAD,CAFX;;AAGA,MAAM;EACLC,wBADK;EAELC;AAFK,IAGFF,OAAO,CAAC,aAAD,CAHX;AAKA;;AACA;;;AAEA,MAAMG,sBAAN,CAA6B;EAC5B;AACD;AACA;AACA;AACA;EACCC,KAAK,CAACC,QAAD,EAAW;IACfA,QAAQ,CAACC,KAAT,CAAeC,WAAf,CAA2BC,GAA3B,CAA+B,wBAA/B,EAAyDD,WAAW,IAAI;MACvEA,WAAW,CAACD,KAAZ,CAAkBG,SAAlB,CAA4BD,GAA5B,CAAgC,wBAAhC,EAA0DE,OAAO,IAAI;QACpE,MAAM,CAACC,OAAD,EAAUC,qBAAV,IACLV,0BAA0B,CAACK,WAAD,CAD3B;QAEAK,qBAAqB,CAACC,IAAtB,CACCd,yCAAyC,CAACQ,WAAW,CAACO,WAAb,CAD1C;QAGAb,wBAAwB,CAACU,OAAD,EAAUC,qBAAV,EAAiCL,WAAjC,CAAxB;MACA,CAPD;IAQA,CATD;EAUA;;AAjB2B;;AAoB7BQ,MAAM,CAACC,OAAP,GAAiBb,sBAAjB"},"metadata":{},"sourceType":"script"}