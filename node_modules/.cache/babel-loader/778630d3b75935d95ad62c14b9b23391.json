{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nconst Hook = require(\"./Hook\");\n\nconst HookCodeFactory = require(\"./HookCodeFactory\");\n\nclass SyncLoopHookCodeFactory extends HookCodeFactory {\n  content(_ref) {\n    let {\n      onError,\n      onDone,\n      rethrowIfPossible\n    } = _ref;\n    return this.callTapsLooping({\n      onError: (i, err) => onError(err),\n      onDone,\n      rethrowIfPossible\n    });\n  }\n\n}\n\nconst factory = new SyncLoopHookCodeFactory();\n\nconst TAP_ASYNC = () => {\n  throw new Error(\"tapAsync is not supported on a SyncLoopHook\");\n};\n\nconst TAP_PROMISE = () => {\n  throw new Error(\"tapPromise is not supported on a SyncLoopHook\");\n};\n\nconst COMPILE = function (options) {\n  factory.setup(this, options);\n  return factory.create(options);\n};\n\nfunction SyncLoopHook() {\n  let args = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n  let name = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : undefined;\n  const hook = new Hook(args, name);\n  hook.constructor = SyncLoopHook;\n  hook.tapAsync = TAP_ASYNC;\n  hook.tapPromise = TAP_PROMISE;\n  hook.compile = COMPILE;\n  return hook;\n}\n\nSyncLoopHook.prototype = null;\nmodule.exports = SyncLoopHook;","map":{"version":3,"names":["Hook","require","HookCodeFactory","SyncLoopHookCodeFactory","content","onError","onDone","rethrowIfPossible","callTapsLooping","i","err","factory","TAP_ASYNC","Error","TAP_PROMISE","COMPILE","options","setup","create","SyncLoopHook","args","name","undefined","hook","constructor","tapAsync","tapPromise","compile","prototype","module","exports"],"sources":["/Users/arpanbhandari/Documents/cod-ing/React/newsapp/node_modules/tapable/lib/SyncLoopHook.js"],"sourcesContent":["/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nconst Hook = require(\"./Hook\");\nconst HookCodeFactory = require(\"./HookCodeFactory\");\n\nclass SyncLoopHookCodeFactory extends HookCodeFactory {\n\tcontent({ onError, onDone, rethrowIfPossible }) {\n\t\treturn this.callTapsLooping({\n\t\t\tonError: (i, err) => onError(err),\n\t\t\tonDone,\n\t\t\trethrowIfPossible\n\t\t});\n\t}\n}\n\nconst factory = new SyncLoopHookCodeFactory();\n\nconst TAP_ASYNC = () => {\n\tthrow new Error(\"tapAsync is not supported on a SyncLoopHook\");\n};\n\nconst TAP_PROMISE = () => {\n\tthrow new Error(\"tapPromise is not supported on a SyncLoopHook\");\n};\n\nconst COMPILE = function(options) {\n\tfactory.setup(this, options);\n\treturn factory.create(options);\n};\n\nfunction SyncLoopHook(args = [], name = undefined) {\n\tconst hook = new Hook(args, name);\n\thook.constructor = SyncLoopHook;\n\thook.tapAsync = TAP_ASYNC;\n\thook.tapPromise = TAP_PROMISE;\n\thook.compile = COMPILE;\n\treturn hook;\n}\n\nSyncLoopHook.prototype = null;\n\nmodule.exports = SyncLoopHook;\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;;AAEA,MAAMA,IAAI,GAAGC,OAAO,CAAC,QAAD,CAApB;;AACA,MAAMC,eAAe,GAAGD,OAAO,CAAC,mBAAD,CAA/B;;AAEA,MAAME,uBAAN,SAAsCD,eAAtC,CAAsD;EACrDE,OAAO,OAAyC;IAAA,IAAxC;MAAEC,OAAF;MAAWC,MAAX;MAAmBC;IAAnB,CAAwC;IAC/C,OAAO,KAAKC,eAAL,CAAqB;MAC3BH,OAAO,EAAE,CAACI,CAAD,EAAIC,GAAJ,KAAYL,OAAO,CAACK,GAAD,CADD;MAE3BJ,MAF2B;MAG3BC;IAH2B,CAArB,CAAP;EAKA;;AAPoD;;AAUtD,MAAMI,OAAO,GAAG,IAAIR,uBAAJ,EAAhB;;AAEA,MAAMS,SAAS,GAAG,MAAM;EACvB,MAAM,IAAIC,KAAJ,CAAU,6CAAV,CAAN;AACA,CAFD;;AAIA,MAAMC,WAAW,GAAG,MAAM;EACzB,MAAM,IAAID,KAAJ,CAAU,+CAAV,CAAN;AACA,CAFD;;AAIA,MAAME,OAAO,GAAG,UAASC,OAAT,EAAkB;EACjCL,OAAO,CAACM,KAAR,CAAc,IAAd,EAAoBD,OAApB;EACA,OAAOL,OAAO,CAACO,MAAR,CAAeF,OAAf,CAAP;AACA,CAHD;;AAKA,SAASG,YAAT,GAAmD;EAAA,IAA7BC,IAA6B,uEAAtB,EAAsB;EAAA,IAAlBC,IAAkB,uEAAXC,SAAW;EAClD,MAAMC,IAAI,GAAG,IAAIvB,IAAJ,CAASoB,IAAT,EAAeC,IAAf,CAAb;EACAE,IAAI,CAACC,WAAL,GAAmBL,YAAnB;EACAI,IAAI,CAACE,QAAL,GAAgBb,SAAhB;EACAW,IAAI,CAACG,UAAL,GAAkBZ,WAAlB;EACAS,IAAI,CAACI,OAAL,GAAeZ,OAAf;EACA,OAAOQ,IAAP;AACA;;AAEDJ,YAAY,CAACS,SAAb,GAAyB,IAAzB;AAEAC,MAAM,CAACC,OAAP,GAAiBX,YAAjB"},"metadata":{},"sourceType":"script"}